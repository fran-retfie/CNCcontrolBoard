ARM GAS  /tmp/cc4ArBJq.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"hmi.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.__Read_Pushbuttons,"ax",%progbits
  20              		.align	1
  21              		.global	__Read_Pushbuttons
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	__Read_Pushbuttons:
  27              	.LFB291:
  28              		.file 1 "Core/Src/hmi.c"
   1:Core/Src/hmi.c **** 
   2:Core/Src/hmi.c **** // Francesco Osti 25/12/2022 //
   3:Core/Src/hmi.c **** 
   4:Core/Src/hmi.c **** #include "hmi.h"
   5:Core/Src/hmi.c **** #include "main.h"
   6:Core/Src/hmi.c **** #include "lcd.h"
   7:Core/Src/hmi.c **** #include <stdio.h>
   8:Core/Src/hmi.c **** #include <string.h>
   9:Core/Src/hmi.c **** #include <stdlib.h>
  10:Core/Src/hmi.c **** 
  11:Core/Src/hmi.c **** uint8_t __Read_Pushbuttons(){
  29              		.loc 1 11 29 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  12:Core/Src/hmi.c ****     return (PB0_GPIO_Port->IDR & (PB0_Pin | PB1_Pin | PB2_Pin))>>(13-5) | (PB7_GPIO_Port->IDR & (0x
  34              		.loc 1 12 5 view .LVU1
  35              		.loc 1 12 26 is_stmt 0 view .LVU2
  36 0000 054B     		ldr	r3, .L2
  37 0002 1B69     		ldr	r3, [r3, #16]
  38              		.loc 1 12 64 view .LVU3
  39 0004 1B0A     		lsrs	r3, r3, #8
  40 0006 03F0E003 		and	r3, r3, #224
  41              		.loc 1 12 89 view .LVU4
  42 000a 044A     		ldr	r2, .L2+4
  43 000c 1069     		ldr	r0, [r2, #16]
  44              		.loc 1 12 104 view .LVU5
  45 000e C0F38400 		ubfx	r0, r0, #2, #5
  13:Core/Src/hmi.c **** }
ARM GAS  /tmp/cc4ArBJq.s 			page 2


  46              		.loc 1 13 1 view .LVU6
  47 0012 1843     		orrs	r0, r0, r3
  48 0014 7047     		bx	lr
  49              	.L3:
  50 0016 00BF     		.align	2
  51              	.L2:
  52 0018 00080048 		.word	1207961600
  53 001c 00100048 		.word	1207963648
  54              		.cfi_endproc
  55              	.LFE291:
  57              		.section	.text.__BP_Control,"ax",%progbits
  58              		.align	1
  59              		.global	__BP_Control
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  64              	__BP_Control:
  65              	.LVL0:
  66              	.LFB292:
  14:Core/Src/hmi.c **** 
  15:Core/Src/hmi.c **** char ModeNames[4][17] = {"AZZERAMENTO", "MANUALE", "SPIANATURA", "COMPUTER"};
  16:Core/Src/hmi.c **** char StateNames[4][6] = {"STOP", "PAUSE", "RUN"};
  17:Core/Src/hmi.c **** 
  18:Core/Src/hmi.c **** void __BP_Control(HMI_info_t* info, uint8_t mask, bool pause_mask)
  19:Core/Src/hmi.c **** {
  67              		.loc 1 19 1 is_stmt 1 view -0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		.loc 1 19 1 is_stmt 0 view .LVU8
  72 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  73              		.cfi_def_cfa_offset 24
  74              		.cfi_offset 3, -24
  75              		.cfi_offset 4, -20
  76              		.cfi_offset 5, -16
  77              		.cfi_offset 6, -12
  78              		.cfi_offset 7, -8
  79              		.cfi_offset 14, -4
  80 0002 0446     		mov	r4, r0
  81 0004 0E46     		mov	r6, r1
  82 0006 1746     		mov	r7, r2
  20:Core/Src/hmi.c ****   uint8_t newPushbuttons = __Read_Pushbuttons();
  83              		.loc 1 20 3 is_stmt 1 view .LVU9
  84              		.loc 1 20 28 is_stmt 0 view .LVU10
  85 0008 FFF7FEFF 		bl	__Read_Pushbuttons
  86              	.LVL1:
  87              		.loc 1 20 28 view .LVU11
  88 000c 0546     		mov	r5, r0
  89              	.LVL2:
  21:Core/Src/hmi.c ****   uint8_t PBpressed = ~newPushbuttons & info->pushbuttons & mask;
  90              		.loc 1 21 3 is_stmt 1 view .LVU12
  91              		.loc 1 21 39 is_stmt 0 view .LVU13
  92 000e C143     		mvns	r1, r0
  93 0010 49B2     		sxtb	r1, r1
  94              		.loc 1 21 45 view .LVU14
  95 0012 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
  96              		.loc 1 21 11 view .LVU15
ARM GAS  /tmp/cc4ArBJq.s 			page 3


  97 0014 0B40     		ands	r3, r3, r1
  98 0016 06EA0301 		and	r1, r6, r3
  99              	.LVL3:
  22:Core/Src/hmi.c **** 
  23:Core/Src/hmi.c ****   if((PBpressed & PB_MODE) && info->zeroed && (info->state == HMI_State_Stop)){
 100              		.loc 1 23 3 is_stmt 1 view .LVU16
 101              		.loc 1 23 5 is_stmt 0 view .LVU17
 102 001a 11F0100F 		tst	r1, #16
 103 001e 11D0     		beq	.L5
 104              		.loc 1 23 35 discriminator 1 view .LVU18
 105 0020 E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 106              		.loc 1 23 28 discriminator 1 view .LVU19
 107 0022 7BB1     		cbz	r3, .L5
 108              		.loc 1 23 52 discriminator 2 view .LVU20
 109 0024 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 110              		.loc 1 23 44 discriminator 2 view .LVU21
 111 0026 6BB9     		cbnz	r3, .L5
  24:Core/Src/hmi.c ****     info->mode = (info->mode >= 3) ? HMI_Mode_Zero : info->mode+1;
 112              		.loc 1 24 5 is_stmt 1 view .LVU22
 113              		.loc 1 24 23 is_stmt 0 view .LVU23
 114 0028 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 115              		.loc 1 24 52 view .LVU24
 116 002a 022A     		cmp	r2, #2
 117 002c 01D8     		bhi	.L6
 118              		.loc 1 24 52 discriminator 1 view .LVU25
 119 002e 0132     		adds	r2, r2, #1
 120 0030 D3B2     		uxtb	r3, r2
 121              	.L6:
 122              		.loc 1 24 16 discriminator 4 view .LVU26
 123 0032 2370     		strb	r3, [r4]
  25:Core/Src/hmi.c ****     info->state = HMI_State_Stop;
 124              		.loc 1 25 5 is_stmt 1 discriminator 4 view .LVU27
 125              		.loc 1 25 17 is_stmt 0 discriminator 4 view .LVU28
 126 0034 0023     		movs	r3, #0
 127 0036 6370     		strb	r3, [r4, #1]
  26:Core/Src/hmi.c ****     info->move = HMI_Move_None;
 128              		.loc 1 26 5 is_stmt 1 discriminator 4 view .LVU29
 129              		.loc 1 26 16 is_stmt 0 discriminator 4 view .LVU30
 130 0038 0223     		movs	r3, #2
 131 003a A370     		strb	r3, [r4, #2]
  27:Core/Src/hmi.c ****     info->update = true;
 132              		.loc 1 27 5 is_stmt 1 discriminator 4 view .LVU31
 133              		.loc 1 27 18 is_stmt 0 discriminator 4 view .LVU32
 134 003c 0123     		movs	r3, #1
 135 003e A376     		strb	r3, [r4, #26]
  28:Core/Src/hmi.c ****     info->cnt2 = 30;
 136              		.loc 1 28 5 is_stmt 1 discriminator 4 view .LVU33
 137              		.loc 1 28 16 is_stmt 0 discriminator 4 view .LVU34
 138 0040 1E23     		movs	r3, #30
 139 0042 6376     		strb	r3, [r4, #25]
 140              	.L5:
  29:Core/Src/hmi.c ****   }
  30:Core/Src/hmi.c **** 
  31:Core/Src/hmi.c ****   if(PBpressed & PB_STOP){
 141              		.loc 1 31 3 is_stmt 1 view .LVU35
 142              		.loc 1 31 5 is_stmt 0 view .LVU36
 143 0044 11F0020F 		tst	r1, #2
ARM GAS  /tmp/cc4ArBJq.s 			page 4


 144 0048 05D0     		beq	.L7
  32:Core/Src/hmi.c ****     info->state = HMI_State_Stop;
 145              		.loc 1 32 5 is_stmt 1 view .LVU37
 146              		.loc 1 32 17 is_stmt 0 view .LVU38
 147 004a 0023     		movs	r3, #0
 148 004c 6370     		strb	r3, [r4, #1]
  33:Core/Src/hmi.c ****     info->update = true;
 149              		.loc 1 33 5 is_stmt 1 view .LVU39
 150              		.loc 1 33 18 is_stmt 0 view .LVU40
 151 004e 0123     		movs	r3, #1
 152 0050 A376     		strb	r3, [r4, #26]
  34:Core/Src/hmi.c ****     info->cnt2 = 30;
 153              		.loc 1 34 5 is_stmt 1 view .LVU41
 154              		.loc 1 34 16 is_stmt 0 view .LVU42
 155 0052 1E23     		movs	r3, #30
 156 0054 6376     		strb	r3, [r4, #25]
 157              	.L7:
  35:Core/Src/hmi.c ****   }
  36:Core/Src/hmi.c **** 
  37:Core/Src/hmi.c ****   if((PBpressed & PB_RUN) && (info->state != HMI_State_Stop)){
 158              		.loc 1 37 3 is_stmt 1 view .LVU43
 159              		.loc 1 37 5 is_stmt 0 view .LVU44
 160 0056 11F0400F 		tst	r1, #64
 161 005a 06D0     		beq	.L8
 162              		.loc 1 37 35 discriminator 1 view .LVU45
 163 005c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 164              		.loc 1 37 27 discriminator 1 view .LVU46
 165 005e 23B1     		cbz	r3, .L8
  38:Core/Src/hmi.c ****       info->state = pause_mask ? HMI_State_Pause : HMI_State_Stop;
 166              		.loc 1 38 7 is_stmt 1 view .LVU47
 167              		.loc 1 38 19 is_stmt 0 view .LVU48
 168 0060 6770     		strb	r7, [r4, #1]
  39:Core/Src/hmi.c ****       info->update = true;
 169              		.loc 1 39 7 is_stmt 1 view .LVU49
 170              		.loc 1 39 20 is_stmt 0 view .LVU50
 171 0062 0123     		movs	r3, #1
 172 0064 A376     		strb	r3, [r4, #26]
  40:Core/Src/hmi.c ****       info->cnt2 = 30;
 173              		.loc 1 40 7 is_stmt 1 view .LVU51
 174              		.loc 1 40 18 is_stmt 0 view .LVU52
 175 0066 1E23     		movs	r3, #30
 176 0068 6376     		strb	r3, [r4, #25]
 177              	.L8:
  41:Core/Src/hmi.c ****   }
  42:Core/Src/hmi.c **** 
  43:Core/Src/hmi.c ****   if((~newPushbuttons & PB_RUN) && !HAL_GPIO_ReadPin(SWSTOP_GPIO_Port, SWSTOP_Pin)){
 178              		.loc 1 43 3 is_stmt 1 view .LVU53
 179              		.loc 1 43 5 is_stmt 0 view .LVU54
 180 006a 15F0400F 		tst	r5, #64
 181 006e 03D0     		beq	.L12
 182              	.LVL4:
 183              	.L9:
  44:Core/Src/hmi.c ****     info->cnt1++;
  45:Core/Src/hmi.c ****     if(info->cnt1 > 20) {
  46:Core/Src/hmi.c ****       info->state = HMI_State_Run;
  47:Core/Src/hmi.c ****       info->update = true;
  48:Core/Src/hmi.c ****       info->cnt2 = 30;
ARM GAS  /tmp/cc4ArBJq.s 			page 5


  49:Core/Src/hmi.c ****       info->zeroed = true; //to be removed
  50:Core/Src/hmi.c ****       info->cnt1 = 0;
  51:Core/Src/hmi.c ****     }
  52:Core/Src/hmi.c ****   } 
  53:Core/Src/hmi.c ****   else {
  54:Core/Src/hmi.c ****   info->cnt1 = 0;
 184              		.loc 1 54 3 is_stmt 1 view .LVU55
 185              		.loc 1 54 14 is_stmt 0 view .LVU56
 186 0070 0023     		movs	r3, #0
 187 0072 2376     		strb	r3, [r4, #24]
 188              	.L10:
  55:Core/Src/hmi.c ****   }
  56:Core/Src/hmi.c **** 
  57:Core/Src/hmi.c ****   info->pushbuttons = newPushbuttons;
 189              		.loc 1 57 3 is_stmt 1 view .LVU57
 190              		.loc 1 57 21 is_stmt 0 view .LVU58
 191 0074 2577     		strb	r5, [r4, #28]
  58:Core/Src/hmi.c **** }
 192              		.loc 1 58 1 view .LVU59
 193 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 194              	.LVL5:
 195              	.L12:
  43:Core/Src/hmi.c ****     info->cnt1++;
 196              		.loc 1 43 37 discriminator 1 view .LVU60
 197 0078 4021     		movs	r1, #64
 198              	.LVL6:
  43:Core/Src/hmi.c ****     info->cnt1++;
 199              		.loc 1 43 37 discriminator 1 view .LVU61
 200 007a 4FF09040 		mov	r0, #1207959552
 201              	.LVL7:
  43:Core/Src/hmi.c ****     info->cnt1++;
 202              		.loc 1 43 37 discriminator 1 view .LVU62
 203 007e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 204              	.LVL8:
  43:Core/Src/hmi.c ****     info->cnt1++;
 205              		.loc 1 43 33 discriminator 1 view .LVU63
 206 0082 0028     		cmp	r0, #0
 207 0084 F4D1     		bne	.L9
  44:Core/Src/hmi.c ****     if(info->cnt1 > 20) {
 208              		.loc 1 44 5 is_stmt 1 view .LVU64
  44:Core/Src/hmi.c ****     if(info->cnt1 > 20) {
 209              		.loc 1 44 9 is_stmt 0 view .LVU65
 210 0086 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
  44:Core/Src/hmi.c ****     if(info->cnt1 > 20) {
 211              		.loc 1 44 15 view .LVU66
 212 0088 0133     		adds	r3, r3, #1
 213 008a DBB2     		uxtb	r3, r3
 214 008c 2376     		strb	r3, [r4, #24]
  45:Core/Src/hmi.c ****       info->state = HMI_State_Run;
 215              		.loc 1 45 5 is_stmt 1 view .LVU67
  45:Core/Src/hmi.c ****       info->state = HMI_State_Run;
 216              		.loc 1 45 7 is_stmt 0 view .LVU68
 217 008e 142B     		cmp	r3, #20
 218 0090 F0D9     		bls	.L10
  46:Core/Src/hmi.c ****       info->update = true;
 219              		.loc 1 46 7 is_stmt 1 view .LVU69
  46:Core/Src/hmi.c ****       info->update = true;
ARM GAS  /tmp/cc4ArBJq.s 			page 6


 220              		.loc 1 46 19 is_stmt 0 view .LVU70
 221 0092 0223     		movs	r3, #2
 222 0094 6370     		strb	r3, [r4, #1]
  47:Core/Src/hmi.c ****       info->cnt2 = 30;
 223              		.loc 1 47 7 is_stmt 1 view .LVU71
  47:Core/Src/hmi.c ****       info->cnt2 = 30;
 224              		.loc 1 47 20 is_stmt 0 view .LVU72
 225 0096 0123     		movs	r3, #1
 226 0098 A376     		strb	r3, [r4, #26]
  48:Core/Src/hmi.c ****       info->zeroed = true; //to be removed
 227              		.loc 1 48 7 is_stmt 1 view .LVU73
  48:Core/Src/hmi.c ****       info->zeroed = true; //to be removed
 228              		.loc 1 48 18 is_stmt 0 view .LVU74
 229 009a 1E22     		movs	r2, #30
 230 009c 6276     		strb	r2, [r4, #25]
  49:Core/Src/hmi.c ****       info->cnt1 = 0;
 231              		.loc 1 49 7 is_stmt 1 view .LVU75
  49:Core/Src/hmi.c ****       info->cnt1 = 0;
 232              		.loc 1 49 20 is_stmt 0 view .LVU76
 233 009e E376     		strb	r3, [r4, #27]
  50:Core/Src/hmi.c ****     }
 234              		.loc 1 50 7 is_stmt 1 view .LVU77
  50:Core/Src/hmi.c ****     }
 235              		.loc 1 50 18 is_stmt 0 view .LVU78
 236 00a0 0023     		movs	r3, #0
 237 00a2 2376     		strb	r3, [r4, #24]
 238 00a4 E6E7     		b	.L10
 239              		.cfi_endproc
 240              	.LFE292:
 242              		.section	.rodata.HMI_Update.str1.4,"aMS",%progbits,1
 243              		.align	2
 244              	.LC0:
 245 0000 593A2025 		.ascii	"Y: %05umm\000"
 245      3035756D 
 245      6D00
 246 000a 0000     		.align	2
 247              	.LC1:
 248 000c 583A2025 		.ascii	"X: %05umm\000"
 248      3035756D 
 248      6D00
 249              		.section	.text.HMI_Update,"ax",%progbits
 250              		.align	1
 251              		.global	HMI_Update
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 256              	HMI_Update:
 257              	.LVL9:
 258              	.LFB293:
  59:Core/Src/hmi.c **** 
  60:Core/Src/hmi.c **** void HMI_Update(HMI_info_t* info, volatile uint16_t* adc_data){
 259              		.loc 1 60 63 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 24
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		.loc 1 60 63 is_stmt 0 view .LVU80
 264 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/cc4ArBJq.s 			page 7


 265              		.cfi_def_cfa_offset 12
 266              		.cfi_offset 4, -12
 267              		.cfi_offset 5, -8
 268              		.cfi_offset 14, -4
 269 0002 87B0     		sub	sp, sp, #28
 270              		.cfi_def_cfa_offset 40
 271 0004 0446     		mov	r4, r0
  61:Core/Src/hmi.c ****   switch (info->mode) {
 272              		.loc 1 61 3 is_stmt 1 view .LVU81
 273              		.loc 1 61 15 is_stmt 0 view .LVU82
 274 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 275              		.loc 1 61 3 view .LVU83
 276 0008 032B     		cmp	r3, #3
 277 000a 07D8     		bhi	.L14
 278 000c DFE803F0 		tbb	[pc, r3]
 279              	.L16:
 280 0010 02       		.byte	(.L19-.L16)/2
 281 0011 13       		.byte	(.L18-.L16)/2
 282 0012 18       		.byte	(.L17-.L16)/2
 283 0013 1D       		.byte	(.L15-.L16)/2
 284              		.p2align 1
 285              	.L19:
  62:Core/Src/hmi.c ****   case  HMI_Mode_Zero:
  63:Core/Src/hmi.c ****     __BP_Control(info, (PB_STOP | PB_RUN | PB_MODE), false);
 286              		.loc 1 63 5 is_stmt 1 view .LVU84
 287 0014 0022     		movs	r2, #0
 288 0016 5221     		movs	r1, #82
 289              	.LVL10:
 290              		.loc 1 63 5 is_stmt 0 view .LVU85
 291 0018 FFF7FEFF 		bl	__BP_Control
 292              	.LVL11:
  64:Core/Src/hmi.c ****   break;
 293              		.loc 1 64 3 is_stmt 1 view .LVU86
 294              	.L14:
  65:Core/Src/hmi.c **** 
  66:Core/Src/hmi.c ****   case  HMI_Mode_Man:
  67:Core/Src/hmi.c ****     __BP_Control(info, (PB_STOP | PB_RUN | PB_MODE), false);
  68:Core/Src/hmi.c **** 
  69:Core/Src/hmi.c ****   
  70:Core/Src/hmi.c ****   break;
  71:Core/Src/hmi.c **** 
  72:Core/Src/hmi.c ****   case  HMI_Mode_Face:
  73:Core/Src/hmi.c ****     __BP_Control(info, (PB_STOP | PB_RUN | PB_MODE | PB_SET), true);
  74:Core/Src/hmi.c ****   break; 
  75:Core/Src/hmi.c **** 
  76:Core/Src/hmi.c ****   case  HMI_Mode_Ser:
  77:Core/Src/hmi.c ****     __BP_Control(info, (PB_STOP | PB_RUN | PB_MODE), true);
  78:Core/Src/hmi.c ****   break;
  79:Core/Src/hmi.c **** }
  80:Core/Src/hmi.c **** 
  81:Core/Src/hmi.c ****   if(info->cnt2 != 0){
 295              		.loc 1 81 3 view .LVU87
 296              		.loc 1 81 10 is_stmt 0 view .LVU88
 297 001c 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 298              		.loc 1 81 5 view .LVU89
 299 001e 002B     		cmp	r3, #0
 300 0020 3CD0     		beq	.L20
ARM GAS  /tmp/cc4ArBJq.s 			page 8


  82:Core/Src/hmi.c ****     info->cnt2--;
 301              		.loc 1 82 5 is_stmt 1 view .LVU90
 302              		.loc 1 82 15 is_stmt 0 view .LVU91
 303 0022 013B     		subs	r3, r3, #1
 304 0024 6376     		strb	r3, [r4, #25]
  83:Core/Src/hmi.c ****     if(info->update){
 305              		.loc 1 83 5 is_stmt 1 view .LVU92
 306              		.loc 1 83 12 is_stmt 0 view .LVU93
 307 0026 A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 308              		.loc 1 83 7 view .LVU94
 309 0028 A3B9     		cbnz	r3, .L25
 310              	.L21:
  84:Core/Src/hmi.c ****       char textStr[17];
  85:Core/Src/hmi.c ****       clearLCD();
  86:Core/Src/hmi.c ****       sprintf(textStr, ModeNames[info->mode]);
  87:Core/Src/hmi.c ****       setCursor(0, 0);
  88:Core/Src/hmi.c ****       writeLCD(textStr);
  89:Core/Src/hmi.c ****       sprintf(textStr, StateNames[info->state]);
  90:Core/Src/hmi.c ****       setCursor(0, 1);
  91:Core/Src/hmi.c ****       writeLCD(textStr);
  92:Core/Src/hmi.c ****       info->update = false;
  93:Core/Src/hmi.c ****     }
  94:Core/Src/hmi.c ****     if(info->cnt2 == 0) info->update = true;
 311              		.loc 1 94 5 is_stmt 1 view .LVU95
 312              		.loc 1 94 12 is_stmt 0 view .LVU96
 313 002a 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 314              		.loc 1 94 7 view .LVU97
 315 002c 002B     		cmp	r3, #0
 316 002e 37D1     		bne	.L13
 317              		.loc 1 94 25 is_stmt 1 discriminator 1 view .LVU98
 318              		.loc 1 94 38 is_stmt 0 discriminator 1 view .LVU99
 319 0030 0123     		movs	r3, #1
 320 0032 A376     		strb	r3, [r4, #26]
 321 0034 34E0     		b	.L13
 322              	.LVL12:
 323              	.L18:
  67:Core/Src/hmi.c **** 
 324              		.loc 1 67 5 is_stmt 1 view .LVU100
 325 0036 0022     		movs	r2, #0
 326 0038 5221     		movs	r1, #82
 327              	.LVL13:
  67:Core/Src/hmi.c **** 
 328              		.loc 1 67 5 is_stmt 0 view .LVU101
 329 003a FFF7FEFF 		bl	__BP_Control
 330              	.LVL14:
  70:Core/Src/hmi.c **** 
 331              		.loc 1 70 3 is_stmt 1 view .LVU102
 332 003e EDE7     		b	.L14
 333              	.LVL15:
 334              	.L17:
  73:Core/Src/hmi.c ****   break; 
 335              		.loc 1 73 5 view .LVU103
 336 0040 0122     		movs	r2, #1
 337 0042 5A21     		movs	r1, #90
 338              	.LVL16:
  73:Core/Src/hmi.c ****   break; 
 339              		.loc 1 73 5 is_stmt 0 view .LVU104
ARM GAS  /tmp/cc4ArBJq.s 			page 9


 340 0044 FFF7FEFF 		bl	__BP_Control
 341              	.LVL17:
  74:Core/Src/hmi.c **** 
 342              		.loc 1 74 3 is_stmt 1 view .LVU105
 343 0048 E8E7     		b	.L14
 344              	.LVL18:
 345              	.L15:
  77:Core/Src/hmi.c ****   break;
 346              		.loc 1 77 5 view .LVU106
 347 004a 0122     		movs	r2, #1
 348 004c 5221     		movs	r1, #82
 349              	.LVL19:
  77:Core/Src/hmi.c ****   break;
 350              		.loc 1 77 5 is_stmt 0 view .LVU107
 351 004e FFF7FEFF 		bl	__BP_Control
 352              	.LVL20:
  78:Core/Src/hmi.c **** }
 353              		.loc 1 78 3 is_stmt 1 view .LVU108
 354 0052 E3E7     		b	.L14
 355              	.L25:
 356              	.LBB2:
  84:Core/Src/hmi.c ****       clearLCD();
 357              		.loc 1 84 7 view .LVU109
  85:Core/Src/hmi.c ****       sprintf(textStr, ModeNames[info->mode]);
 358              		.loc 1 85 7 view .LVU110
 359 0054 FFF7FEFF 		bl	clearLCD
 360              	.LVL21:
  86:Core/Src/hmi.c ****       setCursor(0, 0);
 361              		.loc 1 86 7 view .LVU111
  86:Core/Src/hmi.c ****       setCursor(0, 0);
 362              		.loc 1 86 38 is_stmt 0 view .LVU112
 363 0058 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
  86:Core/Src/hmi.c ****       setCursor(0, 0);
 364              		.loc 1 86 33 view .LVU113
 365 005a 01EB0111 		add	r1, r1, r1, lsl #4
  86:Core/Src/hmi.c ****       setCursor(0, 0);
 366              		.loc 1 86 7 view .LVU114
 367 005e 254B     		ldr	r3, .L27
 368 0060 1944     		add	r1, r1, r3
 369 0062 01A8     		add	r0, sp, #4
 370 0064 FFF7FEFF 		bl	sprintf
 371              	.LVL22:
  87:Core/Src/hmi.c ****       writeLCD(textStr);
 372              		.loc 1 87 7 is_stmt 1 view .LVU115
 373 0068 0021     		movs	r1, #0
 374 006a 0846     		mov	r0, r1
 375 006c FFF7FEFF 		bl	setCursor
 376              	.LVL23:
  88:Core/Src/hmi.c ****       sprintf(textStr, StateNames[info->state]);
 377              		.loc 1 88 7 view .LVU116
 378 0070 01A8     		add	r0, sp, #4
 379 0072 FFF7FEFF 		bl	writeLCD
 380              	.LVL24:
  89:Core/Src/hmi.c ****       setCursor(0, 1);
 381              		.loc 1 89 7 view .LVU117
  89:Core/Src/hmi.c ****       setCursor(0, 1);
 382              		.loc 1 89 39 is_stmt 0 view .LVU118
ARM GAS  /tmp/cc4ArBJq.s 			page 10


 383 0076 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
  89:Core/Src/hmi.c ****       setCursor(0, 1);
 384              		.loc 1 89 34 view .LVU119
 385 0078 01EB4101 		add	r1, r1, r1, lsl #1
  89:Core/Src/hmi.c ****       setCursor(0, 1);
 386              		.loc 1 89 7 view .LVU120
 387 007c 1E4B     		ldr	r3, .L27+4
 388 007e 03EB4101 		add	r1, r3, r1, lsl #1
 389 0082 01A8     		add	r0, sp, #4
 390 0084 FFF7FEFF 		bl	sprintf
 391              	.LVL25:
  90:Core/Src/hmi.c ****       writeLCD(textStr);
 392              		.loc 1 90 7 is_stmt 1 view .LVU121
 393 0088 0121     		movs	r1, #1
 394 008a 0020     		movs	r0, #0
 395 008c FFF7FEFF 		bl	setCursor
 396              	.LVL26:
  91:Core/Src/hmi.c ****       info->update = false;
 397              		.loc 1 91 7 view .LVU122
 398 0090 01A8     		add	r0, sp, #4
 399 0092 FFF7FEFF 		bl	writeLCD
 400              	.LVL27:
  92:Core/Src/hmi.c ****     }
 401              		.loc 1 92 7 view .LVU123
  92:Core/Src/hmi.c ****     }
 402              		.loc 1 92 20 is_stmt 0 view .LVU124
 403 0096 0023     		movs	r3, #0
 404 0098 A376     		strb	r3, [r4, #26]
 405 009a C6E7     		b	.L21
 406              	.L20:
  92:Core/Src/hmi.c ****     }
 407              		.loc 1 92 20 view .LVU125
 408              	.LBE2:
  95:Core/Src/hmi.c ****   } else {
  96:Core/Src/hmi.c ****     if(info->update){
 409              		.loc 1 96 5 is_stmt 1 view .LVU126
 410              		.loc 1 96 12 is_stmt 0 view .LVU127
 411 009c A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 412              		.loc 1 96 7 view .LVU128
 413 009e 0BB9     		cbnz	r3, .L26
 414              	.L13:
  97:Core/Src/hmi.c ****       char textStr[17];
  98:Core/Src/hmi.c ****       clearLCD();
  99:Core/Src/hmi.c ****       sprintf(textStr, "Y: %05umm", info->pos.y);
 100:Core/Src/hmi.c ****       memmove(textStr+8, textStr+7, 4);
 101:Core/Src/hmi.c ****       textStr[7] = '.';
 102:Core/Src/hmi.c ****       setCursor(0, 0);
 103:Core/Src/hmi.c ****       writeLCD(textStr);
 104:Core/Src/hmi.c ****       sprintf(textStr, "X: %05umm", info->pos.x);
 105:Core/Src/hmi.c ****       memmove(textStr+8, textStr+7, 4);
 106:Core/Src/hmi.c ****       textStr[7] = '.';
 107:Core/Src/hmi.c ****       setCursor(0, 1);
 108:Core/Src/hmi.c ****       writeLCD(textStr);
 109:Core/Src/hmi.c ****       info->update = false;
 110:Core/Src/hmi.c ****     }
 111:Core/Src/hmi.c ****   }
 112:Core/Src/hmi.c ****   
ARM GAS  /tmp/cc4ArBJq.s 			page 11


 113:Core/Src/hmi.c **** 
 114:Core/Src/hmi.c **** 
 115:Core/Src/hmi.c **** 
 116:Core/Src/hmi.c **** 
 117:Core/Src/hmi.c **** }
 415              		.loc 1 117 1 view .LVU129
 416 00a0 07B0     		add	sp, sp, #28
 417              		.cfi_remember_state
 418              		.cfi_def_cfa_offset 12
 419              		@ sp needed
 420 00a2 30BD     		pop	{r4, r5, pc}
 421              	.LVL28:
 422              	.L26:
 423              		.cfi_restore_state
 424              	.LBB3:
  97:Core/Src/hmi.c ****       char textStr[17];
 425              		.loc 1 97 7 is_stmt 1 view .LVU130
  98:Core/Src/hmi.c ****       sprintf(textStr, "Y: %05umm", info->pos.y);
 426              		.loc 1 98 7 view .LVU131
 427 00a4 FFF7FEFF 		bl	clearLCD
 428              	.LVL29:
  99:Core/Src/hmi.c ****       memmove(textStr+8, textStr+7, 4);
 429              		.loc 1 99 7 view .LVU132
 430 00a8 E288     		ldrh	r2, [r4, #6]
 431 00aa 1449     		ldr	r1, .L27+8
 432 00ac 01A8     		add	r0, sp, #4
 433 00ae FFF7FEFF 		bl	sprintf
 434              	.LVL30:
 100:Core/Src/hmi.c ****       textStr[7] = '.';
 435              		.loc 1 100 7 view .LVU133
 436 00b2 DDF80B30 		ldr	r3, [sp, #11]	@ unaligned
 437 00b6 0393     		str	r3, [sp, #12]
 101:Core/Src/hmi.c ****       setCursor(0, 0);
 438              		.loc 1 101 7 view .LVU134
 101:Core/Src/hmi.c ****       setCursor(0, 0);
 439              		.loc 1 101 18 is_stmt 0 view .LVU135
 440 00b8 2E25     		movs	r5, #46
 441 00ba 8DF80B50 		strb	r5, [sp, #11]
 102:Core/Src/hmi.c ****       writeLCD(textStr);
 442              		.loc 1 102 7 is_stmt 1 view .LVU136
 443 00be 0021     		movs	r1, #0
 444 00c0 0846     		mov	r0, r1
 445 00c2 FFF7FEFF 		bl	setCursor
 446              	.LVL31:
 103:Core/Src/hmi.c ****       sprintf(textStr, "X: %05umm", info->pos.x);
 447              		.loc 1 103 7 view .LVU137
 448 00c6 01A8     		add	r0, sp, #4
 449 00c8 FFF7FEFF 		bl	writeLCD
 450              	.LVL32:
 104:Core/Src/hmi.c ****       memmove(textStr+8, textStr+7, 4);
 451              		.loc 1 104 7 view .LVU138
 452 00cc A288     		ldrh	r2, [r4, #4]
 453 00ce 0C49     		ldr	r1, .L27+12
 454 00d0 01A8     		add	r0, sp, #4
 455 00d2 FFF7FEFF 		bl	sprintf
 456              	.LVL33:
 105:Core/Src/hmi.c ****       textStr[7] = '.';
ARM GAS  /tmp/cc4ArBJq.s 			page 12


 457              		.loc 1 105 7 view .LVU139
 458 00d6 DDF80B30 		ldr	r3, [sp, #11]	@ unaligned
 459 00da 0393     		str	r3, [sp, #12]
 106:Core/Src/hmi.c ****       setCursor(0, 1);
 460              		.loc 1 106 7 view .LVU140
 106:Core/Src/hmi.c ****       setCursor(0, 1);
 461              		.loc 1 106 18 is_stmt 0 view .LVU141
 462 00dc 8DF80B50 		strb	r5, [sp, #11]
 107:Core/Src/hmi.c ****       writeLCD(textStr);
 463              		.loc 1 107 7 is_stmt 1 view .LVU142
 464 00e0 0121     		movs	r1, #1
 465 00e2 0020     		movs	r0, #0
 466 00e4 FFF7FEFF 		bl	setCursor
 467              	.LVL34:
 108:Core/Src/hmi.c ****       info->update = false;
 468              		.loc 1 108 7 view .LVU143
 469 00e8 01A8     		add	r0, sp, #4
 470 00ea FFF7FEFF 		bl	writeLCD
 471              	.LVL35:
 109:Core/Src/hmi.c ****     }
 472              		.loc 1 109 7 view .LVU144
 109:Core/Src/hmi.c ****     }
 473              		.loc 1 109 20 is_stmt 0 view .LVU145
 474 00ee 0023     		movs	r3, #0
 475 00f0 A376     		strb	r3, [r4, #26]
 476              	.LBE3:
 477              		.loc 1 117 1 view .LVU146
 478 00f2 D5E7     		b	.L13
 479              	.L28:
 480              		.align	2
 481              	.L27:
 482 00f4 00000000 		.word	.LANCHOR0
 483 00f8 00000000 		.word	.LANCHOR1
 484 00fc 00000000 		.word	.LC0
 485 0100 0C000000 		.word	.LC1
 486              		.cfi_endproc
 487              	.LFE293:
 489              		.global	StateNames
 490              		.global	ModeNames
 491              		.section	.data.ModeNames,"aw"
 492              		.align	2
 493              		.set	.LANCHOR0,. + 0
 496              	ModeNames:
 497 0000 415A5A45 		.ascii	"AZZERAMENTO\000"
 497      52414D45 
 497      4E544F00 
 498 000c 00000000 		.space	5
 498      00
 499 0011 4D414E55 		.ascii	"MANUALE\000"
 499      414C4500 
 500 0019 00000000 		.space	9
 500      00000000 
 500      00
 501 0022 53504941 		.ascii	"SPIANATURA\000"
 501      4E415455 
 501      524100
 502 002d 00000000 		.space	6
ARM GAS  /tmp/cc4ArBJq.s 			page 13


 502      0000
 503 0033 434F4D50 		.ascii	"COMPUTER\000"
 503      55544552 
 503      00
 504 003c 00000000 		.space	8
 504      00000000 
 505              		.section	.data.StateNames,"aw"
 506              		.align	2
 507              		.set	.LANCHOR1,. + 0
 510              	StateNames:
 511 0000 53544F50 		.ascii	"STOP\000"
 511      00
 512 0005 00       		.space	1
 513 0006 50415553 		.ascii	"PAUSE\000"
 513      4500
 514 000c 52554E00 		.ascii	"RUN\000"
 515 0010 0000     		.space	2
 516 0012 00000000 		.space	6
 516      0000
 517              		.text
 518              	.Letext0:
 519              		.file 2 "/home/retfie/.config/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 520              		.file 3 "/home/retfie/.config/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 521              		.file 4 "Core/Inc/cnc_info.h"
 522              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l431xx.h"
 523              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 524              		.file 7 "Core/Inc/lcd.h"
 525              		.file 8 "/home/retfie/.config/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
ARM GAS  /tmp/cc4ArBJq.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 hmi.c
     /tmp/cc4ArBJq.s:20     .text.__Read_Pushbuttons:0000000000000000 $t
     /tmp/cc4ArBJq.s:26     .text.__Read_Pushbuttons:0000000000000000 __Read_Pushbuttons
     /tmp/cc4ArBJq.s:52     .text.__Read_Pushbuttons:0000000000000018 $d
     /tmp/cc4ArBJq.s:58     .text.__BP_Control:0000000000000000 $t
     /tmp/cc4ArBJq.s:64     .text.__BP_Control:0000000000000000 __BP_Control
     /tmp/cc4ArBJq.s:243    .rodata.HMI_Update.str1.4:0000000000000000 $d
     /tmp/cc4ArBJq.s:250    .text.HMI_Update:0000000000000000 $t
     /tmp/cc4ArBJq.s:256    .text.HMI_Update:0000000000000000 HMI_Update
     /tmp/cc4ArBJq.s:280    .text.HMI_Update:0000000000000010 $d
     /tmp/cc4ArBJq.s:284    .text.HMI_Update:0000000000000014 $t
     /tmp/cc4ArBJq.s:482    .text.HMI_Update:00000000000000f4 $d
     /tmp/cc4ArBJq.s:510    .data.StateNames:0000000000000000 StateNames
     /tmp/cc4ArBJq.s:496    .data.ModeNames:0000000000000000 ModeNames
     /tmp/cc4ArBJq.s:492    .data.ModeNames:0000000000000000 $d
     /tmp/cc4ArBJq.s:506    .data.StateNames:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_ReadPin
clearLCD
sprintf
setCursor
writeLCD
