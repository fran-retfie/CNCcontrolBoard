ARM GAS  /tmp/cc8C2055.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB302:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <string.h>
  25:Core/Src/main.c **** #include <stdio.h>
  26:Core/Src/main.c **** #include <stdint.h>
  27:Core/Src/main.c **** #include <stdbool.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** #include "hmi.h"
  30:Core/Src/main.c **** #include "cnc_core.h"
  31:Core/Src/main.c **** #include "lcd.h"
ARM GAS  /tmp/cc8C2055.s 			page 2


  32:Core/Src/main.c **** #include "cnc_config.h"
  33:Core/Src/main.c **** #include "data_parser.h"
  34:Core/Src/main.c **** /* USER CODE END Includes */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PD */
  43:Core/Src/main.c **** /* USER CODE END PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  52:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  55:Core/Src/main.c **** TIM_HandleTypeDef htim7;
  56:Core/Src/main.c **** TIM_HandleTypeDef htim15;
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** UART_HandleTypeDef huart1;
  59:Core/Src/main.c **** UART_HandleTypeDef huart2;
  60:Core/Src/main.c **** UART_HandleTypeDef huart3;
  61:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_rx;
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* USER CODE BEGIN PV */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* USER CODE END PV */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  68:Core/Src/main.c **** void SystemClock_Config(void);
  69:Core/Src/main.c **** void PeriphCommonClock_Config(void);
  70:Core/Src/main.c **** static void MX_GPIO_Init(void);
  71:Core/Src/main.c **** static void MX_DMA_Init(void);
  72:Core/Src/main.c **** static void MX_ADC1_Init(void);
  73:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  74:Core/Src/main.c **** static void MX_TIM1_Init(void);
  75:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  76:Core/Src/main.c **** static void MX_USART3_UART_Init(void);
  77:Core/Src/main.c **** static void MX_TIM15_Init(void);
  78:Core/Src/main.c **** static void MX_TIM7_Init(void);
  79:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* USER CODE END PFP */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  84:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  85:Core/Src/main.c **** HMI_info_t hmi_info = { .mode = HMI_Mode_Zero, 
  86:Core/Src/main.c ****                         .state = HMI_State_Stop, 
  87:Core/Src/main.c ****                         .move = HMI_Move_None,
  88:Core/Src/main.c ****                         .pos = {3000, 3000},
ARM GAS  /tmp/cc8C2055.s 			page 3


  89:Core/Src/main.c ****                         .pulseLenght = {1000, 1000},
  90:Core/Src/main.c ****                         .commanded.pos = {0, 0},
  91:Core/Src/main.c ****                         .feed = 2000,
  92:Core/Src/main.c ****                         .run = {false,false},
  93:Core/Src/main.c ****                         .P1 = {10,10},
  94:Core/Src/main.c ****                         .P2 = {300,300},
  95:Core/Src/main.c ****                         .P1set = false,
  96:Core/Src/main.c ****                         .P2set = false,
  97:Core/Src/main.c ****                         .cnt1 = 0,
  98:Core/Src/main.c ****                         .cnt2 = 0,
  99:Core/Src/main.c ****                         .update = true,
 100:Core/Src/main.c ****                         .zeroed = {false, false},
 101:Core/Src/main.c ****                         .pushbuttons = 0xFFU,
 102:Core/Src/main.c ****                         .htimX = &enX_tim, 
 103:Core/Src/main.c ****                         .htimY = &enY_tim};
 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** volatile uint16_t adc_data[8];
 106:Core/Src/main.c **** uint8_t UART1_rxBuffer[11];
 107:Core/Src/main.c **** /* USER CODE END 0 */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** /**
 110:Core/Src/main.c ****   * @brief  The application entry point.
 111:Core/Src/main.c ****   * @retval int
 112:Core/Src/main.c ****   */
 113:Core/Src/main.c **** int main(void)
 114:Core/Src/main.c **** {
 115:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* USER CODE END 1 */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 122:Core/Src/main.c ****   HAL_Init();
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* USER CODE END Init */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* Configure the system clock */
 129:Core/Src/main.c ****   SystemClock_Config();
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** /* Configure the peripherals common clocks */
 132:Core/Src/main.c ****   PeriphCommonClock_Config();
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE END SysInit */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* Initialize all configured peripherals */
 139:Core/Src/main.c ****   MX_GPIO_Init();
 140:Core/Src/main.c ****   MX_DMA_Init();
 141:Core/Src/main.c ****   MX_ADC1_Init();
 142:Core/Src/main.c ****   MX_USART1_UART_Init();
 143:Core/Src/main.c ****   MX_TIM1_Init();
 144:Core/Src/main.c ****   MX_USART2_UART_Init();
 145:Core/Src/main.c ****   MX_USART3_UART_Init();
ARM GAS  /tmp/cc8C2055.s 			page 4


 146:Core/Src/main.c ****   MX_TIM15_Init();
 147:Core/Src/main.c ****   MX_TIM7_Init();
 148:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   initLCD();
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim7);
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 155:Core/Src/main.c ****   HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 156:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 157:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 158:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 159:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_data, 8);
 162:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 11);
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   /* USER CODE END 2 */
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /* Infinite loop */
 167:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 168:Core/Src/main.c ****   while (1)
 169:Core/Src/main.c ****   {
 170:Core/Src/main.c ****     /* USER CODE END WHILE */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****     CNC_HL_Control(&hmi_info, &huart1, adc_data);
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****     if(hmi_info.HMIupdate){
 177:Core/Src/main.c ****       hmi_info.HMIupdate = false;
 178:Core/Src/main.c ****       HMI_Update(&hmi_info);
 179:Core/Src/main.c ****     }
 180:Core/Src/main.c ****     //HAL_Delay(1);
 181:Core/Src/main.c ****   }
 182:Core/Src/main.c ****   /* USER CODE END 3 */
 183:Core/Src/main.c **** }
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /**
 186:Core/Src/main.c ****   * @brief System Clock Configuration
 187:Core/Src/main.c ****   * @retval None
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c **** void SystemClock_Config(void)
 190:Core/Src/main.c **** {
 191:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 192:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 195:Core/Src/main.c ****   */
 196:Core/Src/main.c ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 197:Core/Src/main.c ****   {
 198:Core/Src/main.c ****     Error_Handler();
 199:Core/Src/main.c ****   }
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 202:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
ARM GAS  /tmp/cc8C2055.s 			page 5


 203:Core/Src/main.c ****   */
 204:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 205:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 206:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 207:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 209:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 210:Core/Src/main.c ****   {
 211:Core/Src/main.c ****     Error_Handler();
 212:Core/Src/main.c ****   }
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 215:Core/Src/main.c ****   */
 216:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 217:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 218:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 219:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 220:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 221:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 224:Core/Src/main.c ****   {
 225:Core/Src/main.c ****     Error_Handler();
 226:Core/Src/main.c ****   }
 227:Core/Src/main.c **** }
 228:Core/Src/main.c **** 
 229:Core/Src/main.c **** /**
 230:Core/Src/main.c ****   * @brief Peripherals Common Clock Configuration
 231:Core/Src/main.c ****   * @retval None
 232:Core/Src/main.c ****   */
 233:Core/Src/main.c **** void PeriphCommonClock_Config(void)
 234:Core/Src/main.c **** {
 235:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /** Initializes the peripherals clock
 238:Core/Src/main.c ****   */
 239:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
 240:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 241:Core/Src/main.c ****   PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 242:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 243:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 8;
 244:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 245:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 246:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 247:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 248:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 249:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 250:Core/Src/main.c ****   {
 251:Core/Src/main.c ****     Error_Handler();
 252:Core/Src/main.c ****   }
 253:Core/Src/main.c **** }
 254:Core/Src/main.c **** 
 255:Core/Src/main.c **** /**
 256:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 257:Core/Src/main.c ****   * @param None
 258:Core/Src/main.c ****   * @retval None
 259:Core/Src/main.c ****   */
ARM GAS  /tmp/cc8C2055.s 			page 6


 260:Core/Src/main.c **** static void MX_ADC1_Init(void)
 261:Core/Src/main.c **** {
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   /** Common config
 274:Core/Src/main.c ****   */
 275:Core/Src/main.c ****   hadc1.Instance = ADC1;
 276:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 277:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 278:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 279:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 280:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 281:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 282:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 283:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 8;
 284:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 285:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 286:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 287:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 288:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 289:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 290:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 291:Core/Src/main.c ****   {
 292:Core/Src/main.c ****     Error_Handler();
 293:Core/Src/main.c ****   }
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /** Configure Regular Channel
 296:Core/Src/main.c ****   */
 297:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 298:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 299:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 300:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 301:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 302:Core/Src/main.c ****   sConfig.Offset = 0;
 303:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 304:Core/Src/main.c ****   {
 305:Core/Src/main.c ****     Error_Handler();
 306:Core/Src/main.c ****   }
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /** Configure Regular Channel
 309:Core/Src/main.c ****   */
 310:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_2;
 311:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 312:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 313:Core/Src/main.c ****   {
 314:Core/Src/main.c ****     Error_Handler();
 315:Core/Src/main.c ****   }
 316:Core/Src/main.c **** 
ARM GAS  /tmp/cc8C2055.s 			page 7


 317:Core/Src/main.c ****   /** Configure Regular Channel
 318:Core/Src/main.c ****   */
 319:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_3;
 320:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 321:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 322:Core/Src/main.c ****   {
 323:Core/Src/main.c ****     Error_Handler();
 324:Core/Src/main.c ****   }
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****   /** Configure Regular Channel
 327:Core/Src/main.c ****   */
 328:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 329:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 330:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 331:Core/Src/main.c ****   {
 332:Core/Src/main.c ****     Error_Handler();
 333:Core/Src/main.c ****   }
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****   /** Configure Regular Channel
 336:Core/Src/main.c ****   */
 337:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_9;
 338:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 339:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 340:Core/Src/main.c ****   {
 341:Core/Src/main.c ****     Error_Handler();
 342:Core/Src/main.c ****   }
 343:Core/Src/main.c **** 
 344:Core/Src/main.c ****   /** Configure Regular Channel
 345:Core/Src/main.c ****   */
 346:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_10;
 347:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 348:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 349:Core/Src/main.c ****   {
 350:Core/Src/main.c ****     Error_Handler();
 351:Core/Src/main.c ****   }
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****   /** Configure Regular Channel
 354:Core/Src/main.c ****   */
 355:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_12;
 356:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_7;
 357:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 358:Core/Src/main.c ****   {
 359:Core/Src/main.c ****     Error_Handler();
 360:Core/Src/main.c ****   }
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /** Configure Regular Channel
 363:Core/Src/main.c ****   */
 364:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_13;
 365:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_8;
 366:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 367:Core/Src/main.c ****   {
 368:Core/Src/main.c ****     Error_Handler();
 369:Core/Src/main.c ****   }
 370:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 373:Core/Src/main.c **** 
ARM GAS  /tmp/cc8C2055.s 			page 8


 374:Core/Src/main.c **** }
 375:Core/Src/main.c **** 
 376:Core/Src/main.c **** /**
 377:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 378:Core/Src/main.c ****   * @param None
 379:Core/Src/main.c ****   * @retval None
 380:Core/Src/main.c ****   */
 381:Core/Src/main.c **** static void MX_TIM1_Init(void)
 382:Core/Src/main.c **** {
 383:Core/Src/main.c **** 
 384:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 385:Core/Src/main.c **** 
 386:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 387:Core/Src/main.c **** 
 388:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 389:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 390:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 391:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 392:Core/Src/main.c **** 
 393:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 396:Core/Src/main.c ****   htim1.Instance = TIM1;
 397:Core/Src/main.c ****   htim1.Init.Prescaler = 1099;
 398:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 399:Core/Src/main.c ****   htim1.Init.Period = 400;
 400:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 401:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 402:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 403:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 404:Core/Src/main.c ****   {
 405:Core/Src/main.c ****     Error_Handler();
 406:Core/Src/main.c ****   }
 407:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 408:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 409:Core/Src/main.c ****   {
 410:Core/Src/main.c ****     Error_Handler();
 411:Core/Src/main.c ****   }
 412:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 413:Core/Src/main.c ****   {
 414:Core/Src/main.c ****     Error_Handler();
 415:Core/Src/main.c ****   }
 416:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 417:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 418:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 419:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 420:Core/Src/main.c ****   {
 421:Core/Src/main.c ****     Error_Handler();
 422:Core/Src/main.c ****   }
 423:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 424:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 425:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 426:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 427:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 428:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 429:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 430:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
ARM GAS  /tmp/cc8C2055.s 			page 9


 431:Core/Src/main.c ****   {
 432:Core/Src/main.c ****     Error_Handler();
 433:Core/Src/main.c ****   }
 434:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 435:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 436:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 437:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 438:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 439:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 440:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 441:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 442:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 443:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 444:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 445:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 446:Core/Src/main.c ****   {
 447:Core/Src/main.c ****     Error_Handler();
 448:Core/Src/main.c ****   }
 449:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 450:Core/Src/main.c **** 
 451:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 452:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 453:Core/Src/main.c **** 
 454:Core/Src/main.c **** }
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** /**
 457:Core/Src/main.c ****   * @brief TIM7 Initialization Function
 458:Core/Src/main.c ****   * @param None
 459:Core/Src/main.c ****   * @retval None
 460:Core/Src/main.c ****   */
 461:Core/Src/main.c **** static void MX_TIM7_Init(void)
 462:Core/Src/main.c **** {
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 0 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE END TIM7_Init 0 */
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 1 */
 471:Core/Src/main.c **** 
 472:Core/Src/main.c ****   /* USER CODE END TIM7_Init 1 */
 473:Core/Src/main.c ****   htim7.Instance = TIM7;
 474:Core/Src/main.c ****   htim7.Init.Prescaler = 4000;
 475:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 476:Core/Src/main.c ****   htim7.Init.Period = 1200;
 477:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 478:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 479:Core/Src/main.c ****   {
 480:Core/Src/main.c ****     Error_Handler();
 481:Core/Src/main.c ****   }
 482:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 483:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 484:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 485:Core/Src/main.c ****   {
 486:Core/Src/main.c ****     Error_Handler();
 487:Core/Src/main.c ****   }
ARM GAS  /tmp/cc8C2055.s 			page 10


 488:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 2 */
 489:Core/Src/main.c **** 
 490:Core/Src/main.c ****   /* USER CODE END TIM7_Init 2 */
 491:Core/Src/main.c **** 
 492:Core/Src/main.c **** }
 493:Core/Src/main.c **** 
 494:Core/Src/main.c **** /**
 495:Core/Src/main.c ****   * @brief TIM15 Initialization Function
 496:Core/Src/main.c ****   * @param None
 497:Core/Src/main.c ****   * @retval None
 498:Core/Src/main.c ****   */
 499:Core/Src/main.c **** static void MX_TIM15_Init(void)
 500:Core/Src/main.c **** {
 501:Core/Src/main.c **** 
 502:Core/Src/main.c ****   /* USER CODE BEGIN TIM15_Init 0 */
 503:Core/Src/main.c **** 
 504:Core/Src/main.c ****   /* USER CODE END TIM15_Init 0 */
 505:Core/Src/main.c **** 
 506:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 507:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 508:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 509:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 510:Core/Src/main.c **** 
 511:Core/Src/main.c ****   /* USER CODE BEGIN TIM15_Init 1 */
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****   /* USER CODE END TIM15_Init 1 */
 514:Core/Src/main.c ****   htim15.Instance = TIM15;
 515:Core/Src/main.c ****   htim15.Init.Prescaler = 1099;
 516:Core/Src/main.c ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 517:Core/Src/main.c ****   htim15.Init.Period = 400;
 518:Core/Src/main.c ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 519:Core/Src/main.c ****   htim15.Init.RepetitionCounter = 0;
 520:Core/Src/main.c ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 521:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 522:Core/Src/main.c ****   {
 523:Core/Src/main.c ****     Error_Handler();
 524:Core/Src/main.c ****   }
 525:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 526:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 527:Core/Src/main.c ****   {
 528:Core/Src/main.c ****     Error_Handler();
 529:Core/Src/main.c ****   }
 530:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 531:Core/Src/main.c ****   {
 532:Core/Src/main.c ****     Error_Handler();
 533:Core/Src/main.c ****   }
 534:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 535:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 536:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 537:Core/Src/main.c ****   {
 538:Core/Src/main.c ****     Error_Handler();
 539:Core/Src/main.c ****   }
 540:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 541:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 542:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 543:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 544:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
ARM GAS  /tmp/cc8C2055.s 			page 11


 545:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 546:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 547:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 548:Core/Src/main.c ****   {
 549:Core/Src/main.c ****     Error_Handler();
 550:Core/Src/main.c ****   }
 551:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 552:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 553:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 554:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 555:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 556:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 557:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 558:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 559:Core/Src/main.c ****   {
 560:Core/Src/main.c ****     Error_Handler();
 561:Core/Src/main.c ****   }
 562:Core/Src/main.c ****   /* USER CODE BEGIN TIM15_Init 2 */
 563:Core/Src/main.c **** 
 564:Core/Src/main.c ****   /* USER CODE END TIM15_Init 2 */
 565:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim15);
 566:Core/Src/main.c **** 
 567:Core/Src/main.c **** }
 568:Core/Src/main.c **** 
 569:Core/Src/main.c **** /**
 570:Core/Src/main.c ****   * @brief USART1 Initialization Function
 571:Core/Src/main.c ****   * @param None
 572:Core/Src/main.c ****   * @retval None
 573:Core/Src/main.c ****   */
 574:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 575:Core/Src/main.c **** {
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 578:Core/Src/main.c **** 
 579:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 580:Core/Src/main.c **** 
 581:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 582:Core/Src/main.c **** 
 583:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 584:Core/Src/main.c ****   huart1.Instance = USART1;
 585:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 586:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 587:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 588:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 589:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 590:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 591:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 592:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 593:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 594:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 595:Core/Src/main.c ****   {
 596:Core/Src/main.c ****     Error_Handler();
 597:Core/Src/main.c ****   }
 598:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 599:Core/Src/main.c **** 
 600:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 601:Core/Src/main.c **** 
ARM GAS  /tmp/cc8C2055.s 			page 12


 602:Core/Src/main.c **** }
 603:Core/Src/main.c **** 
 604:Core/Src/main.c **** /**
 605:Core/Src/main.c ****   * @brief USART2 Initialization Function
 606:Core/Src/main.c ****   * @param None
 607:Core/Src/main.c ****   * @retval None
 608:Core/Src/main.c ****   */
 609:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 610:Core/Src/main.c **** {
 611:Core/Src/main.c **** 
 612:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 613:Core/Src/main.c **** 
 614:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 615:Core/Src/main.c **** 
 616:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 617:Core/Src/main.c **** 
 618:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 619:Core/Src/main.c ****   huart2.Instance = USART2;
 620:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 621:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 622:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 623:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 624:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 625:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 626:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 627:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 628:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 629:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 630:Core/Src/main.c ****   {
 631:Core/Src/main.c ****     Error_Handler();
 632:Core/Src/main.c ****   }
 633:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 634:Core/Src/main.c **** 
 635:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 636:Core/Src/main.c **** 
 637:Core/Src/main.c **** }
 638:Core/Src/main.c **** 
 639:Core/Src/main.c **** /**
 640:Core/Src/main.c ****   * @brief USART3 Initialization Function
 641:Core/Src/main.c ****   * @param None
 642:Core/Src/main.c ****   * @retval None
 643:Core/Src/main.c ****   */
 644:Core/Src/main.c **** static void MX_USART3_UART_Init(void)
 645:Core/Src/main.c **** {
 646:Core/Src/main.c **** 
 647:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 0 */
 648:Core/Src/main.c **** 
 649:Core/Src/main.c ****   /* USER CODE END USART3_Init 0 */
 650:Core/Src/main.c **** 
 651:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 1 */
 652:Core/Src/main.c **** 
 653:Core/Src/main.c ****   /* USER CODE END USART3_Init 1 */
 654:Core/Src/main.c ****   huart3.Instance = USART3;
 655:Core/Src/main.c ****   huart3.Init.BaudRate = 115200;
 656:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 657:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 658:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/cc8C2055.s 			page 13


 659:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 660:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 661:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 662:Core/Src/main.c ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 663:Core/Src/main.c ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 664:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 665:Core/Src/main.c ****   {
 666:Core/Src/main.c ****     Error_Handler();
 667:Core/Src/main.c ****   }
 668:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 2 */
 669:Core/Src/main.c **** 
 670:Core/Src/main.c ****   /* USER CODE END USART3_Init 2 */
 671:Core/Src/main.c **** 
 672:Core/Src/main.c **** }
 673:Core/Src/main.c **** 
 674:Core/Src/main.c **** /**
 675:Core/Src/main.c ****   * Enable DMA controller clock
 676:Core/Src/main.c ****   */
 677:Core/Src/main.c **** static void MX_DMA_Init(void)
 678:Core/Src/main.c **** {
 679:Core/Src/main.c **** 
 680:Core/Src/main.c ****   /* DMA controller clock enable */
 681:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 682:Core/Src/main.c **** 
 683:Core/Src/main.c ****   /* DMA interrupt init */
 684:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 685:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 686:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 687:Core/Src/main.c **** 
 688:Core/Src/main.c **** }
 689:Core/Src/main.c **** 
 690:Core/Src/main.c **** /**
 691:Core/Src/main.c ****   * @brief GPIO Initialization Function
 692:Core/Src/main.c ****   * @param None
 693:Core/Src/main.c ****   * @retval None
 694:Core/Src/main.c ****   */
 695:Core/Src/main.c **** static void MX_GPIO_Init(void)
 696:Core/Src/main.c **** {
  28              		.loc 1 696 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 48
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  33              		.cfi_def_cfa_offset 32
  34              		.cfi_offset 4, -32
  35              		.cfi_offset 5, -28
  36              		.cfi_offset 6, -24
  37              		.cfi_offset 7, -20
  38              		.cfi_offset 8, -16
  39              		.cfi_offset 9, -12
  40              		.cfi_offset 10, -8
  41              		.cfi_offset 14, -4
  42 0004 8CB0     		sub	sp, sp, #48
  43              		.cfi_def_cfa_offset 80
 697:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  44              		.loc 1 697 3 view .LVU1
  45              		.loc 1 697 20 is_stmt 0 view .LVU2
ARM GAS  /tmp/cc8C2055.s 			page 14


  46 0006 0024     		movs	r4, #0
  47 0008 0794     		str	r4, [sp, #28]
  48 000a 0894     		str	r4, [sp, #32]
  49 000c 0994     		str	r4, [sp, #36]
  50 000e 0A94     		str	r4, [sp, #40]
  51 0010 0B94     		str	r4, [sp, #44]
 698:Core/Src/main.c **** 
 699:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 700:Core/Src/main.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
  52              		.loc 1 700 3 is_stmt 1 view .LVU3
  53              	.LBB4:
  54              		.loc 1 700 3 view .LVU4
  55              		.loc 1 700 3 view .LVU5
  56 0012 6B4B     		ldr	r3, .L3
  57 0014 DA6C     		ldr	r2, [r3, #76]
  58 0016 42F01002 		orr	r2, r2, #16
  59 001a DA64     		str	r2, [r3, #76]
  60              		.loc 1 700 3 view .LVU6
  61 001c DA6C     		ldr	r2, [r3, #76]
  62 001e 02F01002 		and	r2, r2, #16
  63 0022 0192     		str	r2, [sp, #4]
  64              		.loc 1 700 3 view .LVU7
  65 0024 019A     		ldr	r2, [sp, #4]
  66              	.LBE4:
  67              		.loc 1 700 3 view .LVU8
 701:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  68              		.loc 1 701 3 view .LVU9
  69              	.LBB5:
  70              		.loc 1 701 3 view .LVU10
  71              		.loc 1 701 3 view .LVU11
  72 0026 DA6C     		ldr	r2, [r3, #76]
  73 0028 42F00402 		orr	r2, r2, #4
  74 002c DA64     		str	r2, [r3, #76]
  75              		.loc 1 701 3 view .LVU12
  76 002e DA6C     		ldr	r2, [r3, #76]
  77 0030 02F00402 		and	r2, r2, #4
  78 0034 0292     		str	r2, [sp, #8]
  79              		.loc 1 701 3 view .LVU13
  80 0036 029A     		ldr	r2, [sp, #8]
  81              	.LBE5:
  82              		.loc 1 701 3 view .LVU14
 702:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  83              		.loc 1 702 3 view .LVU15
  84              	.LBB6:
  85              		.loc 1 702 3 view .LVU16
  86              		.loc 1 702 3 view .LVU17
  87 0038 DA6C     		ldr	r2, [r3, #76]
  88 003a 42F08002 		orr	r2, r2, #128
  89 003e DA64     		str	r2, [r3, #76]
  90              		.loc 1 702 3 view .LVU18
  91 0040 DA6C     		ldr	r2, [r3, #76]
  92 0042 02F08002 		and	r2, r2, #128
  93 0046 0392     		str	r2, [sp, #12]
  94              		.loc 1 702 3 view .LVU19
  95 0048 039A     		ldr	r2, [sp, #12]
  96              	.LBE6:
  97              		.loc 1 702 3 view .LVU20
ARM GAS  /tmp/cc8C2055.s 			page 15


 703:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  98              		.loc 1 703 3 view .LVU21
  99              	.LBB7:
 100              		.loc 1 703 3 view .LVU22
 101              		.loc 1 703 3 view .LVU23
 102 004a DA6C     		ldr	r2, [r3, #76]
 103 004c 42F00102 		orr	r2, r2, #1
 104 0050 DA64     		str	r2, [r3, #76]
 105              		.loc 1 703 3 view .LVU24
 106 0052 DA6C     		ldr	r2, [r3, #76]
 107 0054 02F00102 		and	r2, r2, #1
 108 0058 0492     		str	r2, [sp, #16]
 109              		.loc 1 703 3 view .LVU25
 110 005a 049A     		ldr	r2, [sp, #16]
 111              	.LBE7:
 112              		.loc 1 703 3 view .LVU26
 704:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 113              		.loc 1 704 3 view .LVU27
 114              	.LBB8:
 115              		.loc 1 704 3 view .LVU28
 116              		.loc 1 704 3 view .LVU29
 117 005c DA6C     		ldr	r2, [r3, #76]
 118 005e 42F00202 		orr	r2, r2, #2
 119 0062 DA64     		str	r2, [r3, #76]
 120              		.loc 1 704 3 view .LVU30
 121 0064 DA6C     		ldr	r2, [r3, #76]
 122 0066 02F00202 		and	r2, r2, #2
 123 006a 0592     		str	r2, [sp, #20]
 124              		.loc 1 704 3 view .LVU31
 125 006c 059A     		ldr	r2, [sp, #20]
 126              	.LBE8:
 127              		.loc 1 704 3 view .LVU32
 705:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 128              		.loc 1 705 3 view .LVU33
 129              	.LBB9:
 130              		.loc 1 705 3 view .LVU34
 131              		.loc 1 705 3 view .LVU35
 132 006e DA6C     		ldr	r2, [r3, #76]
 133 0070 42F00802 		orr	r2, r2, #8
 134 0074 DA64     		str	r2, [r3, #76]
 135              		.loc 1 705 3 view .LVU36
 136 0076 DB6C     		ldr	r3, [r3, #76]
 137 0078 03F00803 		and	r3, r3, #8
 138 007c 0693     		str	r3, [sp, #24]
 139              		.loc 1 705 3 view .LVU37
 140 007e 069B     		ldr	r3, [sp, #24]
 141              	.LBE9:
 142              		.loc 1 705 3 view .LVU38
 706:Core/Src/main.c **** 
 707:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 708:Core/Src/main.c ****   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 143              		.loc 1 708 3 view .LVU39
 144 0080 2246     		mov	r2, r4
 145 0082 0221     		movs	r1, #2
 146 0084 4FF09040 		mov	r0, #1207959552
 147 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 148              	.LVL0:
ARM GAS  /tmp/cc8C2055.s 			page 16


 709:Core/Src/main.c **** 
 710:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 711:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, PO0_Pin|SW2_Pin, GPIO_PIN_RESET);
 149              		.loc 1 711 3 view .LVU40
 150 008c DFF83C91 		ldr	r9, .L3+12
 151 0090 2246     		mov	r2, r4
 152 0092 6021     		movs	r1, #96
 153 0094 4846     		mov	r0, r9
 154 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 155              	.LVL1:
 712:Core/Src/main.c **** 
 713:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 714:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, PO1_Pin|PO2_Pin|DIR3_Pin|D4_Pin
 156              		.loc 1 714 3 view .LVU41
 157 009a 4A4F     		ldr	r7, .L3+4
 158 009c 2246     		mov	r2, r4
 159 009e 41F2C531 		movw	r1, #5061
 160 00a2 3846     		mov	r0, r7
 161 00a4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 162              	.LVL2:
 715:Core/Src/main.c ****                           |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 716:Core/Src/main.c **** 
 717:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 718:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOE, PO3_Pin|O0_Pin|O1_Pin|O2_Pin
 163              		.loc 1 718 3 view .LVU42
 164 00a8 DFF82481 		ldr	r8, .L3+16
 165 00ac 2246     		mov	r2, r4
 166 00ae 4FF68371 		movw	r1, #65411
 167 00b2 4046     		mov	r0, r8
 168 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 169              	.LVL3:
 719:Core/Src/main.c ****                           |O3_Pin|O4_Pin|O5_Pin|O6_Pin
 720:Core/Src/main.c ****                           |O7_Pin|EN_Pin|RS_Pin, GPIO_PIN_RESET);
 721:Core/Src/main.c **** 
 722:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 723:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOD, O10_Pin|O11_Pin|O12_Pin|O13_Pin
 170              		.loc 1 723 3 view .LVU43
 171 00b8 434E     		ldr	r6, .L3+8
 172 00ba 2246     		mov	r2, r4
 173 00bc 4FF47C51 		mov	r1, #16128
 174 00c0 3046     		mov	r0, r6
 175 00c2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 176              	.LVL4:
 724:Core/Src/main.c ****                           |O14_Pin|O15_Pin, GPIO_PIN_RESET);
 725:Core/Src/main.c **** 
 726:Core/Src/main.c ****   /*Configure GPIO pins : PB7_Pin PB6_Pin PB5_Pin PB4_Pin
 727:Core/Src/main.c ****                            PB3_Pin */
 728:Core/Src/main.c ****   GPIO_InitStruct.Pin = PB7_Pin|PB6_Pin|PB5_Pin|PB4_Pin
 177              		.loc 1 728 3 view .LVU44
 178              		.loc 1 728 23 is_stmt 0 view .LVU45
 179 00c6 7C23     		movs	r3, #124
 180 00c8 0793     		str	r3, [sp, #28]
 729:Core/Src/main.c ****                           |PB3_Pin;
 730:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 181              		.loc 1 730 3 is_stmt 1 view .LVU46
 182              		.loc 1 730 24 is_stmt 0 view .LVU47
 183 00ca 0894     		str	r4, [sp, #32]
ARM GAS  /tmp/cc8C2055.s 			page 17


 731:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 184              		.loc 1 731 3 is_stmt 1 view .LVU48
 185              		.loc 1 731 24 is_stmt 0 view .LVU49
 186 00cc 0994     		str	r4, [sp, #36]
 732:Core/Src/main.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 187              		.loc 1 732 3 is_stmt 1 view .LVU50
 188 00ce 07A9     		add	r1, sp, #28
 189 00d0 4046     		mov	r0, r8
 190 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 191              	.LVL5:
 733:Core/Src/main.c **** 
 734:Core/Src/main.c ****   /*Configure GPIO pins : PB2_Pin PB1_Pin PB0_Pin */
 735:Core/Src/main.c ****   GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin|PB0_Pin;
 192              		.loc 1 735 3 view .LVU51
 193              		.loc 1 735 23 is_stmt 0 view .LVU52
 194 00d6 4FF46043 		mov	r3, #57344
 195 00da 0793     		str	r3, [sp, #28]
 736:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 196              		.loc 1 736 3 is_stmt 1 view .LVU53
 197              		.loc 1 736 24 is_stmt 0 view .LVU54
 198 00dc 0894     		str	r4, [sp, #32]
 737:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 199              		.loc 1 737 3 is_stmt 1 view .LVU55
 200              		.loc 1 737 24 is_stmt 0 view .LVU56
 201 00de 0994     		str	r4, [sp, #36]
 738:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 202              		.loc 1 738 3 is_stmt 1 view .LVU57
 203 00e0 07A9     		add	r1, sp, #28
 204 00e2 4846     		mov	r0, r9
 205 00e4 FFF7FEFF 		bl	HAL_GPIO_Init
 206              	.LVL6:
 739:Core/Src/main.c **** 
 740:Core/Src/main.c ****   /*Configure GPIO pin : DIR2_Pin */
 741:Core/Src/main.c ****   GPIO_InitStruct.Pin = DIR2_Pin;
 207              		.loc 1 741 3 view .LVU58
 208              		.loc 1 741 23 is_stmt 0 view .LVU59
 209 00e8 0223     		movs	r3, #2
 210 00ea 0793     		str	r3, [sp, #28]
 742:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 211              		.loc 1 742 3 is_stmt 1 view .LVU60
 212              		.loc 1 742 24 is_stmt 0 view .LVU61
 213 00ec 0125     		movs	r5, #1
 214 00ee 0895     		str	r5, [sp, #32]
 743:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 215              		.loc 1 743 3 is_stmt 1 view .LVU62
 216              		.loc 1 743 24 is_stmt 0 view .LVU63
 217 00f0 0994     		str	r4, [sp, #36]
 744:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 218              		.loc 1 744 3 is_stmt 1 view .LVU64
 219              		.loc 1 744 25 is_stmt 0 view .LVU65
 220 00f2 0A94     		str	r4, [sp, #40]
 745:Core/Src/main.c ****   HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 221              		.loc 1 745 3 is_stmt 1 view .LVU66
 222 00f4 07A9     		add	r1, sp, #28
 223 00f6 4FF09040 		mov	r0, #1207959552
 224 00fa FFF7FEFF 		bl	HAL_GPIO_Init
 225              	.LVL7:
ARM GAS  /tmp/cc8C2055.s 			page 18


 746:Core/Src/main.c **** 
 747:Core/Src/main.c ****   /*Configure GPIO pin : SWSTOP_Pin */
 748:Core/Src/main.c ****   GPIO_InitStruct.Pin = SWSTOP_Pin;
 226              		.loc 1 748 3 view .LVU67
 227              		.loc 1 748 23 is_stmt 0 view .LVU68
 228 00fe 4023     		movs	r3, #64
 229 0100 0793     		str	r3, [sp, #28]
 749:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 230              		.loc 1 749 3 is_stmt 1 view .LVU69
 231              		.loc 1 749 24 is_stmt 0 view .LVU70
 232 0102 4FF4881A 		mov	r10, #1114112
 233 0106 CDF820A0 		str	r10, [sp, #32]
 750:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 234              		.loc 1 750 3 is_stmt 1 view .LVU71
 235              		.loc 1 750 24 is_stmt 0 view .LVU72
 236 010a 0994     		str	r4, [sp, #36]
 751:Core/Src/main.c ****   HAL_GPIO_Init(SWSTOP_GPIO_Port, &GPIO_InitStruct);
 237              		.loc 1 751 3 is_stmt 1 view .LVU73
 238 010c 07A9     		add	r1, sp, #28
 239 010e 4FF09040 		mov	r0, #1207959552
 240 0112 FFF7FEFF 		bl	HAL_GPIO_Init
 241              	.LVL8:
 752:Core/Src/main.c **** 
 753:Core/Src/main.c ****   /*Configure GPIO pins : PO0_Pin SW2_Pin */
 754:Core/Src/main.c ****   GPIO_InitStruct.Pin = PO0_Pin|SW2_Pin;
 242              		.loc 1 754 3 view .LVU74
 243              		.loc 1 754 23 is_stmt 0 view .LVU75
 244 0116 6023     		movs	r3, #96
 245 0118 0793     		str	r3, [sp, #28]
 755:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 246              		.loc 1 755 3 is_stmt 1 view .LVU76
 247              		.loc 1 755 24 is_stmt 0 view .LVU77
 248 011a 0895     		str	r5, [sp, #32]
 756:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 249              		.loc 1 756 3 is_stmt 1 view .LVU78
 250              		.loc 1 756 24 is_stmt 0 view .LVU79
 251 011c 0994     		str	r4, [sp, #36]
 757:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 252              		.loc 1 757 3 is_stmt 1 view .LVU80
 253              		.loc 1 757 25 is_stmt 0 view .LVU81
 254 011e 0A94     		str	r4, [sp, #40]
 758:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 255              		.loc 1 758 3 is_stmt 1 view .LVU82
 256 0120 07A9     		add	r1, sp, #28
 257 0122 4846     		mov	r0, r9
 258 0124 FFF7FEFF 		bl	HAL_GPIO_Init
 259              	.LVL9:
 759:Core/Src/main.c **** 
 760:Core/Src/main.c ****   /*Configure GPIO pins : PO1_Pin PO2_Pin DIR3_Pin D4_Pin
 761:Core/Src/main.c ****                            D5_Pin D6_Pin D7_Pin */
 762:Core/Src/main.c ****   GPIO_InitStruct.Pin = PO1_Pin|PO2_Pin|DIR3_Pin|D4_Pin
 260              		.loc 1 762 3 view .LVU83
 261              		.loc 1 762 23 is_stmt 0 view .LVU84
 262 0128 41F2C533 		movw	r3, #5061
 263 012c 0793     		str	r3, [sp, #28]
 763:Core/Src/main.c ****                           |D5_Pin|D6_Pin|D7_Pin;
 764:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
ARM GAS  /tmp/cc8C2055.s 			page 19


 264              		.loc 1 764 3 is_stmt 1 view .LVU85
 265              		.loc 1 764 24 is_stmt 0 view .LVU86
 266 012e 0895     		str	r5, [sp, #32]
 765:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 267              		.loc 1 765 3 is_stmt 1 view .LVU87
 268              		.loc 1 765 24 is_stmt 0 view .LVU88
 269 0130 0994     		str	r4, [sp, #36]
 766:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 270              		.loc 1 766 3 is_stmt 1 view .LVU89
 271              		.loc 1 766 25 is_stmt 0 view .LVU90
 272 0132 0A94     		str	r4, [sp, #40]
 767:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 273              		.loc 1 767 3 is_stmt 1 view .LVU91
 274 0134 07A9     		add	r1, sp, #28
 275 0136 3846     		mov	r0, r7
 276 0138 FFF7FEFF 		bl	HAL_GPIO_Init
 277              	.LVL10:
 768:Core/Src/main.c **** 
 769:Core/Src/main.c ****   /*Configure GPIO pins : PO3_Pin O0_Pin O1_Pin O2_Pin
 770:Core/Src/main.c ****                            O3_Pin O4_Pin O5_Pin O6_Pin
 771:Core/Src/main.c ****                            O7_Pin EN_Pin RS_Pin */
 772:Core/Src/main.c ****   GPIO_InitStruct.Pin = PO3_Pin|O0_Pin|O1_Pin|O2_Pin
 278              		.loc 1 772 3 view .LVU92
 279              		.loc 1 772 23 is_stmt 0 view .LVU93
 280 013c 4FF68373 		movw	r3, #65411
 281 0140 0793     		str	r3, [sp, #28]
 773:Core/Src/main.c ****                           |O3_Pin|O4_Pin|O5_Pin|O6_Pin
 774:Core/Src/main.c ****                           |O7_Pin|EN_Pin|RS_Pin;
 775:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 282              		.loc 1 775 3 is_stmt 1 view .LVU94
 283              		.loc 1 775 24 is_stmt 0 view .LVU95
 284 0142 0895     		str	r5, [sp, #32]
 776:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 285              		.loc 1 776 3 is_stmt 1 view .LVU96
 286              		.loc 1 776 24 is_stmt 0 view .LVU97
 287 0144 0994     		str	r4, [sp, #36]
 777:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 288              		.loc 1 777 3 is_stmt 1 view .LVU98
 289              		.loc 1 777 25 is_stmt 0 view .LVU99
 290 0146 0A94     		str	r4, [sp, #40]
 778:Core/Src/main.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 291              		.loc 1 778 3 is_stmt 1 view .LVU100
 292 0148 07A9     		add	r1, sp, #28
 293 014a 4046     		mov	r0, r8
 294 014c FFF7FEFF 		bl	HAL_GPIO_Init
 295              	.LVL11:
 779:Core/Src/main.c **** 
 780:Core/Src/main.c ****   /*Configure GPIO pins : O10_Pin O11_Pin O12_Pin O13_Pin
 781:Core/Src/main.c ****                            O14_Pin O15_Pin */
 782:Core/Src/main.c ****   GPIO_InitStruct.Pin = O10_Pin|O11_Pin|O12_Pin|O13_Pin
 296              		.loc 1 782 3 view .LVU101
 297              		.loc 1 782 23 is_stmt 0 view .LVU102
 298 0150 4FF47C53 		mov	r3, #16128
 299 0154 0793     		str	r3, [sp, #28]
 783:Core/Src/main.c ****                           |O14_Pin|O15_Pin;
 784:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 300              		.loc 1 784 3 is_stmt 1 view .LVU103
ARM GAS  /tmp/cc8C2055.s 			page 20


 301              		.loc 1 784 24 is_stmt 0 view .LVU104
 302 0156 0895     		str	r5, [sp, #32]
 785:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 303              		.loc 1 785 3 is_stmt 1 view .LVU105
 304              		.loc 1 785 24 is_stmt 0 view .LVU106
 305 0158 0994     		str	r4, [sp, #36]
 786:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 306              		.loc 1 786 3 is_stmt 1 view .LVU107
 307              		.loc 1 786 25 is_stmt 0 view .LVU108
 308 015a 0A94     		str	r4, [sp, #40]
 787:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 309              		.loc 1 787 3 is_stmt 1 view .LVU109
 310 015c 07A9     		add	r1, sp, #28
 311 015e 3046     		mov	r0, r6
 312 0160 FFF7FEFF 		bl	HAL_GPIO_Init
 313              	.LVL12:
 788:Core/Src/main.c **** 
 789:Core/Src/main.c ****   /*Configure GPIO pins : SW0_Pin SW1_Pin */
 790:Core/Src/main.c ****   GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin;
 314              		.loc 1 790 3 view .LVU110
 315              		.loc 1 790 23 is_stmt 0 view .LVU111
 316 0164 4FF44043 		mov	r3, #49152
 317 0168 0793     		str	r3, [sp, #28]
 791:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 318              		.loc 1 791 3 is_stmt 1 view .LVU112
 319              		.loc 1 791 24 is_stmt 0 view .LVU113
 320 016a CDF820A0 		str	r10, [sp, #32]
 792:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 321              		.loc 1 792 3 is_stmt 1 view .LVU114
 322              		.loc 1 792 24 is_stmt 0 view .LVU115
 323 016e 0994     		str	r4, [sp, #36]
 793:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 324              		.loc 1 793 3 is_stmt 1 view .LVU116
 325 0170 07A9     		add	r1, sp, #28
 326 0172 3046     		mov	r0, r6
 327 0174 FFF7FEFF 		bl	HAL_GPIO_Init
 328              	.LVL13:
 794:Core/Src/main.c **** 
 795:Core/Src/main.c ****   /*Configure GPIO pins : I0_Pin I1_Pin I2_Pin I3_Pin
 796:Core/Src/main.c ****                            I4_Pin I5_Pin I6_Pin */
 797:Core/Src/main.c ****   GPIO_InitStruct.Pin = I0_Pin|I1_Pin|I2_Pin|I3_Pin
 329              		.loc 1 797 3 view .LVU117
 330              		.loc 1 797 23 is_stmt 0 view .LVU118
 331 0178 FB23     		movs	r3, #251
 332 017a 0793     		str	r3, [sp, #28]
 798:Core/Src/main.c ****                           |I4_Pin|I5_Pin|I6_Pin;
 799:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 333              		.loc 1 799 3 is_stmt 1 view .LVU119
 334              		.loc 1 799 24 is_stmt 0 view .LVU120
 335 017c 0894     		str	r4, [sp, #32]
 800:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 336              		.loc 1 800 3 is_stmt 1 view .LVU121
 337              		.loc 1 800 24 is_stmt 0 view .LVU122
 338 017e 0994     		str	r4, [sp, #36]
 801:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 339              		.loc 1 801 3 is_stmt 1 view .LVU123
 340 0180 07A9     		add	r1, sp, #28
ARM GAS  /tmp/cc8C2055.s 			page 21


 341 0182 3046     		mov	r0, r6
 342 0184 FFF7FEFF 		bl	HAL_GPIO_Init
 343              	.LVL14:
 802:Core/Src/main.c **** 
 803:Core/Src/main.c ****   /*Configure GPIO pin : I7_Pin */
 804:Core/Src/main.c ****   GPIO_InitStruct.Pin = I7_Pin;
 344              		.loc 1 804 3 view .LVU124
 345              		.loc 1 804 23 is_stmt 0 view .LVU125
 346 0188 0823     		movs	r3, #8
 347 018a 0793     		str	r3, [sp, #28]
 805:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 348              		.loc 1 805 3 is_stmt 1 view .LVU126
 349              		.loc 1 805 24 is_stmt 0 view .LVU127
 350 018c 0894     		str	r4, [sp, #32]
 806:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 351              		.loc 1 806 3 is_stmt 1 view .LVU128
 352              		.loc 1 806 24 is_stmt 0 view .LVU129
 353 018e 0994     		str	r4, [sp, #36]
 807:Core/Src/main.c ****   HAL_GPIO_Init(I7_GPIO_Port, &GPIO_InitStruct);
 354              		.loc 1 807 3 is_stmt 1 view .LVU130
 355 0190 07A9     		add	r1, sp, #28
 356 0192 3846     		mov	r0, r7
 357 0194 FFF7FEFF 		bl	HAL_GPIO_Init
 358              	.LVL15:
 808:Core/Src/main.c **** 
 809:Core/Src/main.c ****   /* EXTI interrupt init*/
 810:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 359              		.loc 1 810 3 view .LVU131
 360 0198 2246     		mov	r2, r4
 361 019a 0F21     		movs	r1, #15
 362 019c 1720     		movs	r0, #23
 363 019e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 364              	.LVL16:
 811:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 365              		.loc 1 811 3 view .LVU132
 366 01a2 1720     		movs	r0, #23
 367 01a4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 368              	.LVL17:
 812:Core/Src/main.c **** 
 813:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
 369              		.loc 1 813 3 view .LVU133
 370 01a8 2246     		mov	r2, r4
 371 01aa 0E21     		movs	r1, #14
 372 01ac 2820     		movs	r0, #40
 373 01ae FFF7FEFF 		bl	HAL_NVIC_SetPriority
 374              	.LVL18:
 814:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 375              		.loc 1 814 3 view .LVU134
 376 01b2 2820     		movs	r0, #40
 377 01b4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 378              	.LVL19:
 815:Core/Src/main.c **** 
 816:Core/Src/main.c **** }
 379              		.loc 1 816 1 is_stmt 0 view .LVU135
 380 01b8 0CB0     		add	sp, sp, #48
 381              		.cfi_def_cfa_offset 32
 382              		@ sp needed
ARM GAS  /tmp/cc8C2055.s 			page 22


 383 01ba BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 384              	.L4:
 385 01be 00BF     		.align	2
 386              	.L3:
 387 01c0 00100240 		.word	1073876992
 388 01c4 00040048 		.word	1207960576
 389 01c8 000C0048 		.word	1207962624
 390 01cc 00080048 		.word	1207961600
 391 01d0 00100048 		.word	1207963648
 392              		.cfi_endproc
 393              	.LFE302:
 395              		.section	.text.MX_DMA_Init,"ax",%progbits
 396              		.align	1
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 401              	MX_DMA_Init:
 402              	.LFB301:
 678:Core/Src/main.c **** 
 403              		.loc 1 678 1 is_stmt 1 view -0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 8
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407 0000 00B5     		push	{lr}
 408              		.cfi_def_cfa_offset 4
 409              		.cfi_offset 14, -4
 410 0002 83B0     		sub	sp, sp, #12
 411              		.cfi_def_cfa_offset 16
 681:Core/Src/main.c **** 
 412              		.loc 1 681 3 view .LVU137
 413              	.LBB10:
 681:Core/Src/main.c **** 
 414              		.loc 1 681 3 view .LVU138
 681:Core/Src/main.c **** 
 415              		.loc 1 681 3 view .LVU139
 416 0004 0A4B     		ldr	r3, .L7
 417 0006 9A6C     		ldr	r2, [r3, #72]
 418 0008 42F00102 		orr	r2, r2, #1
 419 000c 9A64     		str	r2, [r3, #72]
 681:Core/Src/main.c **** 
 420              		.loc 1 681 3 view .LVU140
 421 000e 9B6C     		ldr	r3, [r3, #72]
 422 0010 03F00103 		and	r3, r3, #1
 423 0014 0193     		str	r3, [sp, #4]
 681:Core/Src/main.c **** 
 424              		.loc 1 681 3 view .LVU141
 425 0016 019B     		ldr	r3, [sp, #4]
 426              	.LBE10:
 681:Core/Src/main.c **** 
 427              		.loc 1 681 3 view .LVU142
 685:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 428              		.loc 1 685 3 view .LVU143
 429 0018 0022     		movs	r2, #0
 430 001a 0321     		movs	r1, #3
 431 001c 0F20     		movs	r0, #15
 432 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 433              	.LVL20:
ARM GAS  /tmp/cc8C2055.s 			page 23


 686:Core/Src/main.c **** 
 434              		.loc 1 686 3 view .LVU144
 435 0022 0F20     		movs	r0, #15
 436 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 437              	.LVL21:
 688:Core/Src/main.c **** 
 438              		.loc 1 688 1 is_stmt 0 view .LVU145
 439 0028 03B0     		add	sp, sp, #12
 440              		.cfi_def_cfa_offset 4
 441              		@ sp needed
 442 002a 5DF804FB 		ldr	pc, [sp], #4
 443              	.L8:
 444 002e 00BF     		.align	2
 445              	.L7:
 446 0030 00100240 		.word	1073876992
 447              		.cfi_endproc
 448              	.LFE301:
 450              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 451              		.align	1
 452              		.global	HAL_UART_RxCpltCallback
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 457              	HAL_UART_RxCpltCallback:
 458              	.LVL22:
 459              	.LFB303:
 817:Core/Src/main.c **** 
 818:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 819:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 460              		.loc 1 819 56 is_stmt 1 view -0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              		.loc 1 819 56 is_stmt 0 view .LVU147
 465 0000 10B5     		push	{r4, lr}
 466              		.cfi_def_cfa_offset 8
 467              		.cfi_offset 4, -8
 468              		.cfi_offset 14, -4
 820:Core/Src/main.c ****   ReadGcodeDMA(huart, UART1_rxBuffer, &hmi_info);
 469              		.loc 1 820 3 is_stmt 1 view .LVU148
 470 0002 054C     		ldr	r4, .L11
 471 0004 054A     		ldr	r2, .L11+4
 472 0006 2146     		mov	r1, r4
 473 0008 FFF7FEFF 		bl	ReadGcodeDMA
 474              	.LVL23:
 821:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 11);
 475              		.loc 1 821 3 view .LVU149
 476 000c 0B22     		movs	r2, #11
 477 000e 2146     		mov	r1, r4
 478 0010 0348     		ldr	r0, .L11+8
 479 0012 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 480              	.LVL24:
 822:Core/Src/main.c **** }
 481              		.loc 1 822 1 is_stmt 0 view .LVU150
 482 0016 10BD     		pop	{r4, pc}
 483              	.L12:
 484              		.align	2
ARM GAS  /tmp/cc8C2055.s 			page 24


 485              	.L11:
 486 0018 00000000 		.word	.LANCHOR1
 487 001c 00000000 		.word	.LANCHOR0
 488 0020 00000000 		.word	.LANCHOR2
 489              		.cfi_endproc
 490              	.LFE303:
 492              		.section	.text.TIM1_CC_IRQHandler,"ax",%progbits
 493              		.align	1
 494              		.global	TIM1_CC_IRQHandler
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 499              	TIM1_CC_IRQHandler:
 500              	.LFB304:
 823:Core/Src/main.c **** 
 824:Core/Src/main.c **** void TIM1_CC_IRQHandler(void)
 825:Core/Src/main.c **** {
 501              		.loc 1 825 1 is_stmt 1 view -0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505 0000 08B5     		push	{r3, lr}
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 3, -8
 508              		.cfi_offset 14, -4
 826:Core/Src/main.c ****   htim1.Instance->SR = 0x00000000U;
 509              		.loc 1 826 3 view .LVU152
 510              		.loc 1 826 8 is_stmt 0 view .LVU153
 511 0002 044B     		ldr	r3, .L15
 512 0004 1B68     		ldr	r3, [r3]
 513              		.loc 1 826 22 view .LVU154
 514 0006 0022     		movs	r2, #0
 515 0008 1A61     		str	r2, [r3, #16]
 827:Core/Src/main.c ****   CNC_TIM_Callback_Y(&hmi_info);
 516              		.loc 1 827 3 is_stmt 1 view .LVU155
 517 000a 0348     		ldr	r0, .L15+4
 518 000c FFF7FEFF 		bl	CNC_TIM_Callback_Y
 519              	.LVL25:
 828:Core/Src/main.c **** }
 520              		.loc 1 828 1 is_stmt 0 view .LVU156
 521 0010 08BD     		pop	{r3, pc}
 522              	.L16:
 523 0012 00BF     		.align	2
 524              	.L15:
 525 0014 00000000 		.word	.LANCHOR3
 526 0018 00000000 		.word	.LANCHOR0
 527              		.cfi_endproc
 528              	.LFE304:
 530              		.section	.text.TIM1_BRK_TIM15_IRQHandler,"ax",%progbits
 531              		.align	1
 532              		.global	TIM1_BRK_TIM15_IRQHandler
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 537              	TIM1_BRK_TIM15_IRQHandler:
 538              	.LFB305:
 829:Core/Src/main.c **** 
ARM GAS  /tmp/cc8C2055.s 			page 25


 830:Core/Src/main.c **** void TIM1_BRK_TIM15_IRQHandler(void)
 831:Core/Src/main.c **** {
 539              		.loc 1 831 1 is_stmt 1 view -0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543 0000 08B5     		push	{r3, lr}
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 3, -8
 546              		.cfi_offset 14, -4
 832:Core/Src/main.c ****   htim15.Instance->SR = 0x00000000U;
 547              		.loc 1 832 3 view .LVU158
 548              		.loc 1 832 9 is_stmt 0 view .LVU159
 549 0002 044B     		ldr	r3, .L19
 550 0004 1B68     		ldr	r3, [r3]
 551              		.loc 1 832 23 view .LVU160
 552 0006 0022     		movs	r2, #0
 553 0008 1A61     		str	r2, [r3, #16]
 833:Core/Src/main.c ****   CNC_TIM_Callback_X(&hmi_info);
 554              		.loc 1 833 3 is_stmt 1 view .LVU161
 555 000a 0348     		ldr	r0, .L19+4
 556 000c FFF7FEFF 		bl	CNC_TIM_Callback_X
 557              	.LVL26:
 834:Core/Src/main.c **** }
 558              		.loc 1 834 1 is_stmt 0 view .LVU162
 559 0010 08BD     		pop	{r3, pc}
 560              	.L20:
 561 0012 00BF     		.align	2
 562              	.L19:
 563 0014 00000000 		.word	.LANCHOR4
 564 0018 00000000 		.word	.LANCHOR0
 565              		.cfi_endproc
 566              	.LFE305:
 568              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 569              		.align	1
 570              		.global	TIM7_IRQHandler
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 575              	TIM7_IRQHandler:
 576              	.LFB306:
 835:Core/Src/main.c **** 
 836:Core/Src/main.c **** void TIM7_IRQHandler(void)
 837:Core/Src/main.c **** {
 577              		.loc 1 837 1 is_stmt 1 view -0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 0
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581              		@ link register save eliminated.
 838:Core/Src/main.c ****   htim7.Instance->SR = 0x00000000U;
 582              		.loc 1 838 3 view .LVU164
 583              		.loc 1 838 8 is_stmt 0 view .LVU165
 584 0000 044B     		ldr	r3, .L22
 585 0002 1B68     		ldr	r3, [r3]
 586              		.loc 1 838 22 view .LVU166
 587 0004 0022     		movs	r2, #0
 588 0006 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/cc8C2055.s 			page 26


 839:Core/Src/main.c ****   hmi_info.HMIupdate = true;
 589              		.loc 1 839 3 is_stmt 1 view .LVU167
 590              		.loc 1 839 22 is_stmt 0 view .LVU168
 591 0008 034B     		ldr	r3, .L22+4
 592 000a 0122     		movs	r2, #1
 593 000c 83F83620 		strb	r2, [r3, #54]
 840:Core/Src/main.c **** }
 594              		.loc 1 840 1 view .LVU169
 595 0010 7047     		bx	lr
 596              	.L23:
 597 0012 00BF     		.align	2
 598              	.L22:
 599 0014 00000000 		.word	.LANCHOR5
 600 0018 00000000 		.word	.LANCHOR0
 601              		.cfi_endproc
 602              	.LFE306:
 604              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 605              		.align	1
 606              		.global	HAL_GPIO_EXTI_Callback
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 611              	HAL_GPIO_EXTI_Callback:
 612              	.LVL27:
 613              	.LFB307:
 841:Core/Src/main.c **** 
 842:Core/Src/main.c **** 
 843:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 844:Core/Src/main.c **** {
 614              		.loc 1 844 1 is_stmt 1 view -0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              		.loc 1 844 1 is_stmt 0 view .LVU171
 619 0000 10B5     		push	{r4, lr}
 620              		.cfi_def_cfa_offset 8
 621              		.cfi_offset 4, -8
 622              		.cfi_offset 14, -4
 623 0002 0446     		mov	r4, r0
 845:Core/Src/main.c ****   //STOP pressed halt motors and go to STOP mode
 846:Core/Src/main.c ****   if(GPIO_Pin == SWSTOP_Pin) {
 624              		.loc 1 846 3 is_stmt 1 view .LVU172
 625              		.loc 1 846 5 is_stmt 0 view .LVU173
 626 0004 4028     		cmp	r0, #64
 627 0006 06D0     		beq	.L29
 628              	.LVL28:
 629              	.L25:
 847:Core/Src/main.c ****     CNC_Stop(&hmi_info);
 848:Core/Src/main.c ****   }
 849:Core/Src/main.c **** 
 850:Core/Src/main.c ****   if(GPIO_Pin == limitX_Pin) {
 630              		.loc 1 850 3 is_stmt 1 view .LVU174
 631              		.loc 1 850 5 is_stmt 0 view .LVU175
 632 0008 B4F5804F 		cmp	r4, #16384
 633 000c 07D0     		beq	.L30
 634              	.L26:
 851:Core/Src/main.c ****     CNC_Limit_X(&hmi_info);
ARM GAS  /tmp/cc8C2055.s 			page 27


 852:Core/Src/main.c ****   }
 853:Core/Src/main.c **** 
 854:Core/Src/main.c ****   if(GPIO_Pin == limitY_Pin) {
 635              		.loc 1 854 3 is_stmt 1 view .LVU176
 636              		.loc 1 854 5 is_stmt 0 view .LVU177
 637 000e B4F5004F 		cmp	r4, #32768
 638 0012 08D0     		beq	.L31
 639              	.L24:
 855:Core/Src/main.c ****     CNC_Limit_Y(&hmi_info);
 856:Core/Src/main.c ****   }
 857:Core/Src/main.c **** }
 640              		.loc 1 857 1 view .LVU178
 641 0014 10BD     		pop	{r4, pc}
 642              	.LVL29:
 643              	.L29:
 847:Core/Src/main.c ****   }
 644              		.loc 1 847 5 is_stmt 1 view .LVU179
 645 0016 0648     		ldr	r0, .L32
 646              	.LVL30:
 847:Core/Src/main.c ****   }
 647              		.loc 1 847 5 is_stmt 0 view .LVU180
 648 0018 FFF7FEFF 		bl	CNC_Stop
 649              	.LVL31:
 650 001c F4E7     		b	.L25
 651              	.L30:
 851:Core/Src/main.c ****     CNC_Limit_X(&hmi_info);
 652              		.loc 1 851 5 is_stmt 1 view .LVU181
 653 001e 0448     		ldr	r0, .L32
 654 0020 FFF7FEFF 		bl	CNC_Limit_X
 655              	.LVL32:
 656 0024 F3E7     		b	.L26
 657              	.L31:
 855:Core/Src/main.c ****     CNC_Limit_Y(&hmi_info);
 658              		.loc 1 855 5 view .LVU182
 659 0026 0248     		ldr	r0, .L32
 660 0028 FFF7FEFF 		bl	CNC_Limit_Y
 661              	.LVL33:
 662              		.loc 1 857 1 is_stmt 0 view .LVU183
 663 002c F2E7     		b	.L24
 664              	.L33:
 665 002e 00BF     		.align	2
 666              	.L32:
 667 0030 00000000 		.word	.LANCHOR0
 668              		.cfi_endproc
 669              	.LFE307:
 671              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 672              		.align	2
 673              	.LC0:
 674 0000 71756920 		.ascii	"qui si \303\250\012rotto tutto\000"
 674      736920C3 
 674      A80A726F 
 674      74746F20 
 674      74757474 
 675              		.section	.text.Error_Handler,"ax",%progbits
 676              		.align	1
 677              		.global	Error_Handler
 678              		.syntax unified
ARM GAS  /tmp/cc8C2055.s 			page 28


 679              		.thumb
 680              		.thumb_func
 682              	Error_Handler:
 683              	.LFB308:
 858:Core/Src/main.c **** /* USER CODE END 4 */
 859:Core/Src/main.c **** 
 860:Core/Src/main.c **** /**
 861:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 862:Core/Src/main.c ****   * @retval None
 863:Core/Src/main.c ****   */
 864:Core/Src/main.c **** void Error_Handler(void)
 865:Core/Src/main.c **** {
 684              		.loc 1 865 1 is_stmt 1 view -0
 685              		.cfi_startproc
 686              		@ Volatile: function does not return.
 687              		@ args = 0, pretend = 0, frame = 24
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 689 0000 00B5     		push	{lr}
 690              		.cfi_def_cfa_offset 4
 691              		.cfi_offset 14, -4
 692 0002 87B0     		sub	sp, sp, #28
 693              		.cfi_def_cfa_offset 32
 866:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 867:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 868:Core/Src/main.c ****   __disable_irq();
 694              		.loc 1 868 3 view .LVU185
 695              	.LBB11:
 696              	.LBI11:
 697              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
ARM GAS  /tmp/cc8C2055.s 			page 29


  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc8C2055.s 			page 30


  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
ARM GAS  /tmp/cc8C2055.s 			page 31


 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc8C2055.s 			page 32


 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 698              		.loc 2 207 27 view .LVU186
 699              	.LBB12:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 700              		.loc 2 209 3 view .LVU187
 701              		.syntax unified
 702              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 703 0004 72B6     		cpsid i
 704              	@ 0 "" 2
 705              		.thumb
 706              		.syntax unified
 707              	.LBE12:
 708              	.LBE11:
 869:Core/Src/main.c ****   char textStr[] = "qui si è\nrotto tutto";
 709              		.loc 1 869 3 view .LVU188
 710              		.loc 1 869 8 is_stmt 0 view .LVU189
 711 0006 EC46     		mov	ip, sp
 712 0008 094C     		ldr	r4, .L37
 713 000a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 714 000c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 715 0010 94E80300 		ldm	r4, {r0, r1}
 716 0014 4CF8040B 		str	r0, [ip], #4
 717 0018 ACF80010 		strh	r1, [ip]	@ movhi
 870:Core/Src/main.c ****   clearLCD();
 718              		.loc 1 870 3 is_stmt 1 view .LVU190
 719 001c FFF7FEFF 		bl	clearLCD
 720              	.LVL34:
 871:Core/Src/main.c ****   setCursor(0,  0);
 721              		.loc 1 871 3 view .LVU191
 722 0020 0021     		movs	r1, #0
 723 0022 0846     		mov	r0, r1
 724 0024 FFF7FEFF 		bl	setCursor
 725              	.LVL35:
 872:Core/Src/main.c ****   writeLCD(textStr);
 726              		.loc 1 872 3 view .LVU192
 727 0028 6846     		mov	r0, sp
 728 002a FFF7FEFF 		bl	writeLCD
 729              	.LVL36:
 730              	.L35:
 873:Core/Src/main.c ****   while (1)
 731              		.loc 1 873 3 discriminator 1 view .LVU193
 874:Core/Src/main.c ****   {
 875:Core/Src/main.c ****   }
 732              		.loc 1 875 3 discriminator 1 view .LVU194
 873:Core/Src/main.c ****   while (1)
 733              		.loc 1 873 9 discriminator 1 view .LVU195
 734 002e FEE7     		b	.L35
 735              	.L38:
 736              		.align	2
ARM GAS  /tmp/cc8C2055.s 			page 33


 737              	.L37:
 738 0030 00000000 		.word	.LC0
 739              		.cfi_endproc
 740              	.LFE308:
 742              		.section	.text.MX_ADC1_Init,"ax",%progbits
 743              		.align	1
 744              		.syntax unified
 745              		.thumb
 746              		.thumb_func
 748              	MX_ADC1_Init:
 749              	.LFB294:
 261:Core/Src/main.c **** 
 750              		.loc 1 261 1 view -0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 24
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754 0000 00B5     		push	{lr}
 755              		.cfi_def_cfa_offset 4
 756              		.cfi_offset 14, -4
 757 0002 87B0     		sub	sp, sp, #28
 758              		.cfi_def_cfa_offset 32
 267:Core/Src/main.c **** 
 759              		.loc 1 267 3 view .LVU197
 267:Core/Src/main.c **** 
 760              		.loc 1 267 26 is_stmt 0 view .LVU198
 761 0004 0023     		movs	r3, #0
 762 0006 0093     		str	r3, [sp]
 763 0008 0193     		str	r3, [sp, #4]
 764 000a 0293     		str	r3, [sp, #8]
 765 000c 0393     		str	r3, [sp, #12]
 766 000e 0493     		str	r3, [sp, #16]
 767 0010 0593     		str	r3, [sp, #20]
 275:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 768              		.loc 1 275 3 is_stmt 1 view .LVU199
 275:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 769              		.loc 1 275 18 is_stmt 0 view .LVU200
 770 0012 4448     		ldr	r0, .L59
 771 0014 444A     		ldr	r2, .L59+4
 772 0016 0260     		str	r2, [r0]
 276:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 773              		.loc 1 276 3 is_stmt 1 view .LVU201
 276:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 774              		.loc 1 276 29 is_stmt 0 view .LVU202
 775 0018 4360     		str	r3, [r0, #4]
 277:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 776              		.loc 1 277 3 is_stmt 1 view .LVU203
 277:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 777              		.loc 1 277 25 is_stmt 0 view .LVU204
 778 001a 8360     		str	r3, [r0, #8]
 278:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 779              		.loc 1 278 3 is_stmt 1 view .LVU205
 278:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 780              		.loc 1 278 24 is_stmt 0 view .LVU206
 781 001c C360     		str	r3, [r0, #12]
 279:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 782              		.loc 1 279 3 is_stmt 1 view .LVU207
 279:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
ARM GAS  /tmp/cc8C2055.s 			page 34


 783              		.loc 1 279 27 is_stmt 0 view .LVU208
 784 001e 0122     		movs	r2, #1
 785 0020 0261     		str	r2, [r0, #16]
 280:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 786              		.loc 1 280 3 is_stmt 1 view .LVU209
 280:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 787              		.loc 1 280 27 is_stmt 0 view .LVU210
 788 0022 0821     		movs	r1, #8
 789 0024 4161     		str	r1, [r0, #20]
 281:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 790              		.loc 1 281 3 is_stmt 1 view .LVU211
 281:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 791              		.loc 1 281 31 is_stmt 0 view .LVU212
 792 0026 0376     		strb	r3, [r0, #24]
 282:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 8;
 793              		.loc 1 282 3 is_stmt 1 view .LVU213
 282:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 8;
 794              		.loc 1 282 33 is_stmt 0 view .LVU214
 795 0028 4276     		strb	r2, [r0, #25]
 283:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 796              		.loc 1 283 3 is_stmt 1 view .LVU215
 283:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 797              		.loc 1 283 30 is_stmt 0 view .LVU216
 798 002a C161     		str	r1, [r0, #28]
 284:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 799              		.loc 1 284 3 is_stmt 1 view .LVU217
 284:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800              		.loc 1 284 36 is_stmt 0 view .LVU218
 801 002c 80F82030 		strb	r3, [r0, #32]
 285:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 802              		.loc 1 285 3 is_stmt 1 view .LVU219
 285:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 803              		.loc 1 285 31 is_stmt 0 view .LVU220
 804 0030 8362     		str	r3, [r0, #40]
 286:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 805              		.loc 1 286 3 is_stmt 1 view .LVU221
 286:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 806              		.loc 1 286 35 is_stmt 0 view .LVU222
 807 0032 C362     		str	r3, [r0, #44]
 287:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 808              		.loc 1 287 3 is_stmt 1 view .LVU223
 287:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 809              		.loc 1 287 36 is_stmt 0 view .LVU224
 810 0034 80F83020 		strb	r2, [r0, #48]
 288:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 811              		.loc 1 288 3 is_stmt 1 view .LVU225
 288:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 812              		.loc 1 288 22 is_stmt 0 view .LVU226
 813 0038 4FF48052 		mov	r2, #4096
 814 003c 4263     		str	r2, [r0, #52]
 289:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 815              		.loc 1 289 3 is_stmt 1 view .LVU227
 289:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 816              		.loc 1 289 31 is_stmt 0 view .LVU228
 817 003e 80F83830 		strb	r3, [r0, #56]
 290:Core/Src/main.c ****   {
 818              		.loc 1 290 3 is_stmt 1 view .LVU229
ARM GAS  /tmp/cc8C2055.s 			page 35


 290:Core/Src/main.c ****   {
 819              		.loc 1 290 7 is_stmt 0 view .LVU230
 820 0042 FFF7FEFF 		bl	HAL_ADC_Init
 821              	.LVL37:
 290:Core/Src/main.c ****   {
 822              		.loc 1 290 6 view .LVU231
 823 0046 0028     		cmp	r0, #0
 824 0048 5AD1     		bne	.L50
 297:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 825              		.loc 1 297 3 is_stmt 1 view .LVU232
 297:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 826              		.loc 1 297 19 is_stmt 0 view .LVU233
 827 004a 384B     		ldr	r3, .L59+8
 828 004c 0093     		str	r3, [sp]
 298:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 829              		.loc 1 298 3 is_stmt 1 view .LVU234
 298:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 830              		.loc 1 298 16 is_stmt 0 view .LVU235
 831 004e 0623     		movs	r3, #6
 832 0050 0193     		str	r3, [sp, #4]
 299:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 833              		.loc 1 299 3 is_stmt 1 view .LVU236
 299:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 834              		.loc 1 299 24 is_stmt 0 view .LVU237
 835 0052 0723     		movs	r3, #7
 836 0054 0293     		str	r3, [sp, #8]
 300:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 837              		.loc 1 300 3 is_stmt 1 view .LVU238
 300:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 838              		.loc 1 300 22 is_stmt 0 view .LVU239
 839 0056 7F23     		movs	r3, #127
 840 0058 0393     		str	r3, [sp, #12]
 301:Core/Src/main.c ****   sConfig.Offset = 0;
 841              		.loc 1 301 3 is_stmt 1 view .LVU240
 301:Core/Src/main.c ****   sConfig.Offset = 0;
 842              		.loc 1 301 24 is_stmt 0 view .LVU241
 843 005a 0423     		movs	r3, #4
 844 005c 0493     		str	r3, [sp, #16]
 302:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 845              		.loc 1 302 3 is_stmt 1 view .LVU242
 302:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 846              		.loc 1 302 18 is_stmt 0 view .LVU243
 847 005e 0023     		movs	r3, #0
 848 0060 0593     		str	r3, [sp, #20]
 303:Core/Src/main.c ****   {
 849              		.loc 1 303 3 is_stmt 1 view .LVU244
 303:Core/Src/main.c ****   {
 850              		.loc 1 303 7 is_stmt 0 view .LVU245
 851 0062 6946     		mov	r1, sp
 852 0064 2F48     		ldr	r0, .L59
 853 0066 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 854              	.LVL38:
 303:Core/Src/main.c ****   {
 855              		.loc 1 303 6 view .LVU246
 856 006a 0028     		cmp	r0, #0
 857 006c 4AD1     		bne	.L51
 310:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
ARM GAS  /tmp/cc8C2055.s 			page 36


 858              		.loc 1 310 3 is_stmt 1 view .LVU247
 310:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 859              		.loc 1 310 19 is_stmt 0 view .LVU248
 860 006e 304B     		ldr	r3, .L59+12
 861 0070 0093     		str	r3, [sp]
 311:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 862              		.loc 1 311 3 is_stmt 1 view .LVU249
 311:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 863              		.loc 1 311 16 is_stmt 0 view .LVU250
 864 0072 0C23     		movs	r3, #12
 865 0074 0193     		str	r3, [sp, #4]
 312:Core/Src/main.c ****   {
 866              		.loc 1 312 3 is_stmt 1 view .LVU251
 312:Core/Src/main.c ****   {
 867              		.loc 1 312 7 is_stmt 0 view .LVU252
 868 0076 6946     		mov	r1, sp
 869 0078 2A48     		ldr	r0, .L59
 870 007a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 871              	.LVL39:
 312:Core/Src/main.c ****   {
 872              		.loc 1 312 6 view .LVU253
 873 007e 0028     		cmp	r0, #0
 874 0080 42D1     		bne	.L52
 319:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 875              		.loc 1 319 3 is_stmt 1 view .LVU254
 319:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 876              		.loc 1 319 19 is_stmt 0 view .LVU255
 877 0082 2C4B     		ldr	r3, .L59+16
 878 0084 0093     		str	r3, [sp]
 320:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 879              		.loc 1 320 3 is_stmt 1 view .LVU256
 320:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 880              		.loc 1 320 16 is_stmt 0 view .LVU257
 881 0086 1223     		movs	r3, #18
 882 0088 0193     		str	r3, [sp, #4]
 321:Core/Src/main.c ****   {
 883              		.loc 1 321 3 is_stmt 1 view .LVU258
 321:Core/Src/main.c ****   {
 884              		.loc 1 321 7 is_stmt 0 view .LVU259
 885 008a 6946     		mov	r1, sp
 886 008c 2548     		ldr	r0, .L59
 887 008e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 888              	.LVL40:
 321:Core/Src/main.c ****   {
 889              		.loc 1 321 6 view .LVU260
 890 0092 0028     		cmp	r0, #0
 891 0094 3AD1     		bne	.L53
 328:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 892              		.loc 1 328 3 is_stmt 1 view .LVU261
 328:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 893              		.loc 1 328 19 is_stmt 0 view .LVU262
 894 0096 284B     		ldr	r3, .L59+20
 895 0098 0093     		str	r3, [sp]
 329:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 896              		.loc 1 329 3 is_stmt 1 view .LVU263
 329:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 897              		.loc 1 329 16 is_stmt 0 view .LVU264
ARM GAS  /tmp/cc8C2055.s 			page 37


 898 009a 1823     		movs	r3, #24
 899 009c 0193     		str	r3, [sp, #4]
 330:Core/Src/main.c ****   {
 900              		.loc 1 330 3 is_stmt 1 view .LVU265
 330:Core/Src/main.c ****   {
 901              		.loc 1 330 7 is_stmt 0 view .LVU266
 902 009e 6946     		mov	r1, sp
 903 00a0 2048     		ldr	r0, .L59
 904 00a2 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 905              	.LVL41:
 330:Core/Src/main.c ****   {
 906              		.loc 1 330 6 view .LVU267
 907 00a6 0028     		cmp	r0, #0
 908 00a8 32D1     		bne	.L54
 337:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 909              		.loc 1 337 3 is_stmt 1 view .LVU268
 337:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 910              		.loc 1 337 19 is_stmt 0 view .LVU269
 911 00aa 244B     		ldr	r3, .L59+24
 912 00ac 0093     		str	r3, [sp]
 338:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 913              		.loc 1 338 3 is_stmt 1 view .LVU270
 338:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 914              		.loc 1 338 16 is_stmt 0 view .LVU271
 915 00ae 4FF48073 		mov	r3, #256
 916 00b2 0193     		str	r3, [sp, #4]
 339:Core/Src/main.c ****   {
 917              		.loc 1 339 3 is_stmt 1 view .LVU272
 339:Core/Src/main.c ****   {
 918              		.loc 1 339 7 is_stmt 0 view .LVU273
 919 00b4 6946     		mov	r1, sp
 920 00b6 1B48     		ldr	r0, .L59
 921 00b8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 922              	.LVL42:
 339:Core/Src/main.c ****   {
 923              		.loc 1 339 6 view .LVU274
 924 00bc 50BB     		cbnz	r0, .L55
 346:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 925              		.loc 1 346 3 is_stmt 1 view .LVU275
 346:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 926              		.loc 1 346 19 is_stmt 0 view .LVU276
 927 00be 204B     		ldr	r3, .L59+28
 928 00c0 0093     		str	r3, [sp]
 347:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 929              		.loc 1 347 3 is_stmt 1 view .LVU277
 347:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 930              		.loc 1 347 16 is_stmt 0 view .LVU278
 931 00c2 4FF48373 		mov	r3, #262
 932 00c6 0193     		str	r3, [sp, #4]
 348:Core/Src/main.c ****   {
 933              		.loc 1 348 3 is_stmt 1 view .LVU279
 348:Core/Src/main.c ****   {
 934              		.loc 1 348 7 is_stmt 0 view .LVU280
 935 00c8 6946     		mov	r1, sp
 936 00ca 1648     		ldr	r0, .L59
 937 00cc FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 938              	.LVL43:
ARM GAS  /tmp/cc8C2055.s 			page 38


 348:Core/Src/main.c ****   {
 939              		.loc 1 348 6 view .LVU281
 940 00d0 10BB     		cbnz	r0, .L56
 355:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_7;
 941              		.loc 1 355 3 is_stmt 1 view .LVU282
 355:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_7;
 942              		.loc 1 355 19 is_stmt 0 view .LVU283
 943 00d2 1C4B     		ldr	r3, .L59+32
 944 00d4 0093     		str	r3, [sp]
 356:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 945              		.loc 1 356 3 is_stmt 1 view .LVU284
 356:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 946              		.loc 1 356 16 is_stmt 0 view .LVU285
 947 00d6 4FF48673 		mov	r3, #268
 948 00da 0193     		str	r3, [sp, #4]
 357:Core/Src/main.c ****   {
 949              		.loc 1 357 3 is_stmt 1 view .LVU286
 357:Core/Src/main.c ****   {
 950              		.loc 1 357 7 is_stmt 0 view .LVU287
 951 00dc 6946     		mov	r1, sp
 952 00de 1148     		ldr	r0, .L59
 953 00e0 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 954              	.LVL44:
 357:Core/Src/main.c ****   {
 955              		.loc 1 357 6 view .LVU288
 956 00e4 D0B9     		cbnz	r0, .L57
 364:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_8;
 957              		.loc 1 364 3 is_stmt 1 view .LVU289
 364:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_8;
 958              		.loc 1 364 19 is_stmt 0 view .LVU290
 959 00e6 184B     		ldr	r3, .L59+36
 960 00e8 0093     		str	r3, [sp]
 365:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 961              		.loc 1 365 3 is_stmt 1 view .LVU291
 365:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 962              		.loc 1 365 16 is_stmt 0 view .LVU292
 963 00ea 4FF48973 		mov	r3, #274
 964 00ee 0193     		str	r3, [sp, #4]
 366:Core/Src/main.c ****   {
 965              		.loc 1 366 3 is_stmt 1 view .LVU293
 366:Core/Src/main.c ****   {
 966              		.loc 1 366 7 is_stmt 0 view .LVU294
 967 00f0 6946     		mov	r1, sp
 968 00f2 0C48     		ldr	r0, .L59
 969 00f4 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 970              	.LVL45:
 366:Core/Src/main.c ****   {
 971              		.loc 1 366 6 view .LVU295
 972 00f8 90B9     		cbnz	r0, .L58
 374:Core/Src/main.c **** 
 973              		.loc 1 374 1 view .LVU296
 974 00fa 07B0     		add	sp, sp, #28
 975              		.cfi_remember_state
 976              		.cfi_def_cfa_offset 4
 977              		@ sp needed
 978 00fc 5DF804FB 		ldr	pc, [sp], #4
 979              	.L50:
ARM GAS  /tmp/cc8C2055.s 			page 39


 980              		.cfi_restore_state
 292:Core/Src/main.c ****   }
 981              		.loc 1 292 5 is_stmt 1 view .LVU297
 982 0100 FFF7FEFF 		bl	Error_Handler
 983              	.LVL46:
 984              	.L51:
 305:Core/Src/main.c ****   }
 985              		.loc 1 305 5 view .LVU298
 986 0104 FFF7FEFF 		bl	Error_Handler
 987              	.LVL47:
 988              	.L52:
 314:Core/Src/main.c ****   }
 989              		.loc 1 314 5 view .LVU299
 990 0108 FFF7FEFF 		bl	Error_Handler
 991              	.LVL48:
 992              	.L53:
 323:Core/Src/main.c ****   }
 993              		.loc 1 323 5 view .LVU300
 994 010c FFF7FEFF 		bl	Error_Handler
 995              	.LVL49:
 996              	.L54:
 332:Core/Src/main.c ****   }
 997              		.loc 1 332 5 view .LVU301
 998 0110 FFF7FEFF 		bl	Error_Handler
 999              	.LVL50:
 1000              	.L55:
 341:Core/Src/main.c ****   }
 1001              		.loc 1 341 5 view .LVU302
 1002 0114 FFF7FEFF 		bl	Error_Handler
 1003              	.LVL51:
 1004              	.L56:
 350:Core/Src/main.c ****   }
 1005              		.loc 1 350 5 view .LVU303
 1006 0118 FFF7FEFF 		bl	Error_Handler
 1007              	.LVL52:
 1008              	.L57:
 359:Core/Src/main.c ****   }
 1009              		.loc 1 359 5 view .LVU304
 1010 011c FFF7FEFF 		bl	Error_Handler
 1011              	.LVL53:
 1012              	.L58:
 368:Core/Src/main.c ****   }
 1013              		.loc 1 368 5 view .LVU305
 1014 0120 FFF7FEFF 		bl	Error_Handler
 1015              	.LVL54:
 1016              	.L60:
 1017              		.align	2
 1018              	.L59:
 1019 0124 00000000 		.word	.LANCHOR6
 1020 0128 00000450 		.word	1342439424
 1021 012c 02003004 		.word	70254594
 1022 0130 04006008 		.word	140509188
 1023 0134 0800900C 		.word	210763784
 1024 0138 1000C010 		.word	281018384
 1025 013c 0002B025 		.word	632291840
 1026 0140 0004002A 		.word	704644096
 1027 0144 00106032 		.word	845156352
ARM GAS  /tmp/cc8C2055.s 			page 40


 1028 0148 00209036 		.word	915415040
 1029              		.cfi_endproc
 1030              	.LFE294:
 1032              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1033              		.align	1
 1034              		.syntax unified
 1035              		.thumb
 1036              		.thumb_func
 1038              	MX_USART1_UART_Init:
 1039              	.LFB298:
 575:Core/Src/main.c **** 
 1040              		.loc 1 575 1 view -0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 0
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044 0000 08B5     		push	{r3, lr}
 1045              		.cfi_def_cfa_offset 8
 1046              		.cfi_offset 3, -8
 1047              		.cfi_offset 14, -4
 584:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 1048              		.loc 1 584 3 view .LVU307
 584:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 1049              		.loc 1 584 19 is_stmt 0 view .LVU308
 1050 0002 0B48     		ldr	r0, .L65
 1051 0004 0B4B     		ldr	r3, .L65+4
 1052 0006 0360     		str	r3, [r0]
 585:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1053              		.loc 1 585 3 is_stmt 1 view .LVU309
 585:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1054              		.loc 1 585 24 is_stmt 0 view .LVU310
 1055 0008 4FF4E133 		mov	r3, #115200
 1056 000c 4360     		str	r3, [r0, #4]
 586:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1057              		.loc 1 586 3 is_stmt 1 view .LVU311
 586:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1058              		.loc 1 586 26 is_stmt 0 view .LVU312
 1059 000e 0023     		movs	r3, #0
 1060 0010 8360     		str	r3, [r0, #8]
 587:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1061              		.loc 1 587 3 is_stmt 1 view .LVU313
 587:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1062              		.loc 1 587 24 is_stmt 0 view .LVU314
 1063 0012 C360     		str	r3, [r0, #12]
 588:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1064              		.loc 1 588 3 is_stmt 1 view .LVU315
 588:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1065              		.loc 1 588 22 is_stmt 0 view .LVU316
 1066 0014 0361     		str	r3, [r0, #16]
 589:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1067              		.loc 1 589 3 is_stmt 1 view .LVU317
 589:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1068              		.loc 1 589 20 is_stmt 0 view .LVU318
 1069 0016 0C22     		movs	r2, #12
 1070 0018 4261     		str	r2, [r0, #20]
 590:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1071              		.loc 1 590 3 is_stmt 1 view .LVU319
 590:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
ARM GAS  /tmp/cc8C2055.s 			page 41


 1072              		.loc 1 590 25 is_stmt 0 view .LVU320
 1073 001a 8361     		str	r3, [r0, #24]
 591:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1074              		.loc 1 591 3 is_stmt 1 view .LVU321
 591:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1075              		.loc 1 591 28 is_stmt 0 view .LVU322
 1076 001c C361     		str	r3, [r0, #28]
 592:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1077              		.loc 1 592 3 is_stmt 1 view .LVU323
 592:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1078              		.loc 1 592 30 is_stmt 0 view .LVU324
 1079 001e 0362     		str	r3, [r0, #32]
 593:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1080              		.loc 1 593 3 is_stmt 1 view .LVU325
 593:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1081              		.loc 1 593 38 is_stmt 0 view .LVU326
 1082 0020 4362     		str	r3, [r0, #36]
 594:Core/Src/main.c ****   {
 1083              		.loc 1 594 3 is_stmt 1 view .LVU327
 594:Core/Src/main.c ****   {
 1084              		.loc 1 594 7 is_stmt 0 view .LVU328
 1085 0022 FFF7FEFF 		bl	HAL_UART_Init
 1086              	.LVL55:
 594:Core/Src/main.c ****   {
 1087              		.loc 1 594 6 view .LVU329
 1088 0026 00B9     		cbnz	r0, .L64
 602:Core/Src/main.c **** 
 1089              		.loc 1 602 1 view .LVU330
 1090 0028 08BD     		pop	{r3, pc}
 1091              	.L64:
 596:Core/Src/main.c ****   }
 1092              		.loc 1 596 5 is_stmt 1 view .LVU331
 1093 002a FFF7FEFF 		bl	Error_Handler
 1094              	.LVL56:
 1095              	.L66:
 1096 002e 00BF     		.align	2
 1097              	.L65:
 1098 0030 00000000 		.word	.LANCHOR2
 1099 0034 00380140 		.word	1073821696
 1100              		.cfi_endproc
 1101              	.LFE298:
 1103              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1104              		.align	1
 1105              		.syntax unified
 1106              		.thumb
 1107              		.thumb_func
 1109              	MX_TIM1_Init:
 1110              	.LFB295:
 382:Core/Src/main.c **** 
 1111              		.loc 1 382 1 view -0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 104
 1114              		@ frame_needed = 0, uses_anonymous_args = 0
 1115 0000 10B5     		push	{r4, lr}
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 4, -8
 1118              		.cfi_offset 14, -4
ARM GAS  /tmp/cc8C2055.s 			page 42


 1119 0002 9AB0     		sub	sp, sp, #104
 1120              		.cfi_def_cfa_offset 112
 388:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1121              		.loc 1 388 3 view .LVU333
 388:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1122              		.loc 1 388 26 is_stmt 0 view .LVU334
 1123 0004 0024     		movs	r4, #0
 1124 0006 1694     		str	r4, [sp, #88]
 1125 0008 1794     		str	r4, [sp, #92]
 1126 000a 1894     		str	r4, [sp, #96]
 1127 000c 1994     		str	r4, [sp, #100]
 389:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1128              		.loc 1 389 3 is_stmt 1 view .LVU335
 389:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1129              		.loc 1 389 27 is_stmt 0 view .LVU336
 1130 000e 1394     		str	r4, [sp, #76]
 1131 0010 1494     		str	r4, [sp, #80]
 1132 0012 1594     		str	r4, [sp, #84]
 390:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1133              		.loc 1 390 3 is_stmt 1 view .LVU337
 390:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1134              		.loc 1 390 22 is_stmt 0 view .LVU338
 1135 0014 0C94     		str	r4, [sp, #48]
 1136 0016 0D94     		str	r4, [sp, #52]
 1137 0018 0E94     		str	r4, [sp, #56]
 1138 001a 0F94     		str	r4, [sp, #60]
 1139 001c 1094     		str	r4, [sp, #64]
 1140 001e 1194     		str	r4, [sp, #68]
 1141 0020 1294     		str	r4, [sp, #72]
 391:Core/Src/main.c **** 
 1142              		.loc 1 391 3 is_stmt 1 view .LVU339
 391:Core/Src/main.c **** 
 1143              		.loc 1 391 34 is_stmt 0 view .LVU340
 1144 0022 2C22     		movs	r2, #44
 1145 0024 2146     		mov	r1, r4
 1146 0026 01A8     		add	r0, sp, #4
 1147 0028 FFF7FEFF 		bl	memset
 1148              	.LVL57:
 396:Core/Src/main.c ****   htim1.Init.Prescaler = 1099;
 1149              		.loc 1 396 3 is_stmt 1 view .LVU341
 396:Core/Src/main.c ****   htim1.Init.Prescaler = 1099;
 1150              		.loc 1 396 18 is_stmt 0 view .LVU342
 1151 002c 3148     		ldr	r0, .L81
 1152 002e 324B     		ldr	r3, .L81+4
 1153 0030 0360     		str	r3, [r0]
 397:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1154              		.loc 1 397 3 is_stmt 1 view .LVU343
 397:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1155              		.loc 1 397 24 is_stmt 0 view .LVU344
 1156 0032 40F24B43 		movw	r3, #1099
 1157 0036 4360     		str	r3, [r0, #4]
 398:Core/Src/main.c ****   htim1.Init.Period = 400;
 1158              		.loc 1 398 3 is_stmt 1 view .LVU345
 398:Core/Src/main.c ****   htim1.Init.Period = 400;
 1159              		.loc 1 398 26 is_stmt 0 view .LVU346
 1160 0038 8460     		str	r4, [r0, #8]
 399:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/cc8C2055.s 			page 43


 1161              		.loc 1 399 3 is_stmt 1 view .LVU347
 399:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1162              		.loc 1 399 21 is_stmt 0 view .LVU348
 1163 003a 4FF4C873 		mov	r3, #400
 1164 003e C360     		str	r3, [r0, #12]
 400:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1165              		.loc 1 400 3 is_stmt 1 view .LVU349
 400:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1166              		.loc 1 400 28 is_stmt 0 view .LVU350
 1167 0040 0461     		str	r4, [r0, #16]
 401:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1168              		.loc 1 401 3 is_stmt 1 view .LVU351
 401:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1169              		.loc 1 401 32 is_stmt 0 view .LVU352
 1170 0042 4461     		str	r4, [r0, #20]
 402:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1171              		.loc 1 402 3 is_stmt 1 view .LVU353
 402:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1172              		.loc 1 402 32 is_stmt 0 view .LVU354
 1173 0044 8023     		movs	r3, #128
 1174 0046 8361     		str	r3, [r0, #24]
 403:Core/Src/main.c ****   {
 1175              		.loc 1 403 3 is_stmt 1 view .LVU355
 403:Core/Src/main.c ****   {
 1176              		.loc 1 403 7 is_stmt 0 view .LVU356
 1177 0048 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1178              	.LVL58:
 403:Core/Src/main.c ****   {
 1179              		.loc 1 403 6 view .LVU357
 1180 004c 0028     		cmp	r0, #0
 1181 004e 45D1     		bne	.L75
 407:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1182              		.loc 1 407 3 is_stmt 1 view .LVU358
 407:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1183              		.loc 1 407 34 is_stmt 0 view .LVU359
 1184 0050 4FF48053 		mov	r3, #4096
 1185 0054 1693     		str	r3, [sp, #88]
 408:Core/Src/main.c ****   {
 1186              		.loc 1 408 3 is_stmt 1 view .LVU360
 408:Core/Src/main.c ****   {
 1187              		.loc 1 408 7 is_stmt 0 view .LVU361
 1188 0056 16A9     		add	r1, sp, #88
 1189 0058 2648     		ldr	r0, .L81
 1190 005a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1191              	.LVL59:
 408:Core/Src/main.c ****   {
 1192              		.loc 1 408 6 view .LVU362
 1193 005e 0028     		cmp	r0, #0
 1194 0060 3ED1     		bne	.L76
 412:Core/Src/main.c ****   {
 1195              		.loc 1 412 3 is_stmt 1 view .LVU363
 412:Core/Src/main.c ****   {
 1196              		.loc 1 412 7 is_stmt 0 view .LVU364
 1197 0062 2448     		ldr	r0, .L81
 1198 0064 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1199              	.LVL60:
 412:Core/Src/main.c ****   {
ARM GAS  /tmp/cc8C2055.s 			page 44


 1200              		.loc 1 412 6 view .LVU365
 1201 0068 0028     		cmp	r0, #0
 1202 006a 3BD1     		bne	.L77
 416:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 1203              		.loc 1 416 3 is_stmt 1 view .LVU366
 416:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 1204              		.loc 1 416 37 is_stmt 0 view .LVU367
 1205 006c 2023     		movs	r3, #32
 1206 006e 1393     		str	r3, [sp, #76]
 417:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1207              		.loc 1 417 3 is_stmt 1 view .LVU368
 417:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1208              		.loc 1 417 38 is_stmt 0 view .LVU369
 1209 0070 4FF40013 		mov	r3, #2097152
 1210 0074 1493     		str	r3, [sp, #80]
 418:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1211              		.loc 1 418 3 is_stmt 1 view .LVU370
 418:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1212              		.loc 1 418 33 is_stmt 0 view .LVU371
 1213 0076 0023     		movs	r3, #0
 1214 0078 1593     		str	r3, [sp, #84]
 419:Core/Src/main.c ****   {
 1215              		.loc 1 419 3 is_stmt 1 view .LVU372
 419:Core/Src/main.c ****   {
 1216              		.loc 1 419 7 is_stmt 0 view .LVU373
 1217 007a 13A9     		add	r1, sp, #76
 1218 007c 1D48     		ldr	r0, .L81
 1219 007e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1220              	.LVL61:
 419:Core/Src/main.c ****   {
 1221              		.loc 1 419 6 view .LVU374
 1222 0082 0028     		cmp	r0, #0
 1223 0084 30D1     		bne	.L78
 423:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 1224              		.loc 1 423 3 is_stmt 1 view .LVU375
 423:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 1225              		.loc 1 423 20 is_stmt 0 view .LVU376
 1226 0086 6023     		movs	r3, #96
 1227 0088 0C93     		str	r3, [sp, #48]
 424:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1228              		.loc 1 424 3 is_stmt 1 view .LVU377
 424:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1229              		.loc 1 424 19 is_stmt 0 view .LVU378
 1230 008a 4FF4FA73 		mov	r3, #500
 1231 008e 0D93     		str	r3, [sp, #52]
 425:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 1232              		.loc 1 425 3 is_stmt 1 view .LVU379
 425:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 1233              		.loc 1 425 24 is_stmt 0 view .LVU380
 1234 0090 0023     		movs	r3, #0
 1235 0092 0E93     		str	r3, [sp, #56]
 426:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1236              		.loc 1 426 3 is_stmt 1 view .LVU381
 426:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1237              		.loc 1 426 25 is_stmt 0 view .LVU382
 1238 0094 0822     		movs	r2, #8
 1239 0096 0F92     		str	r2, [sp, #60]
ARM GAS  /tmp/cc8C2055.s 			page 45


 427:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1240              		.loc 1 427 3 is_stmt 1 view .LVU383
 427:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1241              		.loc 1 427 24 is_stmt 0 view .LVU384
 1242 0098 1093     		str	r3, [sp, #64]
 428:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1243              		.loc 1 428 3 is_stmt 1 view .LVU385
 428:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1244              		.loc 1 428 25 is_stmt 0 view .LVU386
 1245 009a 1193     		str	r3, [sp, #68]
 429:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1246              		.loc 1 429 3 is_stmt 1 view .LVU387
 429:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1247              		.loc 1 429 26 is_stmt 0 view .LVU388
 1248 009c 1293     		str	r3, [sp, #72]
 430:Core/Src/main.c ****   {
 1249              		.loc 1 430 3 is_stmt 1 view .LVU389
 430:Core/Src/main.c ****   {
 1250              		.loc 1 430 7 is_stmt 0 view .LVU390
 1251 009e 0CA9     		add	r1, sp, #48
 1252 00a0 1448     		ldr	r0, .L81
 1253 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1254              	.LVL62:
 430:Core/Src/main.c ****   {
 1255              		.loc 1 430 6 view .LVU391
 1256 00a6 08BB     		cbnz	r0, .L79
 434:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1257              		.loc 1 434 3 is_stmt 1 view .LVU392
 434:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1258              		.loc 1 434 40 is_stmt 0 view .LVU393
 1259 00a8 0023     		movs	r3, #0
 1260 00aa 0193     		str	r3, [sp, #4]
 435:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1261              		.loc 1 435 3 is_stmt 1 view .LVU394
 435:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1262              		.loc 1 435 41 is_stmt 0 view .LVU395
 1263 00ac 0293     		str	r3, [sp, #8]
 436:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1264              		.loc 1 436 3 is_stmt 1 view .LVU396
 436:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1265              		.loc 1 436 34 is_stmt 0 view .LVU397
 1266 00ae 0393     		str	r3, [sp, #12]
 437:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1267              		.loc 1 437 3 is_stmt 1 view .LVU398
 437:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1268              		.loc 1 437 33 is_stmt 0 view .LVU399
 1269 00b0 0493     		str	r3, [sp, #16]
 438:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1270              		.loc 1 438 3 is_stmt 1 view .LVU400
 438:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1271              		.loc 1 438 35 is_stmt 0 view .LVU401
 1272 00b2 0593     		str	r3, [sp, #20]
 439:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1273              		.loc 1 439 3 is_stmt 1 view .LVU402
 439:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1274              		.loc 1 439 38 is_stmt 0 view .LVU403
 1275 00b4 4FF40052 		mov	r2, #8192
ARM GAS  /tmp/cc8C2055.s 			page 46


 1276 00b8 0692     		str	r2, [sp, #24]
 440:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 1277              		.loc 1 440 3 is_stmt 1 view .LVU404
 440:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 1278              		.loc 1 440 36 is_stmt 0 view .LVU405
 1279 00ba 0793     		str	r3, [sp, #28]
 441:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1280              		.loc 1 441 3 is_stmt 1 view .LVU406
 441:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1281              		.loc 1 441 36 is_stmt 0 view .LVU407
 1282 00bc 0893     		str	r3, [sp, #32]
 442:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 1283              		.loc 1 442 3 is_stmt 1 view .LVU408
 442:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 1284              		.loc 1 442 39 is_stmt 0 view .LVU409
 1285 00be 4FF00072 		mov	r2, #33554432
 1286 00c2 0992     		str	r2, [sp, #36]
 443:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1287              		.loc 1 443 3 is_stmt 1 view .LVU410
 443:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1288              		.loc 1 443 37 is_stmt 0 view .LVU411
 1289 00c4 0A93     		str	r3, [sp, #40]
 444:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1290              		.loc 1 444 3 is_stmt 1 view .LVU412
 444:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1291              		.loc 1 444 40 is_stmt 0 view .LVU413
 1292 00c6 0B93     		str	r3, [sp, #44]
 445:Core/Src/main.c ****   {
 1293              		.loc 1 445 3 is_stmt 1 view .LVU414
 445:Core/Src/main.c ****   {
 1294              		.loc 1 445 7 is_stmt 0 view .LVU415
 1295 00c8 01A9     		add	r1, sp, #4
 1296 00ca 0A48     		ldr	r0, .L81
 1297 00cc FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1298              	.LVL63:
 445:Core/Src/main.c ****   {
 1299              		.loc 1 445 6 view .LVU416
 1300 00d0 70B9     		cbnz	r0, .L80
 452:Core/Src/main.c **** 
 1301              		.loc 1 452 3 is_stmt 1 view .LVU417
 1302 00d2 0848     		ldr	r0, .L81
 1303 00d4 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1304              	.LVL64:
 454:Core/Src/main.c **** 
 1305              		.loc 1 454 1 is_stmt 0 view .LVU418
 1306 00d8 1AB0     		add	sp, sp, #104
 1307              		.cfi_remember_state
 1308              		.cfi_def_cfa_offset 8
 1309              		@ sp needed
 1310 00da 10BD     		pop	{r4, pc}
 1311              	.L75:
 1312              		.cfi_restore_state
 405:Core/Src/main.c ****   }
 1313              		.loc 1 405 5 is_stmt 1 view .LVU419
 1314 00dc FFF7FEFF 		bl	Error_Handler
 1315              	.LVL65:
 1316              	.L76:
ARM GAS  /tmp/cc8C2055.s 			page 47


 410:Core/Src/main.c ****   }
 1317              		.loc 1 410 5 view .LVU420
 1318 00e0 FFF7FEFF 		bl	Error_Handler
 1319              	.LVL66:
 1320              	.L77:
 414:Core/Src/main.c ****   }
 1321              		.loc 1 414 5 view .LVU421
 1322 00e4 FFF7FEFF 		bl	Error_Handler
 1323              	.LVL67:
 1324              	.L78:
 421:Core/Src/main.c ****   }
 1325              		.loc 1 421 5 view .LVU422
 1326 00e8 FFF7FEFF 		bl	Error_Handler
 1327              	.LVL68:
 1328              	.L79:
 432:Core/Src/main.c ****   }
 1329              		.loc 1 432 5 view .LVU423
 1330 00ec FFF7FEFF 		bl	Error_Handler
 1331              	.LVL69:
 1332              	.L80:
 447:Core/Src/main.c ****   }
 1333              		.loc 1 447 5 view .LVU424
 1334 00f0 FFF7FEFF 		bl	Error_Handler
 1335              	.LVL70:
 1336              	.L82:
 1337              		.align	2
 1338              	.L81:
 1339 00f4 00000000 		.word	.LANCHOR3
 1340 00f8 002C0140 		.word	1073818624
 1341              		.cfi_endproc
 1342              	.LFE295:
 1344              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1345              		.align	1
 1346              		.syntax unified
 1347              		.thumb
 1348              		.thumb_func
 1350              	MX_USART2_UART_Init:
 1351              	.LFB299:
 610:Core/Src/main.c **** 
 1352              		.loc 1 610 1 view -0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 1356 0000 08B5     		push	{r3, lr}
 1357              		.cfi_def_cfa_offset 8
 1358              		.cfi_offset 3, -8
 1359              		.cfi_offset 14, -4
 619:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1360              		.loc 1 619 3 view .LVU426
 619:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1361              		.loc 1 619 19 is_stmt 0 view .LVU427
 1362 0002 0B48     		ldr	r0, .L87
 1363 0004 0B4B     		ldr	r3, .L87+4
 1364 0006 0360     		str	r3, [r0]
 620:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1365              		.loc 1 620 3 is_stmt 1 view .LVU428
 620:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
ARM GAS  /tmp/cc8C2055.s 			page 48


 1366              		.loc 1 620 24 is_stmt 0 view .LVU429
 1367 0008 4FF4E133 		mov	r3, #115200
 1368 000c 4360     		str	r3, [r0, #4]
 621:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1369              		.loc 1 621 3 is_stmt 1 view .LVU430
 621:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1370              		.loc 1 621 26 is_stmt 0 view .LVU431
 1371 000e 0023     		movs	r3, #0
 1372 0010 8360     		str	r3, [r0, #8]
 622:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1373              		.loc 1 622 3 is_stmt 1 view .LVU432
 622:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1374              		.loc 1 622 24 is_stmt 0 view .LVU433
 1375 0012 C360     		str	r3, [r0, #12]
 623:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1376              		.loc 1 623 3 is_stmt 1 view .LVU434
 623:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1377              		.loc 1 623 22 is_stmt 0 view .LVU435
 1378 0014 0361     		str	r3, [r0, #16]
 624:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1379              		.loc 1 624 3 is_stmt 1 view .LVU436
 624:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1380              		.loc 1 624 20 is_stmt 0 view .LVU437
 1381 0016 0C22     		movs	r2, #12
 1382 0018 4261     		str	r2, [r0, #20]
 625:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1383              		.loc 1 625 3 is_stmt 1 view .LVU438
 625:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1384              		.loc 1 625 25 is_stmt 0 view .LVU439
 1385 001a 8361     		str	r3, [r0, #24]
 626:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1386              		.loc 1 626 3 is_stmt 1 view .LVU440
 626:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1387              		.loc 1 626 28 is_stmt 0 view .LVU441
 1388 001c C361     		str	r3, [r0, #28]
 627:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1389              		.loc 1 627 3 is_stmt 1 view .LVU442
 627:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1390              		.loc 1 627 30 is_stmt 0 view .LVU443
 1391 001e 0362     		str	r3, [r0, #32]
 628:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1392              		.loc 1 628 3 is_stmt 1 view .LVU444
 628:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1393              		.loc 1 628 38 is_stmt 0 view .LVU445
 1394 0020 4362     		str	r3, [r0, #36]
 629:Core/Src/main.c ****   {
 1395              		.loc 1 629 3 is_stmt 1 view .LVU446
 629:Core/Src/main.c ****   {
 1396              		.loc 1 629 7 is_stmt 0 view .LVU447
 1397 0022 FFF7FEFF 		bl	HAL_UART_Init
 1398              	.LVL71:
 629:Core/Src/main.c ****   {
 1399              		.loc 1 629 6 view .LVU448
 1400 0026 00B9     		cbnz	r0, .L86
 637:Core/Src/main.c **** 
 1401              		.loc 1 637 1 view .LVU449
 1402 0028 08BD     		pop	{r3, pc}
ARM GAS  /tmp/cc8C2055.s 			page 49


 1403              	.L86:
 631:Core/Src/main.c ****   }
 1404              		.loc 1 631 5 is_stmt 1 view .LVU450
 1405 002a FFF7FEFF 		bl	Error_Handler
 1406              	.LVL72:
 1407              	.L88:
 1408 002e 00BF     		.align	2
 1409              	.L87:
 1410 0030 00000000 		.word	.LANCHOR7
 1411 0034 00440040 		.word	1073759232
 1412              		.cfi_endproc
 1413              	.LFE299:
 1415              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 1416              		.align	1
 1417              		.syntax unified
 1418              		.thumb
 1419              		.thumb_func
 1421              	MX_USART3_UART_Init:
 1422              	.LFB300:
 645:Core/Src/main.c **** 
 1423              		.loc 1 645 1 view -0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 0
 1426              		@ frame_needed = 0, uses_anonymous_args = 0
 1427 0000 08B5     		push	{r3, lr}
 1428              		.cfi_def_cfa_offset 8
 1429              		.cfi_offset 3, -8
 1430              		.cfi_offset 14, -4
 654:Core/Src/main.c ****   huart3.Init.BaudRate = 115200;
 1431              		.loc 1 654 3 view .LVU452
 654:Core/Src/main.c ****   huart3.Init.BaudRate = 115200;
 1432              		.loc 1 654 19 is_stmt 0 view .LVU453
 1433 0002 0B48     		ldr	r0, .L93
 1434 0004 0B4B     		ldr	r3, .L93+4
 1435 0006 0360     		str	r3, [r0]
 655:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1436              		.loc 1 655 3 is_stmt 1 view .LVU454
 655:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1437              		.loc 1 655 24 is_stmt 0 view .LVU455
 1438 0008 4FF4E133 		mov	r3, #115200
 1439 000c 4360     		str	r3, [r0, #4]
 656:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1440              		.loc 1 656 3 is_stmt 1 view .LVU456
 656:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1441              		.loc 1 656 26 is_stmt 0 view .LVU457
 1442 000e 0023     		movs	r3, #0
 1443 0010 8360     		str	r3, [r0, #8]
 657:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 1444              		.loc 1 657 3 is_stmt 1 view .LVU458
 657:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 1445              		.loc 1 657 24 is_stmt 0 view .LVU459
 1446 0012 C360     		str	r3, [r0, #12]
 658:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1447              		.loc 1 658 3 is_stmt 1 view .LVU460
 658:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1448              		.loc 1 658 22 is_stmt 0 view .LVU461
 1449 0014 0361     		str	r3, [r0, #16]
ARM GAS  /tmp/cc8C2055.s 			page 50


 659:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1450              		.loc 1 659 3 is_stmt 1 view .LVU462
 659:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1451              		.loc 1 659 20 is_stmt 0 view .LVU463
 1452 0016 0C22     		movs	r2, #12
 1453 0018 4261     		str	r2, [r0, #20]
 660:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1454              		.loc 1 660 3 is_stmt 1 view .LVU464
 660:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1455              		.loc 1 660 25 is_stmt 0 view .LVU465
 1456 001a 8361     		str	r3, [r0, #24]
 661:Core/Src/main.c ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1457              		.loc 1 661 3 is_stmt 1 view .LVU466
 661:Core/Src/main.c ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1458              		.loc 1 661 28 is_stmt 0 view .LVU467
 1459 001c C361     		str	r3, [r0, #28]
 662:Core/Src/main.c ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1460              		.loc 1 662 3 is_stmt 1 view .LVU468
 662:Core/Src/main.c ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1461              		.loc 1 662 30 is_stmt 0 view .LVU469
 1462 001e 0362     		str	r3, [r0, #32]
 663:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1463              		.loc 1 663 3 is_stmt 1 view .LVU470
 663:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1464              		.loc 1 663 38 is_stmt 0 view .LVU471
 1465 0020 4362     		str	r3, [r0, #36]
 664:Core/Src/main.c ****   {
 1466              		.loc 1 664 3 is_stmt 1 view .LVU472
 664:Core/Src/main.c ****   {
 1467              		.loc 1 664 7 is_stmt 0 view .LVU473
 1468 0022 FFF7FEFF 		bl	HAL_UART_Init
 1469              	.LVL73:
 664:Core/Src/main.c ****   {
 1470              		.loc 1 664 6 view .LVU474
 1471 0026 00B9     		cbnz	r0, .L92
 672:Core/Src/main.c **** 
 1472              		.loc 1 672 1 view .LVU475
 1473 0028 08BD     		pop	{r3, pc}
 1474              	.L92:
 666:Core/Src/main.c ****   }
 1475              		.loc 1 666 5 is_stmt 1 view .LVU476
 1476 002a FFF7FEFF 		bl	Error_Handler
 1477              	.LVL74:
 1478              	.L94:
 1479 002e 00BF     		.align	2
 1480              	.L93:
 1481 0030 00000000 		.word	.LANCHOR8
 1482 0034 00480040 		.word	1073760256
 1483              		.cfi_endproc
 1484              	.LFE300:
 1486              		.section	.text.MX_TIM15_Init,"ax",%progbits
 1487              		.align	1
 1488              		.syntax unified
 1489              		.thumb
 1490              		.thumb_func
 1492              	MX_TIM15_Init:
 1493              	.LFB297:
ARM GAS  /tmp/cc8C2055.s 			page 51


 500:Core/Src/main.c **** 
 1494              		.loc 1 500 1 view -0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 104
 1497              		@ frame_needed = 0, uses_anonymous_args = 0
 1498 0000 10B5     		push	{r4, lr}
 1499              		.cfi_def_cfa_offset 8
 1500              		.cfi_offset 4, -8
 1501              		.cfi_offset 14, -4
 1502 0002 9AB0     		sub	sp, sp, #104
 1503              		.cfi_def_cfa_offset 112
 506:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1504              		.loc 1 506 3 view .LVU478
 506:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1505              		.loc 1 506 26 is_stmt 0 view .LVU479
 1506 0004 0024     		movs	r4, #0
 1507 0006 1694     		str	r4, [sp, #88]
 1508 0008 1794     		str	r4, [sp, #92]
 1509 000a 1894     		str	r4, [sp, #96]
 1510 000c 1994     		str	r4, [sp, #100]
 507:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1511              		.loc 1 507 3 is_stmt 1 view .LVU480
 507:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1512              		.loc 1 507 27 is_stmt 0 view .LVU481
 1513 000e 1394     		str	r4, [sp, #76]
 1514 0010 1494     		str	r4, [sp, #80]
 1515 0012 1594     		str	r4, [sp, #84]
 508:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1516              		.loc 1 508 3 is_stmt 1 view .LVU482
 508:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1517              		.loc 1 508 22 is_stmt 0 view .LVU483
 1518 0014 0C94     		str	r4, [sp, #48]
 1519 0016 0D94     		str	r4, [sp, #52]
 1520 0018 0E94     		str	r4, [sp, #56]
 1521 001a 0F94     		str	r4, [sp, #60]
 1522 001c 1094     		str	r4, [sp, #64]
 1523 001e 1194     		str	r4, [sp, #68]
 1524 0020 1294     		str	r4, [sp, #72]
 509:Core/Src/main.c **** 
 1525              		.loc 1 509 3 is_stmt 1 view .LVU484
 509:Core/Src/main.c **** 
 1526              		.loc 1 509 34 is_stmt 0 view .LVU485
 1527 0022 2C22     		movs	r2, #44
 1528 0024 2146     		mov	r1, r4
 1529 0026 01A8     		add	r0, sp, #4
 1530 0028 FFF7FEFF 		bl	memset
 1531              	.LVL75:
 514:Core/Src/main.c ****   htim15.Init.Prescaler = 1099;
 1532              		.loc 1 514 3 is_stmt 1 view .LVU486
 514:Core/Src/main.c ****   htim15.Init.Prescaler = 1099;
 1533              		.loc 1 514 19 is_stmt 0 view .LVU487
 1534 002c 2C48     		ldr	r0, .L109
 1535 002e 2D4B     		ldr	r3, .L109+4
 1536 0030 0360     		str	r3, [r0]
 515:Core/Src/main.c ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1537              		.loc 1 515 3 is_stmt 1 view .LVU488
 515:Core/Src/main.c ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  /tmp/cc8C2055.s 			page 52


 1538              		.loc 1 515 25 is_stmt 0 view .LVU489
 1539 0032 40F24B43 		movw	r3, #1099
 1540 0036 4360     		str	r3, [r0, #4]
 516:Core/Src/main.c ****   htim15.Init.Period = 400;
 1541              		.loc 1 516 3 is_stmt 1 view .LVU490
 516:Core/Src/main.c ****   htim15.Init.Period = 400;
 1542              		.loc 1 516 27 is_stmt 0 view .LVU491
 1543 0038 8460     		str	r4, [r0, #8]
 517:Core/Src/main.c ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1544              		.loc 1 517 3 is_stmt 1 view .LVU492
 517:Core/Src/main.c ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1545              		.loc 1 517 22 is_stmt 0 view .LVU493
 1546 003a 4FF4C873 		mov	r3, #400
 1547 003e C360     		str	r3, [r0, #12]
 518:Core/Src/main.c ****   htim15.Init.RepetitionCounter = 0;
 1548              		.loc 1 518 3 is_stmt 1 view .LVU494
 518:Core/Src/main.c ****   htim15.Init.RepetitionCounter = 0;
 1549              		.loc 1 518 29 is_stmt 0 view .LVU495
 1550 0040 0461     		str	r4, [r0, #16]
 519:Core/Src/main.c ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1551              		.loc 1 519 3 is_stmt 1 view .LVU496
 519:Core/Src/main.c ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1552              		.loc 1 519 33 is_stmt 0 view .LVU497
 1553 0042 4461     		str	r4, [r0, #20]
 520:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1554              		.loc 1 520 3 is_stmt 1 view .LVU498
 520:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1555              		.loc 1 520 33 is_stmt 0 view .LVU499
 1556 0044 8023     		movs	r3, #128
 1557 0046 8361     		str	r3, [r0, #24]
 521:Core/Src/main.c ****   {
 1558              		.loc 1 521 3 is_stmt 1 view .LVU500
 521:Core/Src/main.c ****   {
 1559              		.loc 1 521 7 is_stmt 0 view .LVU501
 1560 0048 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1561              	.LVL76:
 521:Core/Src/main.c ****   {
 1562              		.loc 1 521 6 view .LVU502
 1563 004c 0028     		cmp	r0, #0
 1564 004e 3BD1     		bne	.L103
 525:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1565              		.loc 1 525 3 is_stmt 1 view .LVU503
 525:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1566              		.loc 1 525 34 is_stmt 0 view .LVU504
 1567 0050 4FF48053 		mov	r3, #4096
 1568 0054 1693     		str	r3, [sp, #88]
 526:Core/Src/main.c ****   {
 1569              		.loc 1 526 3 is_stmt 1 view .LVU505
 526:Core/Src/main.c ****   {
 1570              		.loc 1 526 7 is_stmt 0 view .LVU506
 1571 0056 16A9     		add	r1, sp, #88
 1572 0058 2148     		ldr	r0, .L109
 1573 005a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1574              	.LVL77:
 526:Core/Src/main.c ****   {
 1575              		.loc 1 526 6 view .LVU507
 1576 005e 0028     		cmp	r0, #0
ARM GAS  /tmp/cc8C2055.s 			page 53


 1577 0060 34D1     		bne	.L104
 530:Core/Src/main.c ****   {
 1578              		.loc 1 530 3 is_stmt 1 view .LVU508
 530:Core/Src/main.c ****   {
 1579              		.loc 1 530 7 is_stmt 0 view .LVU509
 1580 0062 1F48     		ldr	r0, .L109
 1581 0064 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1582              	.LVL78:
 530:Core/Src/main.c ****   {
 1583              		.loc 1 530 6 view .LVU510
 1584 0068 0028     		cmp	r0, #0
 1585 006a 31D1     		bne	.L105
 534:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1586              		.loc 1 534 3 is_stmt 1 view .LVU511
 534:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1587              		.loc 1 534 37 is_stmt 0 view .LVU512
 1588 006c 2023     		movs	r3, #32
 1589 006e 1393     		str	r3, [sp, #76]
 535:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 1590              		.loc 1 535 3 is_stmt 1 view .LVU513
 535:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 1591              		.loc 1 535 33 is_stmt 0 view .LVU514
 1592 0070 0023     		movs	r3, #0
 1593 0072 1593     		str	r3, [sp, #84]
 536:Core/Src/main.c ****   {
 1594              		.loc 1 536 3 is_stmt 1 view .LVU515
 536:Core/Src/main.c ****   {
 1595              		.loc 1 536 7 is_stmt 0 view .LVU516
 1596 0074 13A9     		add	r1, sp, #76
 1597 0076 1A48     		ldr	r0, .L109
 1598 0078 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1599              	.LVL79:
 536:Core/Src/main.c ****   {
 1600              		.loc 1 536 6 view .LVU517
 1601 007c 50BB     		cbnz	r0, .L106
 540:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 1602              		.loc 1 540 3 is_stmt 1 view .LVU518
 540:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 1603              		.loc 1 540 20 is_stmt 0 view .LVU519
 1604 007e 6023     		movs	r3, #96
 1605 0080 0C93     		str	r3, [sp, #48]
 541:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 1606              		.loc 1 541 3 is_stmt 1 view .LVU520
 541:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 1607              		.loc 1 541 19 is_stmt 0 view .LVU521
 1608 0082 4FF4FA73 		mov	r3, #500
 1609 0086 0D93     		str	r3, [sp, #52]
 542:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1610              		.loc 1 542 3 is_stmt 1 view .LVU522
 542:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1611              		.loc 1 542 24 is_stmt 0 view .LVU523
 1612 0088 0223     		movs	r3, #2
 1613 008a 0E93     		str	r3, [sp, #56]
 543:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1614              		.loc 1 543 3 is_stmt 1 view .LVU524
 543:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1615              		.loc 1 543 25 is_stmt 0 view .LVU525
ARM GAS  /tmp/cc8C2055.s 			page 54


 1616 008c 0022     		movs	r2, #0
 1617 008e 0F92     		str	r2, [sp, #60]
 544:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1618              		.loc 1 544 3 is_stmt 1 view .LVU526
 544:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1619              		.loc 1 544 24 is_stmt 0 view .LVU527
 1620 0090 1092     		str	r2, [sp, #64]
 545:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1621              		.loc 1 545 3 is_stmt 1 view .LVU528
 545:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1622              		.loc 1 545 25 is_stmt 0 view .LVU529
 1623 0092 1192     		str	r2, [sp, #68]
 546:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1624              		.loc 1 546 3 is_stmt 1 view .LVU530
 546:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1625              		.loc 1 546 26 is_stmt 0 view .LVU531
 1626 0094 1292     		str	r2, [sp, #72]
 547:Core/Src/main.c ****   {
 1627              		.loc 1 547 3 is_stmt 1 view .LVU532
 547:Core/Src/main.c ****   {
 1628              		.loc 1 547 7 is_stmt 0 view .LVU533
 1629 0096 0CA9     		add	r1, sp, #48
 1630 0098 1148     		ldr	r0, .L109
 1631 009a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1632              	.LVL80:
 547:Core/Src/main.c ****   {
 1633              		.loc 1 547 6 view .LVU534
 1634 009e D8B9     		cbnz	r0, .L107
 551:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1635              		.loc 1 551 3 is_stmt 1 view .LVU535
 551:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1636              		.loc 1 551 40 is_stmt 0 view .LVU536
 1637 00a0 0023     		movs	r3, #0
 1638 00a2 0193     		str	r3, [sp, #4]
 552:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1639              		.loc 1 552 3 is_stmt 1 view .LVU537
 552:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1640              		.loc 1 552 41 is_stmt 0 view .LVU538
 1641 00a4 0293     		str	r3, [sp, #8]
 553:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1642              		.loc 1 553 3 is_stmt 1 view .LVU539
 553:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1643              		.loc 1 553 34 is_stmt 0 view .LVU540
 1644 00a6 0393     		str	r3, [sp, #12]
 554:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1645              		.loc 1 554 3 is_stmt 1 view .LVU541
 554:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1646              		.loc 1 554 33 is_stmt 0 view .LVU542
 1647 00a8 0493     		str	r3, [sp, #16]
 555:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1648              		.loc 1 555 3 is_stmt 1 view .LVU543
 555:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1649              		.loc 1 555 35 is_stmt 0 view .LVU544
 1650 00aa 0593     		str	r3, [sp, #20]
 556:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1651              		.loc 1 556 3 is_stmt 1 view .LVU545
 556:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
ARM GAS  /tmp/cc8C2055.s 			page 55


 1652              		.loc 1 556 38 is_stmt 0 view .LVU546
 1653 00ac 4FF40052 		mov	r2, #8192
 1654 00b0 0692     		str	r2, [sp, #24]
 557:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 1655              		.loc 1 557 3 is_stmt 1 view .LVU547
 557:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 1656              		.loc 1 557 40 is_stmt 0 view .LVU548
 1657 00b2 0B93     		str	r3, [sp, #44]
 558:Core/Src/main.c ****   {
 1658              		.loc 1 558 3 is_stmt 1 view .LVU549
 558:Core/Src/main.c ****   {
 1659              		.loc 1 558 7 is_stmt 0 view .LVU550
 1660 00b4 01A9     		add	r1, sp, #4
 1661 00b6 0A48     		ldr	r0, .L109
 1662 00b8 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1663              	.LVL81:
 558:Core/Src/main.c ****   {
 1664              		.loc 1 558 6 view .LVU551
 1665 00bc 70B9     		cbnz	r0, .L108
 565:Core/Src/main.c **** 
 1666              		.loc 1 565 3 is_stmt 1 view .LVU552
 1667 00be 0848     		ldr	r0, .L109
 1668 00c0 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1669              	.LVL82:
 567:Core/Src/main.c **** 
 1670              		.loc 1 567 1 is_stmt 0 view .LVU553
 1671 00c4 1AB0     		add	sp, sp, #104
 1672              		.cfi_remember_state
 1673              		.cfi_def_cfa_offset 8
 1674              		@ sp needed
 1675 00c6 10BD     		pop	{r4, pc}
 1676              	.L103:
 1677              		.cfi_restore_state
 523:Core/Src/main.c ****   }
 1678              		.loc 1 523 5 is_stmt 1 view .LVU554
 1679 00c8 FFF7FEFF 		bl	Error_Handler
 1680              	.LVL83:
 1681              	.L104:
 528:Core/Src/main.c ****   }
 1682              		.loc 1 528 5 view .LVU555
 1683 00cc FFF7FEFF 		bl	Error_Handler
 1684              	.LVL84:
 1685              	.L105:
 532:Core/Src/main.c ****   }
 1686              		.loc 1 532 5 view .LVU556
 1687 00d0 FFF7FEFF 		bl	Error_Handler
 1688              	.LVL85:
 1689              	.L106:
 538:Core/Src/main.c ****   }
 1690              		.loc 1 538 5 view .LVU557
 1691 00d4 FFF7FEFF 		bl	Error_Handler
 1692              	.LVL86:
 1693              	.L107:
 549:Core/Src/main.c ****   }
 1694              		.loc 1 549 5 view .LVU558
 1695 00d8 FFF7FEFF 		bl	Error_Handler
 1696              	.LVL87:
ARM GAS  /tmp/cc8C2055.s 			page 56


 1697              	.L108:
 560:Core/Src/main.c ****   }
 1698              		.loc 1 560 5 view .LVU559
 1699 00dc FFF7FEFF 		bl	Error_Handler
 1700              	.LVL88:
 1701              	.L110:
 1702              		.align	2
 1703              	.L109:
 1704 00e0 00000000 		.word	.LANCHOR4
 1705 00e4 00400140 		.word	1073823744
 1706              		.cfi_endproc
 1707              	.LFE297:
 1709              		.section	.text.MX_TIM7_Init,"ax",%progbits
 1710              		.align	1
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1715              	MX_TIM7_Init:
 1716              	.LFB296:
 462:Core/Src/main.c **** 
 1717              		.loc 1 462 1 view -0
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 16
 1720              		@ frame_needed = 0, uses_anonymous_args = 0
 1721 0000 00B5     		push	{lr}
 1722              		.cfi_def_cfa_offset 4
 1723              		.cfi_offset 14, -4
 1724 0002 85B0     		sub	sp, sp, #20
 1725              		.cfi_def_cfa_offset 24
 468:Core/Src/main.c **** 
 1726              		.loc 1 468 3 view .LVU561
 468:Core/Src/main.c **** 
 1727              		.loc 1 468 27 is_stmt 0 view .LVU562
 1728 0004 0023     		movs	r3, #0
 1729 0006 0193     		str	r3, [sp, #4]
 1730 0008 0293     		str	r3, [sp, #8]
 1731 000a 0393     		str	r3, [sp, #12]
 473:Core/Src/main.c ****   htim7.Init.Prescaler = 4000;
 1732              		.loc 1 473 3 is_stmt 1 view .LVU563
 473:Core/Src/main.c ****   htim7.Init.Prescaler = 4000;
 1733              		.loc 1 473 18 is_stmt 0 view .LVU564
 1734 000c 0E48     		ldr	r0, .L117
 1735 000e 0F4A     		ldr	r2, .L117+4
 1736 0010 0260     		str	r2, [r0]
 474:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1737              		.loc 1 474 3 is_stmt 1 view .LVU565
 474:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1738              		.loc 1 474 24 is_stmt 0 view .LVU566
 1739 0012 4FF47A62 		mov	r2, #4000
 1740 0016 4260     		str	r2, [r0, #4]
 475:Core/Src/main.c ****   htim7.Init.Period = 1200;
 1741              		.loc 1 475 3 is_stmt 1 view .LVU567
 475:Core/Src/main.c ****   htim7.Init.Period = 1200;
 1742              		.loc 1 475 26 is_stmt 0 view .LVU568
 1743 0018 8360     		str	r3, [r0, #8]
 476:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1744              		.loc 1 476 3 is_stmt 1 view .LVU569
ARM GAS  /tmp/cc8C2055.s 			page 57


 476:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1745              		.loc 1 476 21 is_stmt 0 view .LVU570
 1746 001a 4FF49662 		mov	r2, #1200
 1747 001e C260     		str	r2, [r0, #12]
 477:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1748              		.loc 1 477 3 is_stmt 1 view .LVU571
 477:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1749              		.loc 1 477 32 is_stmt 0 view .LVU572
 1750 0020 8361     		str	r3, [r0, #24]
 478:Core/Src/main.c ****   {
 1751              		.loc 1 478 3 is_stmt 1 view .LVU573
 478:Core/Src/main.c ****   {
 1752              		.loc 1 478 7 is_stmt 0 view .LVU574
 1753 0022 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1754              	.LVL89:
 478:Core/Src/main.c ****   {
 1755              		.loc 1 478 6 view .LVU575
 1756 0026 50B9     		cbnz	r0, .L115
 482:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1757              		.loc 1 482 3 is_stmt 1 view .LVU576
 482:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1758              		.loc 1 482 37 is_stmt 0 view .LVU577
 1759 0028 0023     		movs	r3, #0
 1760 002a 0193     		str	r3, [sp, #4]
 483:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 1761              		.loc 1 483 3 is_stmt 1 view .LVU578
 483:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 1762              		.loc 1 483 33 is_stmt 0 view .LVU579
 1763 002c 0393     		str	r3, [sp, #12]
 484:Core/Src/main.c ****   {
 1764              		.loc 1 484 3 is_stmt 1 view .LVU580
 484:Core/Src/main.c ****   {
 1765              		.loc 1 484 7 is_stmt 0 view .LVU581
 1766 002e 01A9     		add	r1, sp, #4
 1767 0030 0548     		ldr	r0, .L117
 1768 0032 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1769              	.LVL90:
 484:Core/Src/main.c ****   {
 1770              		.loc 1 484 6 view .LVU582
 1771 0036 20B9     		cbnz	r0, .L116
 492:Core/Src/main.c **** 
 1772              		.loc 1 492 1 view .LVU583
 1773 0038 05B0     		add	sp, sp, #20
 1774              		.cfi_remember_state
 1775              		.cfi_def_cfa_offset 4
 1776              		@ sp needed
 1777 003a 5DF804FB 		ldr	pc, [sp], #4
 1778              	.L115:
 1779              		.cfi_restore_state
 480:Core/Src/main.c ****   }
 1780              		.loc 1 480 5 is_stmt 1 view .LVU584
 1781 003e FFF7FEFF 		bl	Error_Handler
 1782              	.LVL91:
 1783              	.L116:
 486:Core/Src/main.c ****   }
 1784              		.loc 1 486 5 view .LVU585
 1785 0042 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/cc8C2055.s 			page 58


 1786              	.LVL92:
 1787              	.L118:
 1788 0046 00BF     		.align	2
 1789              	.L117:
 1790 0048 00000000 		.word	.LANCHOR5
 1791 004c 00140040 		.word	1073746944
 1792              		.cfi_endproc
 1793              	.LFE296:
 1795              		.section	.text.SystemClock_Config,"ax",%progbits
 1796              		.align	1
 1797              		.global	SystemClock_Config
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1802              	SystemClock_Config:
 1803              	.LFB292:
 190:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1804              		.loc 1 190 1 view -0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 88
 1807              		@ frame_needed = 0, uses_anonymous_args = 0
 1808 0000 00B5     		push	{lr}
 1809              		.cfi_def_cfa_offset 4
 1810              		.cfi_offset 14, -4
 1811 0002 97B0     		sub	sp, sp, #92
 1812              		.cfi_def_cfa_offset 96
 191:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1813              		.loc 1 191 3 view .LVU587
 191:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1814              		.loc 1 191 22 is_stmt 0 view .LVU588
 1815 0004 4422     		movs	r2, #68
 1816 0006 0021     		movs	r1, #0
 1817 0008 05A8     		add	r0, sp, #20
 1818 000a FFF7FEFF 		bl	memset
 1819              	.LVL93:
 192:Core/Src/main.c **** 
 1820              		.loc 1 192 3 is_stmt 1 view .LVU589
 192:Core/Src/main.c **** 
 1821              		.loc 1 192 22 is_stmt 0 view .LVU590
 1822 000e 0023     		movs	r3, #0
 1823 0010 0093     		str	r3, [sp]
 1824 0012 0193     		str	r3, [sp, #4]
 1825 0014 0293     		str	r3, [sp, #8]
 1826 0016 0393     		str	r3, [sp, #12]
 1827 0018 0493     		str	r3, [sp, #16]
 196:Core/Src/main.c ****   {
 1828              		.loc 1 196 3 is_stmt 1 view .LVU591
 196:Core/Src/main.c ****   {
 1829              		.loc 1 196 7 is_stmt 0 view .LVU592
 1830 001a 4FF40070 		mov	r0, #512
 1831 001e FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 1832              	.LVL94:
 196:Core/Src/main.c ****   {
 1833              		.loc 1 196 6 view .LVU593
 1834 0022 D8B9     		cbnz	r0, .L124
 204:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 1835              		.loc 1 204 3 is_stmt 1 view .LVU594
ARM GAS  /tmp/cc8C2055.s 			page 59


 204:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 1836              		.loc 1 204 36 is_stmt 0 view .LVU595
 1837 0024 1023     		movs	r3, #16
 1838 0026 0593     		str	r3, [sp, #20]
 205:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 1839              		.loc 1 205 3 is_stmt 1 view .LVU596
 205:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 1840              		.loc 1 205 30 is_stmt 0 view .LVU597
 1841 0028 0123     		movs	r3, #1
 1842 002a 0B93     		str	r3, [sp, #44]
 206:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 1843              		.loc 1 206 3 is_stmt 1 view .LVU598
 206:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 1844              		.loc 1 206 41 is_stmt 0 view .LVU599
 1845 002c 0023     		movs	r3, #0
 1846 002e 0C93     		str	r3, [sp, #48]
 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1847              		.loc 1 207 3 is_stmt 1 view .LVU600
 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1848              		.loc 1 207 35 is_stmt 0 view .LVU601
 1849 0030 B022     		movs	r2, #176
 1850 0032 0D92     		str	r2, [sp, #52]
 208:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1851              		.loc 1 208 3 is_stmt 1 view .LVU602
 208:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1852              		.loc 1 208 34 is_stmt 0 view .LVU603
 1853 0034 0F93     		str	r3, [sp, #60]
 209:Core/Src/main.c ****   {
 1854              		.loc 1 209 3 is_stmt 1 view .LVU604
 209:Core/Src/main.c ****   {
 1855              		.loc 1 209 7 is_stmt 0 view .LVU605
 1856 0036 05A8     		add	r0, sp, #20
 1857 0038 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1858              	.LVL95:
 209:Core/Src/main.c ****   {
 1859              		.loc 1 209 6 view .LVU606
 1860 003c 80B9     		cbnz	r0, .L125
 216:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1861              		.loc 1 216 3 is_stmt 1 view .LVU607
 216:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1862              		.loc 1 216 31 is_stmt 0 view .LVU608
 1863 003e 0F23     		movs	r3, #15
 1864 0040 0093     		str	r3, [sp]
 218:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1865              		.loc 1 218 3 is_stmt 1 view .LVU609
 218:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1866              		.loc 1 218 34 is_stmt 0 view .LVU610
 1867 0042 0023     		movs	r3, #0
 1868 0044 0193     		str	r3, [sp, #4]
 219:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1869              		.loc 1 219 3 is_stmt 1 view .LVU611
 219:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1870              		.loc 1 219 35 is_stmt 0 view .LVU612
 1871 0046 0293     		str	r3, [sp, #8]
 220:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1872              		.loc 1 220 3 is_stmt 1 view .LVU613
 220:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /tmp/cc8C2055.s 			page 60


 1873              		.loc 1 220 36 is_stmt 0 view .LVU614
 1874 0048 0393     		str	r3, [sp, #12]
 221:Core/Src/main.c **** 
 1875              		.loc 1 221 3 is_stmt 1 view .LVU615
 221:Core/Src/main.c **** 
 1876              		.loc 1 221 36 is_stmt 0 view .LVU616
 1877 004a 0493     		str	r3, [sp, #16]
 223:Core/Src/main.c ****   {
 1878              		.loc 1 223 3 is_stmt 1 view .LVU617
 223:Core/Src/main.c ****   {
 1879              		.loc 1 223 7 is_stmt 0 view .LVU618
 1880 004c 0221     		movs	r1, #2
 1881 004e 6846     		mov	r0, sp
 1882 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1883              	.LVL96:
 223:Core/Src/main.c ****   {
 1884              		.loc 1 223 6 view .LVU619
 1885 0054 30B9     		cbnz	r0, .L126
 227:Core/Src/main.c **** 
 1886              		.loc 1 227 1 view .LVU620
 1887 0056 17B0     		add	sp, sp, #92
 1888              		.cfi_remember_state
 1889              		.cfi_def_cfa_offset 4
 1890              		@ sp needed
 1891 0058 5DF804FB 		ldr	pc, [sp], #4
 1892              	.L124:
 1893              		.cfi_restore_state
 198:Core/Src/main.c ****   }
 1894              		.loc 1 198 5 is_stmt 1 view .LVU621
 1895 005c FFF7FEFF 		bl	Error_Handler
 1896              	.LVL97:
 1897              	.L125:
 211:Core/Src/main.c ****   }
 1898              		.loc 1 211 5 view .LVU622
 1899 0060 FFF7FEFF 		bl	Error_Handler
 1900              	.LVL98:
 1901              	.L126:
 225:Core/Src/main.c ****   }
 1902              		.loc 1 225 5 view .LVU623
 1903 0064 FFF7FEFF 		bl	Error_Handler
 1904              	.LVL99:
 1905              		.cfi_endproc
 1906              	.LFE292:
 1908              		.section	.text.PeriphCommonClock_Config,"ax",%progbits
 1909              		.align	1
 1910              		.global	PeriphCommonClock_Config
 1911              		.syntax unified
 1912              		.thumb
 1913              		.thumb_func
 1915              	PeriphCommonClock_Config:
 1916              	.LFB293:
 234:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1917              		.loc 1 234 1 view -0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 96
 1920              		@ frame_needed = 0, uses_anonymous_args = 0
 1921 0000 00B5     		push	{lr}
ARM GAS  /tmp/cc8C2055.s 			page 61


 1922              		.cfi_def_cfa_offset 4
 1923              		.cfi_offset 14, -4
 1924 0002 99B0     		sub	sp, sp, #100
 1925              		.cfi_def_cfa_offset 104
 235:Core/Src/main.c **** 
 1926              		.loc 1 235 3 view .LVU625
 235:Core/Src/main.c **** 
 1927              		.loc 1 235 28 is_stmt 0 view .LVU626
 1928 0004 5C22     		movs	r2, #92
 1929 0006 0021     		movs	r1, #0
 1930 0008 01A8     		add	r0, sp, #4
 1931 000a FFF7FEFF 		bl	memset
 1932              	.LVL100:
 239:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 1933              		.loc 1 239 3 is_stmt 1 view .LVU627
 239:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 1934              		.loc 1 239 38 is_stmt 0 view .LVU628
 1935 000e 4FF40423 		mov	r3, #540672
 1936 0012 0193     		str	r3, [sp, #4]
 240:Core/Src/main.c ****   PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 1937              		.loc 1 240 3 is_stmt 1 view .LVU629
 240:Core/Src/main.c ****   PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 1938              		.loc 1 240 35 is_stmt 0 view .LVU630
 1939 0014 4FF08053 		mov	r3, #268435456
 1940 0018 1593     		str	r3, [sp, #84]
 241:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 1941              		.loc 1 241 3 is_stmt 1 view .LVU631
 241:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 1942              		.loc 1 241 38 is_stmt 0 view .LVU632
 1943 001a 4FF08063 		mov	r3, #67108864
 1944 001e 1393     		str	r3, [sp, #76]
 242:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 8;
 1945              		.loc 1 242 3 is_stmt 1 view .LVU633
 242:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 8;
 1946              		.loc 1 242 39 is_stmt 0 view .LVU634
 1947 0020 0123     		movs	r3, #1
 1948 0022 0293     		str	r3, [sp, #8]
 243:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 1949              		.loc 1 243 3 is_stmt 1 view .LVU635
 243:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 1950              		.loc 1 243 34 is_stmt 0 view .LVU636
 1951 0024 0823     		movs	r3, #8
 1952 0026 0393     		str	r3, [sp, #12]
 244:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 1953              		.loc 1 244 3 is_stmt 1 view .LVU637
 244:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 1954              		.loc 1 244 34 is_stmt 0 view .LVU638
 1955 0028 1023     		movs	r3, #16
 1956 002a 0493     		str	r3, [sp, #16]
 245:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 1957              		.loc 1 245 3 is_stmt 1 view .LVU639
 245:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 1958              		.loc 1 245 34 is_stmt 0 view .LVU640
 1959 002c 0723     		movs	r3, #7
 1960 002e 0593     		str	r3, [sp, #20]
 246:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 1961              		.loc 1 246 3 is_stmt 1 view .LVU641
ARM GAS  /tmp/cc8C2055.s 			page 62


 246:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 1962              		.loc 1 246 34 is_stmt 0 view .LVU642
 1963 0030 0223     		movs	r3, #2
 1964 0032 0693     		str	r3, [sp, #24]
 247:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 1965              		.loc 1 247 3 is_stmt 1 view .LVU643
 247:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 1966              		.loc 1 247 34 is_stmt 0 view .LVU644
 1967 0034 0793     		str	r3, [sp, #28]
 248:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1968              		.loc 1 248 3 is_stmt 1 view .LVU645
 248:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1969              		.loc 1 248 41 is_stmt 0 view .LVU646
 1970 0036 4FF08873 		mov	r3, #17825792
 1971 003a 0893     		str	r3, [sp, #32]
 249:Core/Src/main.c ****   {
 1972              		.loc 1 249 3 is_stmt 1 view .LVU647
 249:Core/Src/main.c ****   {
 1973              		.loc 1 249 7 is_stmt 0 view .LVU648
 1974 003c 01A8     		add	r0, sp, #4
 1975 003e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1976              	.LVL101:
 249:Core/Src/main.c ****   {
 1977              		.loc 1 249 6 view .LVU649
 1978 0042 10B9     		cbnz	r0, .L130
 253:Core/Src/main.c **** 
 1979              		.loc 1 253 1 view .LVU650
 1980 0044 19B0     		add	sp, sp, #100
 1981              		.cfi_remember_state
 1982              		.cfi_def_cfa_offset 4
 1983              		@ sp needed
 1984 0046 5DF804FB 		ldr	pc, [sp], #4
 1985              	.L130:
 1986              		.cfi_restore_state
 251:Core/Src/main.c ****   }
 1987              		.loc 1 251 5 is_stmt 1 view .LVU651
 1988 004a FFF7FEFF 		bl	Error_Handler
 1989              	.LVL102:
 1990              		.cfi_endproc
 1991              	.LFE293:
 1993              		.section	.text.main,"ax",%progbits
 1994              		.align	1
 1995              		.global	main
 1996              		.syntax unified
 1997              		.thumb
 1998              		.thumb_func
 2000              	main:
 2001              	.LFB291:
 114:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 2002              		.loc 1 114 1 view -0
 2003              		.cfi_startproc
 2004              		@ Volatile: function does not return.
 2005              		@ args = 0, pretend = 0, frame = 0
 2006              		@ frame_needed = 0, uses_anonymous_args = 0
 2007 0000 08B5     		push	{r3, lr}
 2008              		.cfi_def_cfa_offset 8
 2009              		.cfi_offset 3, -8
ARM GAS  /tmp/cc8C2055.s 			page 63


 2010              		.cfi_offset 14, -4
 122:Core/Src/main.c **** 
 2011              		.loc 1 122 3 view .LVU653
 2012 0002 FFF7FEFF 		bl	HAL_Init
 2013              	.LVL103:
 129:Core/Src/main.c **** 
 2014              		.loc 1 129 3 view .LVU654
 2015 0006 FFF7FEFF 		bl	SystemClock_Config
 2016              	.LVL104:
 132:Core/Src/main.c **** 
 2017              		.loc 1 132 3 view .LVU655
 2018 000a FFF7FEFF 		bl	PeriphCommonClock_Config
 2019              	.LVL105:
 139:Core/Src/main.c ****   MX_DMA_Init();
 2020              		.loc 1 139 3 view .LVU656
 2021 000e FFF7FEFF 		bl	MX_GPIO_Init
 2022              	.LVL106:
 140:Core/Src/main.c ****   MX_ADC1_Init();
 2023              		.loc 1 140 3 view .LVU657
 2024 0012 FFF7FEFF 		bl	MX_DMA_Init
 2025              	.LVL107:
 141:Core/Src/main.c ****   MX_USART1_UART_Init();
 2026              		.loc 1 141 3 view .LVU658
 2027 0016 FFF7FEFF 		bl	MX_ADC1_Init
 2028              	.LVL108:
 142:Core/Src/main.c ****   MX_TIM1_Init();
 2029              		.loc 1 142 3 view .LVU659
 2030 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 2031              	.LVL109:
 143:Core/Src/main.c ****   MX_USART2_UART_Init();
 2032              		.loc 1 143 3 view .LVU660
 2033 001e FFF7FEFF 		bl	MX_TIM1_Init
 2034              	.LVL110:
 144:Core/Src/main.c ****   MX_USART3_UART_Init();
 2035              		.loc 1 144 3 view .LVU661
 2036 0022 FFF7FEFF 		bl	MX_USART2_UART_Init
 2037              	.LVL111:
 145:Core/Src/main.c ****   MX_TIM15_Init();
 2038              		.loc 1 145 3 view .LVU662
 2039 0026 FFF7FEFF 		bl	MX_USART3_UART_Init
 2040              	.LVL112:
 146:Core/Src/main.c ****   MX_TIM7_Init();
 2041              		.loc 1 146 3 view .LVU663
 2042 002a FFF7FEFF 		bl	MX_TIM15_Init
 2043              	.LVL113:
 147:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2044              		.loc 1 147 3 view .LVU664
 2045 002e FFF7FEFF 		bl	MX_TIM7_Init
 2046              	.LVL114:
 150:Core/Src/main.c **** 
 2047              		.loc 1 150 3 view .LVU665
 2048 0032 FFF7FEFF 		bl	initLCD
 2049              	.LVL115:
 152:Core/Src/main.c **** 
 2050              		.loc 1 152 3 view .LVU666
 2051 0036 1E48     		ldr	r0, .L135
 2052 0038 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
ARM GAS  /tmp/cc8C2055.s 			page 64


 2053              	.LVL116:
 154:Core/Src/main.c ****   HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 2054              		.loc 1 154 3 view .LVU667
 2055 003c 1D4C     		ldr	r4, .L135+4
 2056 003e 0821     		movs	r1, #8
 2057 0040 2046     		mov	r0, r4
 2058 0042 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start_IT
 2059              	.LVL117:
 155:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 2060              		.loc 1 155 3 view .LVU668
 2061 0046 1C4D     		ldr	r5, .L135+8
 2062 0048 0021     		movs	r1, #0
 2063 004a 2846     		mov	r0, r5
 2064 004c FFF7FEFF 		bl	HAL_TIM_PWM_Start_IT
 2065              	.LVL118:
 156:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 2066              		.loc 1 156 3 view .LVU669
 156:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 2067              		.loc 1 156 10 is_stmt 0 view .LVU670
 2068 0050 2A68     		ldr	r2, [r5]
 156:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 2069              		.loc 1 156 25 view .LVU671
 2070 0052 1368     		ldr	r3, [r2]
 2071 0054 23F00103 		bic	r3, r3, #1
 2072 0058 1360     		str	r3, [r2]
 157:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 2073              		.loc 1 157 3 is_stmt 1 view .LVU672
 157:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 2074              		.loc 1 157 10 is_stmt 0 view .LVU673
 2075 005a 2268     		ldr	r2, [r4]
 157:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 2076              		.loc 1 157 25 view .LVU674
 2077 005c 1368     		ldr	r3, [r2]
 2078 005e 23F00103 		bic	r3, r3, #1
 2079 0062 1360     		str	r3, [r2]
 158:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 2080              		.loc 1 158 3 is_stmt 1 view .LVU675
 158:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 2081              		.loc 1 158 10 is_stmt 0 view .LVU676
 2082 0064 2A68     		ldr	r2, [r5]
 158:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 2083              		.loc 1 158 25 view .LVU677
 2084 0066 1368     		ldr	r3, [r2]
 2085 0068 23F08003 		bic	r3, r3, #128
 2086 006c 1360     		str	r3, [r2]
 159:Core/Src/main.c **** 
 2087              		.loc 1 159 3 is_stmt 1 view .LVU678
 159:Core/Src/main.c **** 
 2088              		.loc 1 159 10 is_stmt 0 view .LVU679
 2089 006e 2268     		ldr	r2, [r4]
 159:Core/Src/main.c **** 
 2090              		.loc 1 159 25 view .LVU680
 2091 0070 1368     		ldr	r3, [r2]
 2092 0072 23F08003 		bic	r3, r3, #128
 2093 0076 1360     		str	r3, [r2]
 161:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 11);
 2094              		.loc 1 161 3 is_stmt 1 view .LVU681
ARM GAS  /tmp/cc8C2055.s 			page 65


 2095 0078 0822     		movs	r2, #8
 2096 007a 1049     		ldr	r1, .L135+12
 2097 007c 1048     		ldr	r0, .L135+16
 2098 007e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2099              	.LVL119:
 162:Core/Src/main.c **** 
 2100              		.loc 1 162 3 view .LVU682
 2101 0082 0B22     		movs	r2, #11
 2102 0084 0F49     		ldr	r1, .L135+20
 2103 0086 1048     		ldr	r0, .L135+24
 2104 0088 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 2105              	.LVL120:
 2106              	.L132:
 168:Core/Src/main.c ****   {
 2107              		.loc 1 168 3 view .LVU683
 174:Core/Src/main.c **** 
 2108              		.loc 1 174 5 view .LVU684
 2109 008c 0F4C     		ldr	r4, .L135+28
 2110 008e 0B4A     		ldr	r2, .L135+12
 2111 0090 0D49     		ldr	r1, .L135+24
 2112 0092 2046     		mov	r0, r4
 2113 0094 FFF7FEFF 		bl	CNC_HL_Control
 2114              	.LVL121:
 176:Core/Src/main.c ****       hmi_info.HMIupdate = false;
 2115              		.loc 1 176 5 view .LVU685
 176:Core/Src/main.c ****       hmi_info.HMIupdate = false;
 2116              		.loc 1 176 16 is_stmt 0 view .LVU686
 2117 0098 94F83630 		ldrb	r3, [r4, #54]	@ zero_extendqisi2
 176:Core/Src/main.c ****       hmi_info.HMIupdate = false;
 2118              		.loc 1 176 7 view .LVU687
 2119 009c 002B     		cmp	r3, #0
 2120 009e F5D0     		beq	.L132
 177:Core/Src/main.c ****       HMI_Update(&hmi_info);
 2121              		.loc 1 177 7 is_stmt 1 view .LVU688
 177:Core/Src/main.c ****       HMI_Update(&hmi_info);
 2122              		.loc 1 177 26 is_stmt 0 view .LVU689
 2123 00a0 2046     		mov	r0, r4
 2124 00a2 0023     		movs	r3, #0
 2125 00a4 84F83630 		strb	r3, [r4, #54]
 178:Core/Src/main.c ****     }
 2126              		.loc 1 178 7 is_stmt 1 view .LVU690
 2127 00a8 FFF7FEFF 		bl	HMI_Update
 2128              	.LVL122:
 2129 00ac EEE7     		b	.L132
 2130              	.L136:
 2131 00ae 00BF     		.align	2
 2132              	.L135:
 2133 00b0 00000000 		.word	.LANCHOR5
 2134 00b4 00000000 		.word	.LANCHOR3
 2135 00b8 00000000 		.word	.LANCHOR4
 2136 00bc 00000000 		.word	.LANCHOR9
 2137 00c0 00000000 		.word	.LANCHOR6
 2138 00c4 00000000 		.word	.LANCHOR1
 2139 00c8 00000000 		.word	.LANCHOR2
 2140 00cc 00000000 		.word	.LANCHOR0
 2141              		.cfi_endproc
 2142              	.LFE291:
ARM GAS  /tmp/cc8C2055.s 			page 66


 2144              		.global	UART1_rxBuffer
 2145              		.global	adc_data
 2146              		.global	hmi_info
 2147              		.global	hdma_usart1_rx
 2148              		.global	huart3
 2149              		.global	huart2
 2150              		.global	huart1
 2151              		.global	htim15
 2152              		.global	htim7
 2153              		.global	htim1
 2154              		.global	hdma_adc1
 2155              		.global	hadc1
 2156              		.section	.bss.UART1_rxBuffer,"aw",%nobits
 2157              		.align	2
 2158              		.set	.LANCHOR1,. + 0
 2161              	UART1_rxBuffer:
 2162 0000 00000000 		.space	11
 2162      00000000 
 2162      000000
 2163              		.section	.bss.adc_data,"aw",%nobits
 2164              		.align	2
 2165              		.set	.LANCHOR9,. + 0
 2168              	adc_data:
 2169 0000 00000000 		.space	16
 2169      00000000 
 2169      00000000 
 2169      00000000 
 2170              		.section	.bss.hadc1,"aw",%nobits
 2171              		.align	2
 2172              		.set	.LANCHOR6,. + 0
 2175              	hadc1:
 2176 0000 00000000 		.space	100
 2176      00000000 
 2176      00000000 
 2176      00000000 
 2176      00000000 
 2177              		.section	.bss.hdma_adc1,"aw",%nobits
 2178              		.align	2
 2181              	hdma_adc1:
 2182 0000 00000000 		.space	72
 2182      00000000 
 2182      00000000 
 2182      00000000 
 2182      00000000 
 2183              		.section	.bss.hdma_usart1_rx,"aw",%nobits
 2184              		.align	2
 2187              	hdma_usart1_rx:
 2188 0000 00000000 		.space	72
 2188      00000000 
 2188      00000000 
 2188      00000000 
 2188      00000000 
 2189              		.section	.bss.htim1,"aw",%nobits
 2190              		.align	2
 2191              		.set	.LANCHOR3,. + 0
 2194              	htim1:
 2195 0000 00000000 		.space	76
ARM GAS  /tmp/cc8C2055.s 			page 67


 2195      00000000 
 2195      00000000 
 2195      00000000 
 2195      00000000 
 2196              		.section	.bss.htim15,"aw",%nobits
 2197              		.align	2
 2198              		.set	.LANCHOR4,. + 0
 2201              	htim15:
 2202 0000 00000000 		.space	76
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2203              		.section	.bss.htim7,"aw",%nobits
 2204              		.align	2
 2205              		.set	.LANCHOR5,. + 0
 2208              	htim7:
 2209 0000 00000000 		.space	76
 2209      00000000 
 2209      00000000 
 2209      00000000 
 2209      00000000 
 2210              		.section	.bss.huart1,"aw",%nobits
 2211              		.align	2
 2212              		.set	.LANCHOR2,. + 0
 2215              	huart1:
 2216 0000 00000000 		.space	132
 2216      00000000 
 2216      00000000 
 2216      00000000 
 2216      00000000 
 2217              		.section	.bss.huart2,"aw",%nobits
 2218              		.align	2
 2219              		.set	.LANCHOR7,. + 0
 2222              	huart2:
 2223 0000 00000000 		.space	132
 2223      00000000 
 2223      00000000 
 2223      00000000 
 2223      00000000 
 2224              		.section	.bss.huart3,"aw",%nobits
 2225              		.align	2
 2226              		.set	.LANCHOR8,. + 0
 2229              	huart3:
 2230 0000 00000000 		.space	132
 2230      00000000 
 2230      00000000 
 2230      00000000 
 2230      00000000 
 2231              		.section	.data.hmi_info,"aw"
 2232              		.align	2
 2233              		.set	.LANCHOR0,. + 0
 2236              	hmi_info:
 2237 0000 00       		.byte	0
 2238 0001 00       		.byte	0
 2239 0002 02       		.byte	2
 2240 0003 00       		.space	1
ARM GAS  /tmp/cc8C2055.s 			page 68


 2241 0004 B80B0000 		.word	3000
 2242 0008 B80B0000 		.word	3000
 2243 000c E803     		.short	1000
 2244 000e E803     		.short	1000
 2245 0010 00000000 		.space	4
 2246 0014 00000000 		.word	0
 2247 0018 00000000 		.word	0
 2248 001c D0070000 		.word	2000
 2249 0020 0A000000 		.word	10
 2250 0024 0A000000 		.word	10
 2251 0028 2C010000 		.word	300
 2252 002c 2C010000 		.word	300
 2253 0030 00       		.byte	0
 2254 0031 00       		.byte	0
 2255 0032 00       		.space	1
 2256 0033 00       		.byte	0
 2257 0034 00       		.byte	0
 2258 0035 01       		.byte	1
 2259 0036 0000     		.space	2
 2260 0038 00       		.byte	0
 2261 0039 00       		.byte	0
 2262 003a 00       		.byte	0
 2263 003b 00       		.byte	0
 2264 003c FF       		.byte	-1
 2265 003d 000000   		.space	3
 2266 0040 00000000 		.word	htim15
 2267 0044 00000000 		.word	htim1
 2268              		.text
 2269              	.Letext0:
 2270              		.file 3 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l431xx.h"
 2271              		.file 4 "/home/retfie/.config/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 2272              		.file 5 "/home/retfie/.config/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 2273              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 2274              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 2275              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 2276              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
 2277              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 2278              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 2279              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
 2280              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 2281              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 2282              		.file 15 "Core/Inc/cnc_info.h"
 2283              		.file 16 "Core/Inc/lcd.h"
 2284              		.file 17 "Core/Inc/cnc_core.h"
 2285              		.file 18 "Core/Inc/data_parser.h"
 2286              		.file 19 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
 2287              		.file 20 "Core/Inc/main.h"
 2288              		.file 21 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
 2289              		.file 22 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_cortex.h"
 2290              		.file 23 "Core/Inc/hmi.h"
 2291              		.file 24 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 2292              		.file 25 "<built-in>"
ARM GAS  /tmp/cc8C2055.s 			page 69


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc8C2055.s:20     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc8C2055.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc8C2055.s:387    .text.MX_GPIO_Init:00000000000001c0 $d
     /tmp/cc8C2055.s:396    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc8C2055.s:401    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc8C2055.s:446    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cc8C2055.s:451    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc8C2055.s:457    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cc8C2055.s:486    .text.HAL_UART_RxCpltCallback:0000000000000018 $d
     /tmp/cc8C2055.s:493    .text.TIM1_CC_IRQHandler:0000000000000000 $t
     /tmp/cc8C2055.s:499    .text.TIM1_CC_IRQHandler:0000000000000000 TIM1_CC_IRQHandler
     /tmp/cc8C2055.s:525    .text.TIM1_CC_IRQHandler:0000000000000014 $d
     /tmp/cc8C2055.s:531    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000000 $t
     /tmp/cc8C2055.s:537    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000000 TIM1_BRK_TIM15_IRQHandler
     /tmp/cc8C2055.s:563    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000014 $d
     /tmp/cc8C2055.s:569    .text.TIM7_IRQHandler:0000000000000000 $t
     /tmp/cc8C2055.s:575    .text.TIM7_IRQHandler:0000000000000000 TIM7_IRQHandler
     /tmp/cc8C2055.s:599    .text.TIM7_IRQHandler:0000000000000014 $d
     /tmp/cc8C2055.s:605    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/cc8C2055.s:611    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/cc8C2055.s:667    .text.HAL_GPIO_EXTI_Callback:0000000000000030 $d
     /tmp/cc8C2055.s:672    .rodata.Error_Handler.str1.4:0000000000000000 $d
     /tmp/cc8C2055.s:676    .text.Error_Handler:0000000000000000 $t
     /tmp/cc8C2055.s:682    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc8C2055.s:738    .text.Error_Handler:0000000000000030 $d
     /tmp/cc8C2055.s:743    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc8C2055.s:748    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc8C2055.s:1019   .text.MX_ADC1_Init:0000000000000124 $d
     /tmp/cc8C2055.s:1033   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc8C2055.s:1038   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc8C2055.s:1098   .text.MX_USART1_UART_Init:0000000000000030 $d
     /tmp/cc8C2055.s:1104   .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/cc8C2055.s:1109   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/cc8C2055.s:1339   .text.MX_TIM1_Init:00000000000000f4 $d
     /tmp/cc8C2055.s:1345   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc8C2055.s:1350   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc8C2055.s:1410   .text.MX_USART2_UART_Init:0000000000000030 $d
     /tmp/cc8C2055.s:1416   .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/cc8C2055.s:1421   .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/cc8C2055.s:1481   .text.MX_USART3_UART_Init:0000000000000030 $d
     /tmp/cc8C2055.s:1487   .text.MX_TIM15_Init:0000000000000000 $t
     /tmp/cc8C2055.s:1492   .text.MX_TIM15_Init:0000000000000000 MX_TIM15_Init
     /tmp/cc8C2055.s:1704   .text.MX_TIM15_Init:00000000000000e0 $d
     /tmp/cc8C2055.s:1710   .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/cc8C2055.s:1715   .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/cc8C2055.s:1790   .text.MX_TIM7_Init:0000000000000048 $d
     /tmp/cc8C2055.s:1796   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc8C2055.s:1802   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc8C2055.s:1909   .text.PeriphCommonClock_Config:0000000000000000 $t
     /tmp/cc8C2055.s:1915   .text.PeriphCommonClock_Config:0000000000000000 PeriphCommonClock_Config
     /tmp/cc8C2055.s:1994   .text.main:0000000000000000 $t
     /tmp/cc8C2055.s:2000   .text.main:0000000000000000 main
     /tmp/cc8C2055.s:2133   .text.main:00000000000000b0 $d
     /tmp/cc8C2055.s:2161   .bss.UART1_rxBuffer:0000000000000000 UART1_rxBuffer
     /tmp/cc8C2055.s:2168   .bss.adc_data:0000000000000000 adc_data
ARM GAS  /tmp/cc8C2055.s 			page 70


     /tmp/cc8C2055.s:2236   .data.hmi_info:0000000000000000 hmi_info
     /tmp/cc8C2055.s:2187   .bss.hdma_usart1_rx:0000000000000000 hdma_usart1_rx
     /tmp/cc8C2055.s:2229   .bss.huart3:0000000000000000 huart3
     /tmp/cc8C2055.s:2222   .bss.huart2:0000000000000000 huart2
     /tmp/cc8C2055.s:2215   .bss.huart1:0000000000000000 huart1
     /tmp/cc8C2055.s:2201   .bss.htim15:0000000000000000 htim15
     /tmp/cc8C2055.s:2208   .bss.htim7:0000000000000000 htim7
     /tmp/cc8C2055.s:2194   .bss.htim1:0000000000000000 htim1
     /tmp/cc8C2055.s:2181   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/cc8C2055.s:2175   .bss.hadc1:0000000000000000 hadc1
     /tmp/cc8C2055.s:2157   .bss.UART1_rxBuffer:0000000000000000 $d
     /tmp/cc8C2055.s:2164   .bss.adc_data:0000000000000000 $d
     /tmp/cc8C2055.s:2171   .bss.hadc1:0000000000000000 $d
     /tmp/cc8C2055.s:2178   .bss.hdma_adc1:0000000000000000 $d
     /tmp/cc8C2055.s:2184   .bss.hdma_usart1_rx:0000000000000000 $d
     /tmp/cc8C2055.s:2190   .bss.htim1:0000000000000000 $d
     /tmp/cc8C2055.s:2197   .bss.htim15:0000000000000000 $d
     /tmp/cc8C2055.s:2204   .bss.htim7:0000000000000000 $d
     /tmp/cc8C2055.s:2211   .bss.huart1:0000000000000000 $d
     /tmp/cc8C2055.s:2218   .bss.huart2:0000000000000000 $d
     /tmp/cc8C2055.s:2225   .bss.huart3:0000000000000000 $d
     /tmp/cc8C2055.s:2232   .data.hmi_info:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
ReadGcodeDMA
HAL_UART_Receive_DMA
CNC_TIM_Callback_Y
CNC_TIM_Callback_X
CNC_Stop
CNC_Limit_X
CNC_Limit_Y
clearLCD
setCursor
writeLCD
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
initLCD
HAL_TIM_Base_Start_IT
HAL_TIMEx_PWMN_Start_IT
ARM GAS  /tmp/cc8C2055.s 			page 71


HAL_TIM_PWM_Start_IT
HAL_ADC_Start_DMA
CNC_HL_Control
HMI_Update
