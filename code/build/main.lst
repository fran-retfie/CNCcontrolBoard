ARM GAS  /tmp/ccLRjrVN.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_DMA_Init,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MX_DMA_Init:
  26              	.LFB301:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <string.h>
  25:Core/Src/main.c **** #include <stdio.h>
  26:Core/Src/main.c **** #include <stdint.h>
  27:Core/Src/main.c **** #include <stdbool.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** #include "hmi.h"
  30:Core/Src/main.c **** #include "cnc_core.h"
  31:Core/Src/main.c **** #include "lcd.h"
ARM GAS  /tmp/ccLRjrVN.s 			page 2


  32:Core/Src/main.c **** #include "cnc_config.h"
  33:Core/Src/main.c **** /* USER CODE END Includes */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PD */
  42:Core/Src/main.c **** /* USER CODE END PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PM */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  50:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  51:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  54:Core/Src/main.c **** TIM_HandleTypeDef htim7;
  55:Core/Src/main.c **** TIM_HandleTypeDef htim15;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** UART_HandleTypeDef huart1;
  58:Core/Src/main.c **** UART_HandleTypeDef huart2;
  59:Core/Src/main.c **** UART_HandleTypeDef huart3;
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE BEGIN PV */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* USER CODE END PV */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  66:Core/Src/main.c **** void SystemClock_Config(void);
  67:Core/Src/main.c **** void PeriphCommonClock_Config(void);
  68:Core/Src/main.c **** static void MX_GPIO_Init(void);
  69:Core/Src/main.c **** static void MX_DMA_Init(void);
  70:Core/Src/main.c **** static void MX_ADC1_Init(void);
  71:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  72:Core/Src/main.c **** static void MX_TIM1_Init(void);
  73:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  74:Core/Src/main.c **** static void MX_USART3_UART_Init(void);
  75:Core/Src/main.c **** static void MX_TIM15_Init(void);
  76:Core/Src/main.c **** static void MX_TIM7_Init(void);
  77:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* USER CODE END PFP */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  82:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  83:Core/Src/main.c **** HMI_info_t hmi_info = { .mode = HMI_Mode_Zero, 
  84:Core/Src/main.c ****                         .state = HMI_State_Stop, 
  85:Core/Src/main.c ****                         .move = HMI_Move_None,
  86:Core/Src/main.c ****                         .pos = {3000, 3000},
  87:Core/Src/main.c ****                         .pulseLenght = {1000, 1000},
  88:Core/Src/main.c ****                         .pulsesCnt = {0, 0},
ARM GAS  /tmp/ccLRjrVN.s 			page 3


  89:Core/Src/main.c ****                         .commanded.pos = {0, 0},
  90:Core/Src/main.c ****                         .feed = 1000,
  91:Core/Src/main.c ****                         .cnt1 = 0,
  92:Core/Src/main.c ****                         .cnt2 = 0,
  93:Core/Src/main.c ****                         .update = true,
  94:Core/Src/main.c ****                         .zeroed = {false, false},
  95:Core/Src/main.c ****                         .pushbuttons = 0xFFU};
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** volatile uint16_t adc_data[8];
  98:Core/Src/main.c **** /* USER CODE END 0 */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** /**
 101:Core/Src/main.c ****   * @brief  The application entry point.
 102:Core/Src/main.c ****   * @retval int
 103:Core/Src/main.c ****   */
 104:Core/Src/main.c **** int main(void)
 105:Core/Src/main.c **** {
 106:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END 1 */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 113:Core/Src/main.c ****   HAL_Init();
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* USER CODE END Init */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* Configure the system clock */
 120:Core/Src/main.c ****   SystemClock_Config();
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** /* Configure the peripherals common clocks */
 123:Core/Src/main.c ****   PeriphCommonClock_Config();
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /* USER CODE END SysInit */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* Initialize all configured peripherals */
 130:Core/Src/main.c ****   MX_GPIO_Init();
 131:Core/Src/main.c ****   MX_DMA_Init();
 132:Core/Src/main.c ****   MX_ADC1_Init();
 133:Core/Src/main.c ****   MX_USART1_UART_Init();
 134:Core/Src/main.c ****   MX_TIM1_Init();
 135:Core/Src/main.c ****   MX_USART2_UART_Init();
 136:Core/Src/main.c ****   MX_USART3_UART_Init();
 137:Core/Src/main.c ****   MX_TIM15_Init();
 138:Core/Src/main.c ****   MX_TIM7_Init();
 139:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   initLCD();
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim7);
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   HAL_TIMEx_PWMN_Start_IT(&enX_tim, TIM_CHANNEL_3);
ARM GAS  /tmp/ccLRjrVN.s 			page 4


 146:Core/Src/main.c ****   HAL_TIM_PWM_Start_IT(&enY_tim, TIM_CHANNEL_1);
 147:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 148:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 149:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 150:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_data, 8);
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* USER CODE END 2 */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /* Infinite loop */
 157:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 158:Core/Src/main.c ****   while (1)
 159:Core/Src/main.c ****   {
 160:Core/Src/main.c ****     /* USER CODE END WHILE */
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****     CNC_HL_Control(&hmi_info, &enX_tim, &enY_tim, &huart1, adc_data);
 165:Core/Src/main.c ****     //HAL_Delay(1);
 166:Core/Src/main.c ****   }
 167:Core/Src/main.c ****   /* USER CODE END 3 */
 168:Core/Src/main.c **** }
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /**
 171:Core/Src/main.c ****   * @brief System Clock Configuration
 172:Core/Src/main.c ****   * @retval None
 173:Core/Src/main.c ****   */
 174:Core/Src/main.c **** void SystemClock_Config(void)
 175:Core/Src/main.c **** {
 176:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 177:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 180:Core/Src/main.c ****   */
 181:Core/Src/main.c ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 182:Core/Src/main.c ****   {
 183:Core/Src/main.c ****     Error_Handler();
 184:Core/Src/main.c ****   }
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 187:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 190:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 191:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 192:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 193:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 194:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 195:Core/Src/main.c ****   {
 196:Core/Src/main.c ****     Error_Handler();
 197:Core/Src/main.c ****   }
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 200:Core/Src/main.c ****   */
 201:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 202:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/ccLRjrVN.s 			page 5


 203:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 204:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 205:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 206:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 209:Core/Src/main.c ****   {
 210:Core/Src/main.c ****     Error_Handler();
 211:Core/Src/main.c ****   }
 212:Core/Src/main.c **** }
 213:Core/Src/main.c **** 
 214:Core/Src/main.c **** /**
 215:Core/Src/main.c ****   * @brief Peripherals Common Clock Configuration
 216:Core/Src/main.c ****   * @retval None
 217:Core/Src/main.c ****   */
 218:Core/Src/main.c **** void PeriphCommonClock_Config(void)
 219:Core/Src/main.c **** {
 220:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /** Initializes the peripherals clock
 223:Core/Src/main.c ****   */
 224:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
 225:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 226:Core/Src/main.c ****   PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 227:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 228:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 229:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 230:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 231:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 232:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 233:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 234:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 235:Core/Src/main.c ****   {
 236:Core/Src/main.c ****     Error_Handler();
 237:Core/Src/main.c ****   }
 238:Core/Src/main.c **** }
 239:Core/Src/main.c **** 
 240:Core/Src/main.c **** /**
 241:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 242:Core/Src/main.c ****   * @param None
 243:Core/Src/main.c ****   * @retval None
 244:Core/Src/main.c ****   */
 245:Core/Src/main.c **** static void MX_ADC1_Init(void)
 246:Core/Src/main.c **** {
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /** Common config
 259:Core/Src/main.c ****   */
ARM GAS  /tmp/ccLRjrVN.s 			page 6


 260:Core/Src/main.c ****   hadc1.Instance = ADC1;
 261:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 262:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 263:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 264:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 265:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 266:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 267:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 268:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 8;
 269:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 270:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 271:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 272:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 273:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 274:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 275:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 276:Core/Src/main.c ****   {
 277:Core/Src/main.c ****     Error_Handler();
 278:Core/Src/main.c ****   }
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   /** Configure Regular Channel
 281:Core/Src/main.c ****   */
 282:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 283:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 284:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 285:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 286:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 287:Core/Src/main.c ****   sConfig.Offset = 0;
 288:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 289:Core/Src/main.c ****   {
 290:Core/Src/main.c ****     Error_Handler();
 291:Core/Src/main.c ****   }
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /** Configure Regular Channel
 294:Core/Src/main.c ****   */
 295:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_2;
 296:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 297:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 298:Core/Src/main.c ****   {
 299:Core/Src/main.c ****     Error_Handler();
 300:Core/Src/main.c ****   }
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /** Configure Regular Channel
 303:Core/Src/main.c ****   */
 304:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_3;
 305:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 306:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 307:Core/Src/main.c ****   {
 308:Core/Src/main.c ****     Error_Handler();
 309:Core/Src/main.c ****   }
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   /** Configure Regular Channel
 312:Core/Src/main.c ****   */
 313:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 314:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 315:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 316:Core/Src/main.c ****   {
ARM GAS  /tmp/ccLRjrVN.s 			page 7


 317:Core/Src/main.c ****     Error_Handler();
 318:Core/Src/main.c ****   }
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /** Configure Regular Channel
 321:Core/Src/main.c ****   */
 322:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_9;
 323:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 324:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 325:Core/Src/main.c ****   {
 326:Core/Src/main.c ****     Error_Handler();
 327:Core/Src/main.c ****   }
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /** Configure Regular Channel
 330:Core/Src/main.c ****   */
 331:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_10;
 332:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 333:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 334:Core/Src/main.c ****   {
 335:Core/Src/main.c ****     Error_Handler();
 336:Core/Src/main.c ****   }
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   /** Configure Regular Channel
 339:Core/Src/main.c ****   */
 340:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_12;
 341:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_7;
 342:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 343:Core/Src/main.c ****   {
 344:Core/Src/main.c ****     Error_Handler();
 345:Core/Src/main.c ****   }
 346:Core/Src/main.c **** 
 347:Core/Src/main.c ****   /** Configure Regular Channel
 348:Core/Src/main.c ****   */
 349:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_13;
 350:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_8;
 351:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 358:Core/Src/main.c **** 
 359:Core/Src/main.c **** }
 360:Core/Src/main.c **** 
 361:Core/Src/main.c **** /**
 362:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 363:Core/Src/main.c ****   * @param None
 364:Core/Src/main.c ****   * @retval None
 365:Core/Src/main.c ****   */
 366:Core/Src/main.c **** static void MX_TIM1_Init(void)
 367:Core/Src/main.c **** {
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
ARM GAS  /tmp/ccLRjrVN.s 			page 8


 374:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 375:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 376:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 381:Core/Src/main.c ****   htim1.Instance = TIM1;
 382:Core/Src/main.c ****   htim1.Init.Prescaler = 9; //92;
 383:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 384:Core/Src/main.c ****   htim1.Init.Period = 400;
 385:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 386:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 387:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 388:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 389:Core/Src/main.c ****   {
 390:Core/Src/main.c ****     Error_Handler();
 391:Core/Src/main.c ****   }
 392:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 393:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 394:Core/Src/main.c ****   {
 395:Core/Src/main.c ****     Error_Handler();
 396:Core/Src/main.c ****   }
 397:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 398:Core/Src/main.c ****   {
 399:Core/Src/main.c ****     Error_Handler();
 400:Core/Src/main.c ****   }
 401:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 402:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 403:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 404:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 405:Core/Src/main.c ****   {
 406:Core/Src/main.c ****     Error_Handler();
 407:Core/Src/main.c ****   }
 408:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 409:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 410:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 411:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 412:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 413:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 414:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 415:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 416:Core/Src/main.c ****   {
 417:Core/Src/main.c ****     Error_Handler();
 418:Core/Src/main.c ****   }
 419:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 420:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 421:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 422:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 423:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 424:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 425:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 426:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 427:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 428:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 429:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 430:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
ARM GAS  /tmp/ccLRjrVN.s 			page 9


 431:Core/Src/main.c ****   {
 432:Core/Src/main.c ****     Error_Handler();
 433:Core/Src/main.c ****   }
 434:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 437:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 438:Core/Src/main.c **** 
 439:Core/Src/main.c **** }
 440:Core/Src/main.c **** 
 441:Core/Src/main.c **** /**
 442:Core/Src/main.c ****   * @brief TIM7 Initialization Function
 443:Core/Src/main.c ****   * @param None
 444:Core/Src/main.c ****   * @retval None
 445:Core/Src/main.c ****   */
 446:Core/Src/main.c **** static void MX_TIM7_Init(void)
 447:Core/Src/main.c **** {
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 0 */
 450:Core/Src/main.c **** 
 451:Core/Src/main.c ****   /* USER CODE END TIM7_Init 0 */
 452:Core/Src/main.c **** 
 453:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 454:Core/Src/main.c **** 
 455:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 1 */
 456:Core/Src/main.c **** 
 457:Core/Src/main.c ****   /* USER CODE END TIM7_Init 1 */
 458:Core/Src/main.c ****   htim7.Instance = TIM7;
 459:Core/Src/main.c ****   htim7.Init.Prescaler = 666;
 460:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 461:Core/Src/main.c ****   htim7.Init.Period = 600;
 462:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 463:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 464:Core/Src/main.c ****   {
 465:Core/Src/main.c ****     Error_Handler();
 466:Core/Src/main.c ****   }
 467:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 468:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 469:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 470:Core/Src/main.c ****   {
 471:Core/Src/main.c ****     Error_Handler();
 472:Core/Src/main.c ****   }
 473:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 2 */
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   /* USER CODE END TIM7_Init 2 */
 476:Core/Src/main.c **** 
 477:Core/Src/main.c **** }
 478:Core/Src/main.c **** 
 479:Core/Src/main.c **** /**
 480:Core/Src/main.c ****   * @brief TIM15 Initialization Function
 481:Core/Src/main.c ****   * @param None
 482:Core/Src/main.c ****   * @retval None
 483:Core/Src/main.c ****   */
 484:Core/Src/main.c **** static void MX_TIM15_Init(void)
 485:Core/Src/main.c **** {
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****   /* USER CODE BEGIN TIM15_Init 0 */
ARM GAS  /tmp/ccLRjrVN.s 			page 10


 488:Core/Src/main.c **** 
 489:Core/Src/main.c ****   /* USER CODE END TIM15_Init 0 */
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 492:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 493:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 494:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 495:Core/Src/main.c **** 
 496:Core/Src/main.c ****   /* USER CODE BEGIN TIM15_Init 1 */
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****   /* USER CODE END TIM15_Init 1 */
 499:Core/Src/main.c ****   htim15.Instance = TIM15;
 500:Core/Src/main.c ****   htim15.Init.Prescaler = 9; //92;
 501:Core/Src/main.c ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 502:Core/Src/main.c ****   htim15.Init.Period = 400;
 503:Core/Src/main.c ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 504:Core/Src/main.c ****   htim15.Init.RepetitionCounter = 0;
 505:Core/Src/main.c ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 506:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 507:Core/Src/main.c ****   {
 508:Core/Src/main.c ****     Error_Handler();
 509:Core/Src/main.c ****   }
 510:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 511:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 512:Core/Src/main.c ****   {
 513:Core/Src/main.c ****     Error_Handler();
 514:Core/Src/main.c ****   }
 515:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 516:Core/Src/main.c ****   {
 517:Core/Src/main.c ****     Error_Handler();
 518:Core/Src/main.c ****   }
 519:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 520:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 521:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 522:Core/Src/main.c ****   {
 523:Core/Src/main.c ****     Error_Handler();
 524:Core/Src/main.c ****   }
 525:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 526:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 527:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 528:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 529:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 530:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 531:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 532:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 533:Core/Src/main.c ****   {
 534:Core/Src/main.c ****     Error_Handler();
 535:Core/Src/main.c ****   }
 536:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 537:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 538:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 539:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 540:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 541:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 542:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 543:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 544:Core/Src/main.c ****   {
ARM GAS  /tmp/ccLRjrVN.s 			page 11


 545:Core/Src/main.c ****     Error_Handler();
 546:Core/Src/main.c ****   }
 547:Core/Src/main.c ****   /* USER CODE BEGIN TIM15_Init 2 */
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****   /* USER CODE END TIM15_Init 2 */
 550:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim15);
 551:Core/Src/main.c **** 
 552:Core/Src/main.c **** }
 553:Core/Src/main.c **** 
 554:Core/Src/main.c **** /**
 555:Core/Src/main.c ****   * @brief USART1 Initialization Function
 556:Core/Src/main.c ****   * @param None
 557:Core/Src/main.c ****   * @retval None
 558:Core/Src/main.c ****   */
 559:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 560:Core/Src/main.c **** {
 561:Core/Src/main.c **** 
 562:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 563:Core/Src/main.c **** 
 564:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 565:Core/Src/main.c **** 
 566:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 567:Core/Src/main.c **** 
 568:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 569:Core/Src/main.c ****   huart1.Instance = USART1;
 570:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 571:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 572:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 573:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 574:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 575:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 576:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 577:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 578:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 579:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 580:Core/Src/main.c ****   {
 581:Core/Src/main.c ****     Error_Handler();
 582:Core/Src/main.c ****   }
 583:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 584:Core/Src/main.c **** 
 585:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 586:Core/Src/main.c **** 
 587:Core/Src/main.c **** }
 588:Core/Src/main.c **** 
 589:Core/Src/main.c **** /**
 590:Core/Src/main.c ****   * @brief USART2 Initialization Function
 591:Core/Src/main.c ****   * @param None
 592:Core/Src/main.c ****   * @retval None
 593:Core/Src/main.c ****   */
 594:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 595:Core/Src/main.c **** {
 596:Core/Src/main.c **** 
 597:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 598:Core/Src/main.c **** 
 599:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 600:Core/Src/main.c **** 
 601:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
ARM GAS  /tmp/ccLRjrVN.s 			page 12


 602:Core/Src/main.c **** 
 603:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 604:Core/Src/main.c ****   huart2.Instance = USART2;
 605:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 606:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 607:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 608:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 609:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 610:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 611:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 612:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 613:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 614:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 615:Core/Src/main.c ****   {
 616:Core/Src/main.c ****     Error_Handler();
 617:Core/Src/main.c ****   }
 618:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 619:Core/Src/main.c **** 
 620:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 621:Core/Src/main.c **** 
 622:Core/Src/main.c **** }
 623:Core/Src/main.c **** 
 624:Core/Src/main.c **** /**
 625:Core/Src/main.c ****   * @brief USART3 Initialization Function
 626:Core/Src/main.c ****   * @param None
 627:Core/Src/main.c ****   * @retval None
 628:Core/Src/main.c ****   */
 629:Core/Src/main.c **** static void MX_USART3_UART_Init(void)
 630:Core/Src/main.c **** {
 631:Core/Src/main.c **** 
 632:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 0 */
 633:Core/Src/main.c **** 
 634:Core/Src/main.c ****   /* USER CODE END USART3_Init 0 */
 635:Core/Src/main.c **** 
 636:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 1 */
 637:Core/Src/main.c **** 
 638:Core/Src/main.c ****   /* USER CODE END USART3_Init 1 */
 639:Core/Src/main.c ****   huart3.Instance = USART3;
 640:Core/Src/main.c ****   huart3.Init.BaudRate = 115200;
 641:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 642:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 643:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 644:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 645:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 646:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 647:Core/Src/main.c ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 648:Core/Src/main.c ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 649:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 650:Core/Src/main.c ****   {
 651:Core/Src/main.c ****     Error_Handler();
 652:Core/Src/main.c ****   }
 653:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 2 */
 654:Core/Src/main.c **** 
 655:Core/Src/main.c ****   /* USER CODE END USART3_Init 2 */
 656:Core/Src/main.c **** 
 657:Core/Src/main.c **** }
 658:Core/Src/main.c **** 
ARM GAS  /tmp/ccLRjrVN.s 			page 13


 659:Core/Src/main.c **** /**
 660:Core/Src/main.c ****   * Enable DMA controller clock
 661:Core/Src/main.c ****   */
 662:Core/Src/main.c **** static void MX_DMA_Init(void)
 663:Core/Src/main.c **** {
  28              		.loc 1 663 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 82B0     		sub	sp, sp, #8
  34              		.cfi_def_cfa_offset 8
 664:Core/Src/main.c **** 
 665:Core/Src/main.c ****   /* DMA controller clock enable */
 666:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
  35              		.loc 1 666 3 view .LVU1
  36              	.LBB4:
  37              		.loc 1 666 3 view .LVU2
  38              		.loc 1 666 3 view .LVU3
  39 0002 064B     		ldr	r3, .L3
  40 0004 9A6C     		ldr	r2, [r3, #72]
  41 0006 42F00102 		orr	r2, r2, #1
  42 000a 9A64     		str	r2, [r3, #72]
  43              		.loc 1 666 3 view .LVU4
  44 000c 9B6C     		ldr	r3, [r3, #72]
  45 000e 03F00103 		and	r3, r3, #1
  46 0012 0193     		str	r3, [sp, #4]
  47              		.loc 1 666 3 view .LVU5
  48 0014 019B     		ldr	r3, [sp, #4]
  49              	.LBE4:
  50              		.loc 1 666 3 view .LVU6
 667:Core/Src/main.c **** 
 668:Core/Src/main.c **** }
  51              		.loc 1 668 1 is_stmt 0 view .LVU7
  52 0016 02B0     		add	sp, sp, #8
  53              		.cfi_def_cfa_offset 0
  54              		@ sp needed
  55 0018 7047     		bx	lr
  56              	.L4:
  57 001a 00BF     		.align	2
  58              	.L3:
  59 001c 00100240 		.word	1073876992
  60              		.cfi_endproc
  61              	.LFE301:
  63              		.section	.text.MX_GPIO_Init,"ax",%progbits
  64              		.align	1
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  69              	MX_GPIO_Init:
  70              	.LFB302:
 669:Core/Src/main.c **** 
 670:Core/Src/main.c **** /**
 671:Core/Src/main.c ****   * @brief GPIO Initialization Function
 672:Core/Src/main.c ****   * @param None
 673:Core/Src/main.c ****   * @retval None
 674:Core/Src/main.c ****   */
ARM GAS  /tmp/ccLRjrVN.s 			page 14


 675:Core/Src/main.c **** static void MX_GPIO_Init(void)
 676:Core/Src/main.c **** {
  71              		.loc 1 676 1 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 48
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  76              		.cfi_def_cfa_offset 32
  77              		.cfi_offset 4, -32
  78              		.cfi_offset 5, -28
  79              		.cfi_offset 6, -24
  80              		.cfi_offset 7, -20
  81              		.cfi_offset 8, -16
  82              		.cfi_offset 9, -12
  83              		.cfi_offset 10, -8
  84              		.cfi_offset 14, -4
  85 0004 8CB0     		sub	sp, sp, #48
  86              		.cfi_def_cfa_offset 80
 677:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  87              		.loc 1 677 3 view .LVU9
  88              		.loc 1 677 20 is_stmt 0 view .LVU10
  89 0006 0024     		movs	r4, #0
  90 0008 0794     		str	r4, [sp, #28]
  91 000a 0894     		str	r4, [sp, #32]
  92 000c 0994     		str	r4, [sp, #36]
  93 000e 0A94     		str	r4, [sp, #40]
  94 0010 0B94     		str	r4, [sp, #44]
 678:Core/Src/main.c **** 
 679:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 680:Core/Src/main.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
  95              		.loc 1 680 3 is_stmt 1 view .LVU11
  96              	.LBB5:
  97              		.loc 1 680 3 view .LVU12
  98              		.loc 1 680 3 view .LVU13
  99 0012 6B4B     		ldr	r3, .L7
 100 0014 DA6C     		ldr	r2, [r3, #76]
 101 0016 42F01002 		orr	r2, r2, #16
 102 001a DA64     		str	r2, [r3, #76]
 103              		.loc 1 680 3 view .LVU14
 104 001c DA6C     		ldr	r2, [r3, #76]
 105 001e 02F01002 		and	r2, r2, #16
 106 0022 0192     		str	r2, [sp, #4]
 107              		.loc 1 680 3 view .LVU15
 108 0024 019A     		ldr	r2, [sp, #4]
 109              	.LBE5:
 110              		.loc 1 680 3 view .LVU16
 681:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 111              		.loc 1 681 3 view .LVU17
 112              	.LBB6:
 113              		.loc 1 681 3 view .LVU18
 114              		.loc 1 681 3 view .LVU19
 115 0026 DA6C     		ldr	r2, [r3, #76]
 116 0028 42F00402 		orr	r2, r2, #4
 117 002c DA64     		str	r2, [r3, #76]
 118              		.loc 1 681 3 view .LVU20
 119 002e DA6C     		ldr	r2, [r3, #76]
 120 0030 02F00402 		and	r2, r2, #4
ARM GAS  /tmp/ccLRjrVN.s 			page 15


 121 0034 0292     		str	r2, [sp, #8]
 122              		.loc 1 681 3 view .LVU21
 123 0036 029A     		ldr	r2, [sp, #8]
 124              	.LBE6:
 125              		.loc 1 681 3 view .LVU22
 682:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 126              		.loc 1 682 3 view .LVU23
 127              	.LBB7:
 128              		.loc 1 682 3 view .LVU24
 129              		.loc 1 682 3 view .LVU25
 130 0038 DA6C     		ldr	r2, [r3, #76]
 131 003a 42F08002 		orr	r2, r2, #128
 132 003e DA64     		str	r2, [r3, #76]
 133              		.loc 1 682 3 view .LVU26
 134 0040 DA6C     		ldr	r2, [r3, #76]
 135 0042 02F08002 		and	r2, r2, #128
 136 0046 0392     		str	r2, [sp, #12]
 137              		.loc 1 682 3 view .LVU27
 138 0048 039A     		ldr	r2, [sp, #12]
 139              	.LBE7:
 140              		.loc 1 682 3 view .LVU28
 683:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 141              		.loc 1 683 3 view .LVU29
 142              	.LBB8:
 143              		.loc 1 683 3 view .LVU30
 144              		.loc 1 683 3 view .LVU31
 145 004a DA6C     		ldr	r2, [r3, #76]
 146 004c 42F00102 		orr	r2, r2, #1
 147 0050 DA64     		str	r2, [r3, #76]
 148              		.loc 1 683 3 view .LVU32
 149 0052 DA6C     		ldr	r2, [r3, #76]
 150 0054 02F00102 		and	r2, r2, #1
 151 0058 0492     		str	r2, [sp, #16]
 152              		.loc 1 683 3 view .LVU33
 153 005a 049A     		ldr	r2, [sp, #16]
 154              	.LBE8:
 155              		.loc 1 683 3 view .LVU34
 684:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 156              		.loc 1 684 3 view .LVU35
 157              	.LBB9:
 158              		.loc 1 684 3 view .LVU36
 159              		.loc 1 684 3 view .LVU37
 160 005c DA6C     		ldr	r2, [r3, #76]
 161 005e 42F00202 		orr	r2, r2, #2
 162 0062 DA64     		str	r2, [r3, #76]
 163              		.loc 1 684 3 view .LVU38
 164 0064 DA6C     		ldr	r2, [r3, #76]
 165 0066 02F00202 		and	r2, r2, #2
 166 006a 0592     		str	r2, [sp, #20]
 167              		.loc 1 684 3 view .LVU39
 168 006c 059A     		ldr	r2, [sp, #20]
 169              	.LBE9:
 170              		.loc 1 684 3 view .LVU40
 685:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 171              		.loc 1 685 3 view .LVU41
 172              	.LBB10:
 173              		.loc 1 685 3 view .LVU42
ARM GAS  /tmp/ccLRjrVN.s 			page 16


 174              		.loc 1 685 3 view .LVU43
 175 006e DA6C     		ldr	r2, [r3, #76]
 176 0070 42F00802 		orr	r2, r2, #8
 177 0074 DA64     		str	r2, [r3, #76]
 178              		.loc 1 685 3 view .LVU44
 179 0076 DB6C     		ldr	r3, [r3, #76]
 180 0078 03F00803 		and	r3, r3, #8
 181 007c 0693     		str	r3, [sp, #24]
 182              		.loc 1 685 3 view .LVU45
 183 007e 069B     		ldr	r3, [sp, #24]
 184              	.LBE10:
 185              		.loc 1 685 3 view .LVU46
 686:Core/Src/main.c **** 
 687:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 688:Core/Src/main.c ****   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 186              		.loc 1 688 3 view .LVU47
 187 0080 2246     		mov	r2, r4
 188 0082 0221     		movs	r1, #2
 189 0084 4FF09040 		mov	r0, #1207959552
 190 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 191              	.LVL0:
 689:Core/Src/main.c **** 
 690:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 691:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, PO0_Pin|SW2_Pin, GPIO_PIN_RESET);
 192              		.loc 1 691 3 view .LVU48
 193 008c DFF83C91 		ldr	r9, .L7+12
 194 0090 2246     		mov	r2, r4
 195 0092 6021     		movs	r1, #96
 196 0094 4846     		mov	r0, r9
 197 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 198              	.LVL1:
 692:Core/Src/main.c **** 
 693:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 694:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, PO1_Pin|PO2_Pin|DIR3_Pin|D4_Pin
 199              		.loc 1 694 3 view .LVU49
 200 009a 4A4F     		ldr	r7, .L7+4
 201 009c 2246     		mov	r2, r4
 202 009e 41F2C531 		movw	r1, #5061
 203 00a2 3846     		mov	r0, r7
 204 00a4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 205              	.LVL2:
 695:Core/Src/main.c ****                           |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 696:Core/Src/main.c **** 
 697:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 698:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOE, PO3_Pin|O0_Pin|O1_Pin|O2_Pin
 206              		.loc 1 698 3 view .LVU50
 207 00a8 DFF82481 		ldr	r8, .L7+16
 208 00ac 2246     		mov	r2, r4
 209 00ae 4FF68371 		movw	r1, #65411
 210 00b2 4046     		mov	r0, r8
 211 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 212              	.LVL3:
 699:Core/Src/main.c ****                           |O3_Pin|O4_Pin|O5_Pin|O6_Pin
 700:Core/Src/main.c ****                           |O7_Pin|EN_Pin|RS_Pin, GPIO_PIN_RESET);
 701:Core/Src/main.c **** 
 702:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 703:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOD, O10_Pin|O11_Pin|O12_Pin|O13_Pin
ARM GAS  /tmp/ccLRjrVN.s 			page 17


 213              		.loc 1 703 3 view .LVU51
 214 00b8 434E     		ldr	r6, .L7+8
 215 00ba 2246     		mov	r2, r4
 216 00bc 4FF47C51 		mov	r1, #16128
 217 00c0 3046     		mov	r0, r6
 218 00c2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 219              	.LVL4:
 704:Core/Src/main.c ****                           |O14_Pin|O15_Pin, GPIO_PIN_RESET);
 705:Core/Src/main.c **** 
 706:Core/Src/main.c ****   /*Configure GPIO pins : PB7_Pin PB6_Pin PB5_Pin PB4_Pin
 707:Core/Src/main.c ****                            PB3_Pin */
 708:Core/Src/main.c ****   GPIO_InitStruct.Pin = PB7_Pin|PB6_Pin|PB5_Pin|PB4_Pin
 220              		.loc 1 708 3 view .LVU52
 221              		.loc 1 708 23 is_stmt 0 view .LVU53
 222 00c6 7C23     		movs	r3, #124
 223 00c8 0793     		str	r3, [sp, #28]
 709:Core/Src/main.c ****                           |PB3_Pin;
 710:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 224              		.loc 1 710 3 is_stmt 1 view .LVU54
 225              		.loc 1 710 24 is_stmt 0 view .LVU55
 226 00ca 0894     		str	r4, [sp, #32]
 711:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 227              		.loc 1 711 3 is_stmt 1 view .LVU56
 228              		.loc 1 711 24 is_stmt 0 view .LVU57
 229 00cc 0994     		str	r4, [sp, #36]
 712:Core/Src/main.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 230              		.loc 1 712 3 is_stmt 1 view .LVU58
 231 00ce 07A9     		add	r1, sp, #28
 232 00d0 4046     		mov	r0, r8
 233 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 234              	.LVL5:
 713:Core/Src/main.c **** 
 714:Core/Src/main.c ****   /*Configure GPIO pins : PB2_Pin PB1_Pin PB0_Pin */
 715:Core/Src/main.c ****   GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin|PB0_Pin;
 235              		.loc 1 715 3 view .LVU59
 236              		.loc 1 715 23 is_stmt 0 view .LVU60
 237 00d6 4FF46043 		mov	r3, #57344
 238 00da 0793     		str	r3, [sp, #28]
 716:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 239              		.loc 1 716 3 is_stmt 1 view .LVU61
 240              		.loc 1 716 24 is_stmt 0 view .LVU62
 241 00dc 0894     		str	r4, [sp, #32]
 717:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 242              		.loc 1 717 3 is_stmt 1 view .LVU63
 243              		.loc 1 717 24 is_stmt 0 view .LVU64
 244 00de 0994     		str	r4, [sp, #36]
 718:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 245              		.loc 1 718 3 is_stmt 1 view .LVU65
 246 00e0 07A9     		add	r1, sp, #28
 247 00e2 4846     		mov	r0, r9
 248 00e4 FFF7FEFF 		bl	HAL_GPIO_Init
 249              	.LVL6:
 719:Core/Src/main.c **** 
 720:Core/Src/main.c ****   /*Configure GPIO pin : DIR2_Pin */
 721:Core/Src/main.c ****   GPIO_InitStruct.Pin = DIR2_Pin;
 250              		.loc 1 721 3 view .LVU66
 251              		.loc 1 721 23 is_stmt 0 view .LVU67
ARM GAS  /tmp/ccLRjrVN.s 			page 18


 252 00e8 0223     		movs	r3, #2
 253 00ea 0793     		str	r3, [sp, #28]
 722:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 254              		.loc 1 722 3 is_stmt 1 view .LVU68
 255              		.loc 1 722 24 is_stmt 0 view .LVU69
 256 00ec 0125     		movs	r5, #1
 257 00ee 0895     		str	r5, [sp, #32]
 723:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 258              		.loc 1 723 3 is_stmt 1 view .LVU70
 259              		.loc 1 723 24 is_stmt 0 view .LVU71
 260 00f0 0994     		str	r4, [sp, #36]
 724:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 261              		.loc 1 724 3 is_stmt 1 view .LVU72
 262              		.loc 1 724 25 is_stmt 0 view .LVU73
 263 00f2 0A94     		str	r4, [sp, #40]
 725:Core/Src/main.c ****   HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 264              		.loc 1 725 3 is_stmt 1 view .LVU74
 265 00f4 07A9     		add	r1, sp, #28
 266 00f6 4FF09040 		mov	r0, #1207959552
 267 00fa FFF7FEFF 		bl	HAL_GPIO_Init
 268              	.LVL7:
 726:Core/Src/main.c **** 
 727:Core/Src/main.c ****   /*Configure GPIO pin : SWSTOP_Pin */
 728:Core/Src/main.c ****   GPIO_InitStruct.Pin = SWSTOP_Pin;
 269              		.loc 1 728 3 view .LVU75
 270              		.loc 1 728 23 is_stmt 0 view .LVU76
 271 00fe 4023     		movs	r3, #64
 272 0100 0793     		str	r3, [sp, #28]
 729:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 273              		.loc 1 729 3 is_stmt 1 view .LVU77
 274              		.loc 1 729 24 is_stmt 0 view .LVU78
 275 0102 4FF4881A 		mov	r10, #1114112
 276 0106 CDF820A0 		str	r10, [sp, #32]
 730:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 277              		.loc 1 730 3 is_stmt 1 view .LVU79
 278              		.loc 1 730 24 is_stmt 0 view .LVU80
 279 010a 0994     		str	r4, [sp, #36]
 731:Core/Src/main.c ****   HAL_GPIO_Init(SWSTOP_GPIO_Port, &GPIO_InitStruct);
 280              		.loc 1 731 3 is_stmt 1 view .LVU81
 281 010c 07A9     		add	r1, sp, #28
 282 010e 4FF09040 		mov	r0, #1207959552
 283 0112 FFF7FEFF 		bl	HAL_GPIO_Init
 284              	.LVL8:
 732:Core/Src/main.c **** 
 733:Core/Src/main.c ****   /*Configure GPIO pins : PO0_Pin SW2_Pin */
 734:Core/Src/main.c ****   GPIO_InitStruct.Pin = PO0_Pin|SW2_Pin;
 285              		.loc 1 734 3 view .LVU82
 286              		.loc 1 734 23 is_stmt 0 view .LVU83
 287 0116 6023     		movs	r3, #96
 288 0118 0793     		str	r3, [sp, #28]
 735:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 289              		.loc 1 735 3 is_stmt 1 view .LVU84
 290              		.loc 1 735 24 is_stmt 0 view .LVU85
 291 011a 0895     		str	r5, [sp, #32]
 736:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 292              		.loc 1 736 3 is_stmt 1 view .LVU86
 293              		.loc 1 736 24 is_stmt 0 view .LVU87
ARM GAS  /tmp/ccLRjrVN.s 			page 19


 294 011c 0994     		str	r4, [sp, #36]
 737:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 295              		.loc 1 737 3 is_stmt 1 view .LVU88
 296              		.loc 1 737 25 is_stmt 0 view .LVU89
 297 011e 0A94     		str	r4, [sp, #40]
 738:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 298              		.loc 1 738 3 is_stmt 1 view .LVU90
 299 0120 07A9     		add	r1, sp, #28
 300 0122 4846     		mov	r0, r9
 301 0124 FFF7FEFF 		bl	HAL_GPIO_Init
 302              	.LVL9:
 739:Core/Src/main.c **** 
 740:Core/Src/main.c ****   /*Configure GPIO pins : PO1_Pin PO2_Pin DIR3_Pin D4_Pin
 741:Core/Src/main.c ****                            D5_Pin D6_Pin D7_Pin */
 742:Core/Src/main.c ****   GPIO_InitStruct.Pin = PO1_Pin|PO2_Pin|DIR3_Pin|D4_Pin
 303              		.loc 1 742 3 view .LVU91
 304              		.loc 1 742 23 is_stmt 0 view .LVU92
 305 0128 41F2C533 		movw	r3, #5061
 306 012c 0793     		str	r3, [sp, #28]
 743:Core/Src/main.c ****                           |D5_Pin|D6_Pin|D7_Pin;
 744:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 307              		.loc 1 744 3 is_stmt 1 view .LVU93
 308              		.loc 1 744 24 is_stmt 0 view .LVU94
 309 012e 0895     		str	r5, [sp, #32]
 745:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 310              		.loc 1 745 3 is_stmt 1 view .LVU95
 311              		.loc 1 745 24 is_stmt 0 view .LVU96
 312 0130 0994     		str	r4, [sp, #36]
 746:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 313              		.loc 1 746 3 is_stmt 1 view .LVU97
 314              		.loc 1 746 25 is_stmt 0 view .LVU98
 315 0132 0A94     		str	r4, [sp, #40]
 747:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 316              		.loc 1 747 3 is_stmt 1 view .LVU99
 317 0134 07A9     		add	r1, sp, #28
 318 0136 3846     		mov	r0, r7
 319 0138 FFF7FEFF 		bl	HAL_GPIO_Init
 320              	.LVL10:
 748:Core/Src/main.c **** 
 749:Core/Src/main.c ****   /*Configure GPIO pins : PO3_Pin O0_Pin O1_Pin O2_Pin
 750:Core/Src/main.c ****                            O3_Pin O4_Pin O5_Pin O6_Pin
 751:Core/Src/main.c ****                            O7_Pin EN_Pin RS_Pin */
 752:Core/Src/main.c ****   GPIO_InitStruct.Pin = PO3_Pin|O0_Pin|O1_Pin|O2_Pin
 321              		.loc 1 752 3 view .LVU100
 322              		.loc 1 752 23 is_stmt 0 view .LVU101
 323 013c 4FF68373 		movw	r3, #65411
 324 0140 0793     		str	r3, [sp, #28]
 753:Core/Src/main.c ****                           |O3_Pin|O4_Pin|O5_Pin|O6_Pin
 754:Core/Src/main.c ****                           |O7_Pin|EN_Pin|RS_Pin;
 755:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 325              		.loc 1 755 3 is_stmt 1 view .LVU102
 326              		.loc 1 755 24 is_stmt 0 view .LVU103
 327 0142 0895     		str	r5, [sp, #32]
 756:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 328              		.loc 1 756 3 is_stmt 1 view .LVU104
 329              		.loc 1 756 24 is_stmt 0 view .LVU105
 330 0144 0994     		str	r4, [sp, #36]
ARM GAS  /tmp/ccLRjrVN.s 			page 20


 757:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 331              		.loc 1 757 3 is_stmt 1 view .LVU106
 332              		.loc 1 757 25 is_stmt 0 view .LVU107
 333 0146 0A94     		str	r4, [sp, #40]
 758:Core/Src/main.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 334              		.loc 1 758 3 is_stmt 1 view .LVU108
 335 0148 07A9     		add	r1, sp, #28
 336 014a 4046     		mov	r0, r8
 337 014c FFF7FEFF 		bl	HAL_GPIO_Init
 338              	.LVL11:
 759:Core/Src/main.c **** 
 760:Core/Src/main.c ****   /*Configure GPIO pins : O10_Pin O11_Pin O12_Pin O13_Pin
 761:Core/Src/main.c ****                            O14_Pin O15_Pin */
 762:Core/Src/main.c ****   GPIO_InitStruct.Pin = O10_Pin|O11_Pin|O12_Pin|O13_Pin
 339              		.loc 1 762 3 view .LVU109
 340              		.loc 1 762 23 is_stmt 0 view .LVU110
 341 0150 4FF47C53 		mov	r3, #16128
 342 0154 0793     		str	r3, [sp, #28]
 763:Core/Src/main.c ****                           |O14_Pin|O15_Pin;
 764:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 343              		.loc 1 764 3 is_stmt 1 view .LVU111
 344              		.loc 1 764 24 is_stmt 0 view .LVU112
 345 0156 0895     		str	r5, [sp, #32]
 765:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 346              		.loc 1 765 3 is_stmt 1 view .LVU113
 347              		.loc 1 765 24 is_stmt 0 view .LVU114
 348 0158 0994     		str	r4, [sp, #36]
 766:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 349              		.loc 1 766 3 is_stmt 1 view .LVU115
 350              		.loc 1 766 25 is_stmt 0 view .LVU116
 351 015a 0A94     		str	r4, [sp, #40]
 767:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 352              		.loc 1 767 3 is_stmt 1 view .LVU117
 353 015c 07A9     		add	r1, sp, #28
 354 015e 3046     		mov	r0, r6
 355 0160 FFF7FEFF 		bl	HAL_GPIO_Init
 356              	.LVL12:
 768:Core/Src/main.c **** 
 769:Core/Src/main.c ****   /*Configure GPIO pins : SW0_Pin SW1_Pin */
 770:Core/Src/main.c ****   GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin;
 357              		.loc 1 770 3 view .LVU118
 358              		.loc 1 770 23 is_stmt 0 view .LVU119
 359 0164 4FF44043 		mov	r3, #49152
 360 0168 0793     		str	r3, [sp, #28]
 771:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 361              		.loc 1 771 3 is_stmt 1 view .LVU120
 362              		.loc 1 771 24 is_stmt 0 view .LVU121
 363 016a CDF820A0 		str	r10, [sp, #32]
 772:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 364              		.loc 1 772 3 is_stmt 1 view .LVU122
 365              		.loc 1 772 24 is_stmt 0 view .LVU123
 366 016e 0994     		str	r4, [sp, #36]
 773:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 367              		.loc 1 773 3 is_stmt 1 view .LVU124
 368 0170 07A9     		add	r1, sp, #28
 369 0172 3046     		mov	r0, r6
 370 0174 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccLRjrVN.s 			page 21


 371              	.LVL13:
 774:Core/Src/main.c **** 
 775:Core/Src/main.c ****   /*Configure GPIO pins : I0_Pin I1_Pin I2_Pin I3_Pin
 776:Core/Src/main.c ****                            I4_Pin I5_Pin I6_Pin */
 777:Core/Src/main.c ****   GPIO_InitStruct.Pin = I0_Pin|I1_Pin|I2_Pin|I3_Pin
 372              		.loc 1 777 3 view .LVU125
 373              		.loc 1 777 23 is_stmt 0 view .LVU126
 374 0178 FB23     		movs	r3, #251
 375 017a 0793     		str	r3, [sp, #28]
 778:Core/Src/main.c ****                           |I4_Pin|I5_Pin|I6_Pin;
 779:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 376              		.loc 1 779 3 is_stmt 1 view .LVU127
 377              		.loc 1 779 24 is_stmt 0 view .LVU128
 378 017c 0894     		str	r4, [sp, #32]
 780:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 379              		.loc 1 780 3 is_stmt 1 view .LVU129
 380              		.loc 1 780 24 is_stmt 0 view .LVU130
 381 017e 0994     		str	r4, [sp, #36]
 781:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 382              		.loc 1 781 3 is_stmt 1 view .LVU131
 383 0180 07A9     		add	r1, sp, #28
 384 0182 3046     		mov	r0, r6
 385 0184 FFF7FEFF 		bl	HAL_GPIO_Init
 386              	.LVL14:
 782:Core/Src/main.c **** 
 783:Core/Src/main.c ****   /*Configure GPIO pin : I7_Pin */
 784:Core/Src/main.c ****   GPIO_InitStruct.Pin = I7_Pin;
 387              		.loc 1 784 3 view .LVU132
 388              		.loc 1 784 23 is_stmt 0 view .LVU133
 389 0188 0823     		movs	r3, #8
 390 018a 0793     		str	r3, [sp, #28]
 785:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 391              		.loc 1 785 3 is_stmt 1 view .LVU134
 392              		.loc 1 785 24 is_stmt 0 view .LVU135
 393 018c 0894     		str	r4, [sp, #32]
 786:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 394              		.loc 1 786 3 is_stmt 1 view .LVU136
 395              		.loc 1 786 24 is_stmt 0 view .LVU137
 396 018e 0994     		str	r4, [sp, #36]
 787:Core/Src/main.c ****   HAL_GPIO_Init(I7_GPIO_Port, &GPIO_InitStruct);
 397              		.loc 1 787 3 is_stmt 1 view .LVU138
 398 0190 07A9     		add	r1, sp, #28
 399 0192 3846     		mov	r0, r7
 400 0194 FFF7FEFF 		bl	HAL_GPIO_Init
 401              	.LVL15:
 788:Core/Src/main.c **** 
 789:Core/Src/main.c ****   /* EXTI interrupt init*/
 790:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 402              		.loc 1 790 3 view .LVU139
 403 0198 2246     		mov	r2, r4
 404 019a 0F21     		movs	r1, #15
 405 019c 1720     		movs	r0, #23
 406 019e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 407              	.LVL16:
 791:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 408              		.loc 1 791 3 view .LVU140
 409 01a2 1720     		movs	r0, #23
ARM GAS  /tmp/ccLRjrVN.s 			page 22


 410 01a4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 411              	.LVL17:
 792:Core/Src/main.c **** 
 793:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
 412              		.loc 1 793 3 view .LVU141
 413 01a8 2246     		mov	r2, r4
 414 01aa 0E21     		movs	r1, #14
 415 01ac 2820     		movs	r0, #40
 416 01ae FFF7FEFF 		bl	HAL_NVIC_SetPriority
 417              	.LVL18:
 794:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 418              		.loc 1 794 3 view .LVU142
 419 01b2 2820     		movs	r0, #40
 420 01b4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 421              	.LVL19:
 795:Core/Src/main.c **** 
 796:Core/Src/main.c **** }
 422              		.loc 1 796 1 is_stmt 0 view .LVU143
 423 01b8 0CB0     		add	sp, sp, #48
 424              		.cfi_def_cfa_offset 32
 425              		@ sp needed
 426 01ba BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 427              	.L8:
 428 01be 00BF     		.align	2
 429              	.L7:
 430 01c0 00100240 		.word	1073876992
 431 01c4 00040048 		.word	1207960576
 432 01c8 000C0048 		.word	1207962624
 433 01cc 00080048 		.word	1207961600
 434 01d0 00100048 		.word	1207963648
 435              		.cfi_endproc
 436              	.LFE302:
 438              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 439              		.align	1
 440              		.global	HAL_TIM_PeriodElapsedCallback
 441              		.syntax unified
 442              		.thumb
 443              		.thumb_func
 445              	HAL_TIM_PeriodElapsedCallback:
 446              	.LVL20:
 447              	.LFB303:
 797:Core/Src/main.c **** 
 798:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 799:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
 800:Core/Src/main.c **** {
 448              		.loc 1 800 1 is_stmt 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              		.loc 1 800 1 is_stmt 0 view .LVU145
 453 0000 08B5     		push	{r3, lr}
 454              		.cfi_def_cfa_offset 8
 455              		.cfi_offset 3, -8
 456              		.cfi_offset 14, -4
 801:Core/Src/main.c ****   HMI_Update(&hmi_info);
 457              		.loc 1 801 3 is_stmt 1 view .LVU146
 458 0002 0248     		ldr	r0, .L11
ARM GAS  /tmp/ccLRjrVN.s 			page 23


 459              	.LVL21:
 460              		.loc 1 801 3 is_stmt 0 view .LVU147
 461 0004 FFF7FEFF 		bl	HMI_Update
 462              	.LVL22:
 802:Core/Src/main.c **** }
 463              		.loc 1 802 1 view .LVU148
 464 0008 08BD     		pop	{r3, pc}
 465              	.L12:
 466 000a 00BF     		.align	2
 467              	.L11:
 468 000c 00000000 		.word	.LANCHOR0
 469              		.cfi_endproc
 470              	.LFE303:
 472              		.section	.text.HAL_TIM_PWM_PulseFinishedCallback,"ax",%progbits
 473              		.align	1
 474              		.global	HAL_TIM_PWM_PulseFinishedCallback
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 479              	HAL_TIM_PWM_PulseFinishedCallback:
 480              	.LVL23:
 481              	.LFB304:
 803:Core/Src/main.c **** 
 804:Core/Src/main.c **** void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 482              		.loc 1 804 64 is_stmt 1 view -0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		.loc 1 804 64 is_stmt 0 view .LVU150
 487 0000 10B5     		push	{r4, lr}
 488              		.cfi_def_cfa_offset 8
 489              		.cfi_offset 4, -8
 490              		.cfi_offset 14, -4
 491 0002 0446     		mov	r4, r0
 805:Core/Src/main.c ****   if(htim == &enX_tim)
 492              		.loc 1 805 3 is_stmt 1 view .LVU151
 493              		.loc 1 805 5 is_stmt 0 view .LVU152
 494 0004 084B     		ldr	r3, .L19
 495 0006 9842     		cmp	r0, r3
 496 0008 03D0     		beq	.L17
 497              	.LVL24:
 498              	.L14:
 806:Core/Src/main.c ****     CNC_TIM_Callback_X(&hmi_info, &enX_tim);
 807:Core/Src/main.c **** 
 808:Core/Src/main.c ****   if(htim == &enY_tim)
 499              		.loc 1 808 3 is_stmt 1 view .LVU153
 500              		.loc 1 808 5 is_stmt 0 view .LVU154
 501 000a 084B     		ldr	r3, .L19+4
 502 000c 9C42     		cmp	r4, r3
 503 000e 05D0     		beq	.L18
 504              	.L13:
 809:Core/Src/main.c ****     CNC_TIM_Callback_Y(&hmi_info, &enY_tim); 
 810:Core/Src/main.c **** }
 505              		.loc 1 810 1 view .LVU155
 506 0010 10BD     		pop	{r4, pc}
 507              	.LVL25:
 508              	.L17:
ARM GAS  /tmp/ccLRjrVN.s 			page 24


 806:Core/Src/main.c ****     CNC_TIM_Callback_X(&hmi_info, &enX_tim);
 509              		.loc 1 806 5 is_stmt 1 view .LVU156
 510 0012 1946     		mov	r1, r3
 511 0014 0648     		ldr	r0, .L19+8
 512              	.LVL26:
 806:Core/Src/main.c ****     CNC_TIM_Callback_X(&hmi_info, &enX_tim);
 513              		.loc 1 806 5 is_stmt 0 view .LVU157
 514 0016 FFF7FEFF 		bl	CNC_TIM_Callback_X
 515              	.LVL27:
 516 001a F6E7     		b	.L14
 517              	.L18:
 809:Core/Src/main.c ****     CNC_TIM_Callback_Y(&hmi_info, &enY_tim); 
 518              		.loc 1 809 5 is_stmt 1 view .LVU158
 519 001c 1946     		mov	r1, r3
 520 001e 0448     		ldr	r0, .L19+8
 521 0020 FFF7FEFF 		bl	CNC_TIM_Callback_Y
 522              	.LVL28:
 523              		.loc 1 810 1 is_stmt 0 view .LVU159
 524 0024 F4E7     		b	.L13
 525              	.L20:
 526 0026 00BF     		.align	2
 527              	.L19:
 528 0028 00000000 		.word	.LANCHOR1
 529 002c 00000000 		.word	.LANCHOR2
 530 0030 00000000 		.word	.LANCHOR0
 531              		.cfi_endproc
 532              	.LFE304:
 534              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 535              		.align	1
 536              		.global	HAL_GPIO_EXTI_Callback
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 541              	HAL_GPIO_EXTI_Callback:
 542              	.LVL29:
 543              	.LFB305:
 811:Core/Src/main.c **** 
 812:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 813:Core/Src/main.c **** {
 544              		.loc 1 813 1 is_stmt 1 view -0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548              		.loc 1 813 1 is_stmt 0 view .LVU161
 549 0000 10B5     		push	{r4, lr}
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 4, -8
 552              		.cfi_offset 14, -4
 553 0002 0446     		mov	r4, r0
 814:Core/Src/main.c ****   //STOP pressed halt motors and go to STOP mode
 815:Core/Src/main.c ****   if(GPIO_Pin == SWSTOP_Pin) {
 554              		.loc 1 815 3 is_stmt 1 view .LVU162
 555              		.loc 1 815 5 is_stmt 0 view .LVU163
 556 0004 4028     		cmp	r0, #64
 557 0006 06D0     		beq	.L26
 558              	.LVL30:
 559              	.L22:
ARM GAS  /tmp/ccLRjrVN.s 			page 25


 816:Core/Src/main.c ****     CNC_Stop(&hmi_info, &enX_tim, &enY_tim);
 817:Core/Src/main.c ****   }
 818:Core/Src/main.c **** 
 819:Core/Src/main.c ****   if(GPIO_Pin == limitX_Pin) {
 560              		.loc 1 819 3 is_stmt 1 view .LVU164
 561              		.loc 1 819 5 is_stmt 0 view .LVU165
 562 0008 B4F5804F 		cmp	r4, #16384
 563 000c 09D0     		beq	.L27
 564              	.L23:
 820:Core/Src/main.c ****     CNC_Limit_X(&hmi_info, &enX_tim, &enY_tim);
 821:Core/Src/main.c ****   }
 822:Core/Src/main.c **** 
 823:Core/Src/main.c ****   if(GPIO_Pin == limitY_Pin) {
 565              		.loc 1 823 3 is_stmt 1 view .LVU166
 566              		.loc 1 823 5 is_stmt 0 view .LVU167
 567 000e B4F5004F 		cmp	r4, #32768
 568 0012 0CD0     		beq	.L28
 569              	.L21:
 824:Core/Src/main.c ****     CNC_Limit_Y(&hmi_info, &enX_tim, &enY_tim);
 825:Core/Src/main.c ****   }
 826:Core/Src/main.c **** }
 570              		.loc 1 826 1 view .LVU168
 571 0014 10BD     		pop	{r4, pc}
 572              	.LVL31:
 573              	.L26:
 816:Core/Src/main.c ****   }
 574              		.loc 1 816 5 is_stmt 1 view .LVU169
 575 0016 094A     		ldr	r2, .L29
 576 0018 0949     		ldr	r1, .L29+4
 577 001a 0A48     		ldr	r0, .L29+8
 578              	.LVL32:
 816:Core/Src/main.c ****   }
 579              		.loc 1 816 5 is_stmt 0 view .LVU170
 580 001c FFF7FEFF 		bl	CNC_Stop
 581              	.LVL33:
 582 0020 F2E7     		b	.L22
 583              	.L27:
 820:Core/Src/main.c ****     CNC_Limit_X(&hmi_info, &enX_tim, &enY_tim);
 584              		.loc 1 820 5 is_stmt 1 view .LVU171
 585 0022 064A     		ldr	r2, .L29
 586 0024 0649     		ldr	r1, .L29+4
 587 0026 0748     		ldr	r0, .L29+8
 588 0028 FFF7FEFF 		bl	CNC_Limit_X
 589              	.LVL34:
 590 002c EFE7     		b	.L23
 591              	.L28:
 824:Core/Src/main.c ****     CNC_Limit_Y(&hmi_info, &enX_tim, &enY_tim);
 592              		.loc 1 824 5 view .LVU172
 593 002e 034A     		ldr	r2, .L29
 594 0030 0349     		ldr	r1, .L29+4
 595 0032 0448     		ldr	r0, .L29+8
 596 0034 FFF7FEFF 		bl	CNC_Limit_Y
 597              	.LVL35:
 598              		.loc 1 826 1 is_stmt 0 view .LVU173
 599 0038 ECE7     		b	.L21
 600              	.L30:
 601 003a 00BF     		.align	2
ARM GAS  /tmp/ccLRjrVN.s 			page 26


 602              	.L29:
 603 003c 00000000 		.word	.LANCHOR2
 604 0040 00000000 		.word	.LANCHOR1
 605 0044 00000000 		.word	.LANCHOR0
 606              		.cfi_endproc
 607              	.LFE305:
 609              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 610              		.align	2
 611              	.LC0:
 612 0000 71756920 		.ascii	"qui si \303\250\012rotto tutto\000"
 612      736920C3 
 612      A80A726F 
 612      74746F20 
 612      74757474 
 613              		.section	.text.Error_Handler,"ax",%progbits
 614              		.align	1
 615              		.global	Error_Handler
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 620              	Error_Handler:
 621              	.LFB306:
 827:Core/Src/main.c **** /* USER CODE END 4 */
 828:Core/Src/main.c **** 
 829:Core/Src/main.c **** /**
 830:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 831:Core/Src/main.c ****   * @retval None
 832:Core/Src/main.c ****   */
 833:Core/Src/main.c **** void Error_Handler(void)
 834:Core/Src/main.c **** {
 622              		.loc 1 834 1 is_stmt 1 view -0
 623              		.cfi_startproc
 624              		@ Volatile: function does not return.
 625              		@ args = 0, pretend = 0, frame = 24
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627 0000 00B5     		push	{lr}
 628              		.cfi_def_cfa_offset 4
 629              		.cfi_offset 14, -4
 630 0002 87B0     		sub	sp, sp, #28
 631              		.cfi_def_cfa_offset 32
 835:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 836:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 837:Core/Src/main.c ****   __disable_irq();
 632              		.loc 1 837 3 view .LVU175
 633              	.LBB11:
 634              	.LBI11:
 635              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
ARM GAS  /tmp/ccLRjrVN.s 			page 27


  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
ARM GAS  /tmp/ccLRjrVN.s 			page 28


  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccLRjrVN.s 			page 29


 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
ARM GAS  /tmp/ccLRjrVN.s 			page 30


 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 636              		.loc 2 207 27 view .LVU176
 637              	.LBB12:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 638              		.loc 2 209 3 view .LVU177
 639              		.syntax unified
 640              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 641 0004 72B6     		cpsid i
 642              	@ 0 "" 2
 643              		.thumb
 644              		.syntax unified
 645              	.LBE12:
 646              	.LBE11:
 838:Core/Src/main.c ****   char textStr[] = "qui si è\nrotto tutto";
 647              		.loc 1 838 3 view .LVU178
 648              		.loc 1 838 8 is_stmt 0 view .LVU179
 649 0006 EC46     		mov	ip, sp
 650 0008 094C     		ldr	r4, .L34
 651 000a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 652 000c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 653 0010 94E80300 		ldm	r4, {r0, r1}
 654 0014 4CF8040B 		str	r0, [ip], #4
 655 0018 ACF80010 		strh	r1, [ip]	@ movhi
 839:Core/Src/main.c ****   clearLCD();
 656              		.loc 1 839 3 is_stmt 1 view .LVU180
 657 001c FFF7FEFF 		bl	clearLCD
 658              	.LVL36:
 840:Core/Src/main.c ****   setCursor(0,  0);
 659              		.loc 1 840 3 view .LVU181
 660 0020 0021     		movs	r1, #0
 661 0022 0846     		mov	r0, r1
ARM GAS  /tmp/ccLRjrVN.s 			page 31


 662 0024 FFF7FEFF 		bl	setCursor
 663              	.LVL37:
 841:Core/Src/main.c ****   writeLCD(textStr);
 664              		.loc 1 841 3 view .LVU182
 665 0028 6846     		mov	r0, sp
 666 002a FFF7FEFF 		bl	writeLCD
 667              	.LVL38:
 668              	.L32:
 842:Core/Src/main.c ****   while (1)
 669              		.loc 1 842 3 discriminator 1 view .LVU183
 843:Core/Src/main.c ****   {
 844:Core/Src/main.c ****   }
 670              		.loc 1 844 3 discriminator 1 view .LVU184
 842:Core/Src/main.c ****   while (1)
 671              		.loc 1 842 9 discriminator 1 view .LVU185
 672 002e FEE7     		b	.L32
 673              	.L35:
 674              		.align	2
 675              	.L34:
 676 0030 00000000 		.word	.LC0
 677              		.cfi_endproc
 678              	.LFE306:
 680              		.section	.text.MX_ADC1_Init,"ax",%progbits
 681              		.align	1
 682              		.syntax unified
 683              		.thumb
 684              		.thumb_func
 686              	MX_ADC1_Init:
 687              	.LFB294:
 246:Core/Src/main.c **** 
 688              		.loc 1 246 1 view -0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 24
 691              		@ frame_needed = 0, uses_anonymous_args = 0
 692 0000 00B5     		push	{lr}
 693              		.cfi_def_cfa_offset 4
 694              		.cfi_offset 14, -4
 695 0002 87B0     		sub	sp, sp, #28
 696              		.cfi_def_cfa_offset 32
 252:Core/Src/main.c **** 
 697              		.loc 1 252 3 view .LVU187
 252:Core/Src/main.c **** 
 698              		.loc 1 252 26 is_stmt 0 view .LVU188
 699 0004 0023     		movs	r3, #0
 700 0006 0093     		str	r3, [sp]
 701 0008 0193     		str	r3, [sp, #4]
 702 000a 0293     		str	r3, [sp, #8]
 703 000c 0393     		str	r3, [sp, #12]
 704 000e 0493     		str	r3, [sp, #16]
 705 0010 0593     		str	r3, [sp, #20]
 260:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 706              		.loc 1 260 3 is_stmt 1 view .LVU189
 260:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 707              		.loc 1 260 18 is_stmt 0 view .LVU190
 708 0012 4448     		ldr	r0, .L56
 709 0014 444A     		ldr	r2, .L56+4
 710 0016 0260     		str	r2, [r0]
ARM GAS  /tmp/ccLRjrVN.s 			page 32


 261:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 711              		.loc 1 261 3 is_stmt 1 view .LVU191
 261:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 712              		.loc 1 261 29 is_stmt 0 view .LVU192
 713 0018 4360     		str	r3, [r0, #4]
 262:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 714              		.loc 1 262 3 is_stmt 1 view .LVU193
 262:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 715              		.loc 1 262 25 is_stmt 0 view .LVU194
 716 001a 8360     		str	r3, [r0, #8]
 263:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 717              		.loc 1 263 3 is_stmt 1 view .LVU195
 263:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 718              		.loc 1 263 24 is_stmt 0 view .LVU196
 719 001c C360     		str	r3, [r0, #12]
 264:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 720              		.loc 1 264 3 is_stmt 1 view .LVU197
 264:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 721              		.loc 1 264 27 is_stmt 0 view .LVU198
 722 001e 0122     		movs	r2, #1
 723 0020 0261     		str	r2, [r0, #16]
 265:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 724              		.loc 1 265 3 is_stmt 1 view .LVU199
 265:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 725              		.loc 1 265 27 is_stmt 0 view .LVU200
 726 0022 0821     		movs	r1, #8
 727 0024 4161     		str	r1, [r0, #20]
 266:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 728              		.loc 1 266 3 is_stmt 1 view .LVU201
 266:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 729              		.loc 1 266 31 is_stmt 0 view .LVU202
 730 0026 0376     		strb	r3, [r0, #24]
 267:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 8;
 731              		.loc 1 267 3 is_stmt 1 view .LVU203
 267:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 8;
 732              		.loc 1 267 33 is_stmt 0 view .LVU204
 733 0028 4276     		strb	r2, [r0, #25]
 268:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 734              		.loc 1 268 3 is_stmt 1 view .LVU205
 268:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 735              		.loc 1 268 30 is_stmt 0 view .LVU206
 736 002a C161     		str	r1, [r0, #28]
 269:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 737              		.loc 1 269 3 is_stmt 1 view .LVU207
 269:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 738              		.loc 1 269 36 is_stmt 0 view .LVU208
 739 002c 80F82030 		strb	r3, [r0, #32]
 270:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 740              		.loc 1 270 3 is_stmt 1 view .LVU209
 270:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 741              		.loc 1 270 31 is_stmt 0 view .LVU210
 742 0030 8362     		str	r3, [r0, #40]
 271:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 743              		.loc 1 271 3 is_stmt 1 view .LVU211
 271:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 744              		.loc 1 271 35 is_stmt 0 view .LVU212
 745 0032 C362     		str	r3, [r0, #44]
ARM GAS  /tmp/ccLRjrVN.s 			page 33


 272:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 746              		.loc 1 272 3 is_stmt 1 view .LVU213
 272:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 747              		.loc 1 272 36 is_stmt 0 view .LVU214
 748 0034 80F83020 		strb	r2, [r0, #48]
 273:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 749              		.loc 1 273 3 is_stmt 1 view .LVU215
 273:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 750              		.loc 1 273 22 is_stmt 0 view .LVU216
 751 0038 4FF48052 		mov	r2, #4096
 752 003c 4263     		str	r2, [r0, #52]
 274:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 753              		.loc 1 274 3 is_stmt 1 view .LVU217
 274:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 754              		.loc 1 274 31 is_stmt 0 view .LVU218
 755 003e 80F83830 		strb	r3, [r0, #56]
 275:Core/Src/main.c ****   {
 756              		.loc 1 275 3 is_stmt 1 view .LVU219
 275:Core/Src/main.c ****   {
 757              		.loc 1 275 7 is_stmt 0 view .LVU220
 758 0042 FFF7FEFF 		bl	HAL_ADC_Init
 759              	.LVL39:
 275:Core/Src/main.c ****   {
 760              		.loc 1 275 6 view .LVU221
 761 0046 0028     		cmp	r0, #0
 762 0048 5AD1     		bne	.L47
 282:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 763              		.loc 1 282 3 is_stmt 1 view .LVU222
 282:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 764              		.loc 1 282 19 is_stmt 0 view .LVU223
 765 004a 384B     		ldr	r3, .L56+8
 766 004c 0093     		str	r3, [sp]
 283:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 767              		.loc 1 283 3 is_stmt 1 view .LVU224
 283:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 768              		.loc 1 283 16 is_stmt 0 view .LVU225
 769 004e 0623     		movs	r3, #6
 770 0050 0193     		str	r3, [sp, #4]
 284:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 771              		.loc 1 284 3 is_stmt 1 view .LVU226
 284:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 772              		.loc 1 284 24 is_stmt 0 view .LVU227
 773 0052 0723     		movs	r3, #7
 774 0054 0293     		str	r3, [sp, #8]
 285:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 775              		.loc 1 285 3 is_stmt 1 view .LVU228
 285:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 776              		.loc 1 285 22 is_stmt 0 view .LVU229
 777 0056 7F23     		movs	r3, #127
 778 0058 0393     		str	r3, [sp, #12]
 286:Core/Src/main.c ****   sConfig.Offset = 0;
 779              		.loc 1 286 3 is_stmt 1 view .LVU230
 286:Core/Src/main.c ****   sConfig.Offset = 0;
 780              		.loc 1 286 24 is_stmt 0 view .LVU231
 781 005a 0423     		movs	r3, #4
 782 005c 0493     		str	r3, [sp, #16]
 287:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/ccLRjrVN.s 			page 34


 783              		.loc 1 287 3 is_stmt 1 view .LVU232
 287:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 784              		.loc 1 287 18 is_stmt 0 view .LVU233
 785 005e 0023     		movs	r3, #0
 786 0060 0593     		str	r3, [sp, #20]
 288:Core/Src/main.c ****   {
 787              		.loc 1 288 3 is_stmt 1 view .LVU234
 288:Core/Src/main.c ****   {
 788              		.loc 1 288 7 is_stmt 0 view .LVU235
 789 0062 6946     		mov	r1, sp
 790 0064 2F48     		ldr	r0, .L56
 791 0066 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 792              	.LVL40:
 288:Core/Src/main.c ****   {
 793              		.loc 1 288 6 view .LVU236
 794 006a 0028     		cmp	r0, #0
 795 006c 4AD1     		bne	.L48
 295:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 796              		.loc 1 295 3 is_stmt 1 view .LVU237
 295:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 797              		.loc 1 295 19 is_stmt 0 view .LVU238
 798 006e 304B     		ldr	r3, .L56+12
 799 0070 0093     		str	r3, [sp]
 296:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800              		.loc 1 296 3 is_stmt 1 view .LVU239
 296:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801              		.loc 1 296 16 is_stmt 0 view .LVU240
 802 0072 0C23     		movs	r3, #12
 803 0074 0193     		str	r3, [sp, #4]
 297:Core/Src/main.c ****   {
 804              		.loc 1 297 3 is_stmt 1 view .LVU241
 297:Core/Src/main.c ****   {
 805              		.loc 1 297 7 is_stmt 0 view .LVU242
 806 0076 6946     		mov	r1, sp
 807 0078 2A48     		ldr	r0, .L56
 808 007a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 809              	.LVL41:
 297:Core/Src/main.c ****   {
 810              		.loc 1 297 6 view .LVU243
 811 007e 0028     		cmp	r0, #0
 812 0080 42D1     		bne	.L49
 304:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 813              		.loc 1 304 3 is_stmt 1 view .LVU244
 304:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 814              		.loc 1 304 19 is_stmt 0 view .LVU245
 815 0082 2C4B     		ldr	r3, .L56+16
 816 0084 0093     		str	r3, [sp]
 305:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 817              		.loc 1 305 3 is_stmt 1 view .LVU246
 305:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 818              		.loc 1 305 16 is_stmt 0 view .LVU247
 819 0086 1223     		movs	r3, #18
 820 0088 0193     		str	r3, [sp, #4]
 306:Core/Src/main.c ****   {
 821              		.loc 1 306 3 is_stmt 1 view .LVU248
 306:Core/Src/main.c ****   {
 822              		.loc 1 306 7 is_stmt 0 view .LVU249
ARM GAS  /tmp/ccLRjrVN.s 			page 35


 823 008a 6946     		mov	r1, sp
 824 008c 2548     		ldr	r0, .L56
 825 008e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 826              	.LVL42:
 306:Core/Src/main.c ****   {
 827              		.loc 1 306 6 view .LVU250
 828 0092 0028     		cmp	r0, #0
 829 0094 3AD1     		bne	.L50
 313:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 830              		.loc 1 313 3 is_stmt 1 view .LVU251
 313:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 831              		.loc 1 313 19 is_stmt 0 view .LVU252
 832 0096 284B     		ldr	r3, .L56+20
 833 0098 0093     		str	r3, [sp]
 314:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 834              		.loc 1 314 3 is_stmt 1 view .LVU253
 314:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 835              		.loc 1 314 16 is_stmt 0 view .LVU254
 836 009a 1823     		movs	r3, #24
 837 009c 0193     		str	r3, [sp, #4]
 315:Core/Src/main.c ****   {
 838              		.loc 1 315 3 is_stmt 1 view .LVU255
 315:Core/Src/main.c ****   {
 839              		.loc 1 315 7 is_stmt 0 view .LVU256
 840 009e 6946     		mov	r1, sp
 841 00a0 2048     		ldr	r0, .L56
 842 00a2 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 843              	.LVL43:
 315:Core/Src/main.c ****   {
 844              		.loc 1 315 6 view .LVU257
 845 00a6 0028     		cmp	r0, #0
 846 00a8 32D1     		bne	.L51
 322:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 847              		.loc 1 322 3 is_stmt 1 view .LVU258
 322:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 848              		.loc 1 322 19 is_stmt 0 view .LVU259
 849 00aa 244B     		ldr	r3, .L56+24
 850 00ac 0093     		str	r3, [sp]
 323:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 851              		.loc 1 323 3 is_stmt 1 view .LVU260
 323:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 852              		.loc 1 323 16 is_stmt 0 view .LVU261
 853 00ae 4FF48073 		mov	r3, #256
 854 00b2 0193     		str	r3, [sp, #4]
 324:Core/Src/main.c ****   {
 855              		.loc 1 324 3 is_stmt 1 view .LVU262
 324:Core/Src/main.c ****   {
 856              		.loc 1 324 7 is_stmt 0 view .LVU263
 857 00b4 6946     		mov	r1, sp
 858 00b6 1B48     		ldr	r0, .L56
 859 00b8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 860              	.LVL44:
 324:Core/Src/main.c ****   {
 861              		.loc 1 324 6 view .LVU264
 862 00bc 50BB     		cbnz	r0, .L52
 331:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 863              		.loc 1 331 3 is_stmt 1 view .LVU265
ARM GAS  /tmp/ccLRjrVN.s 			page 36


 331:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 864              		.loc 1 331 19 is_stmt 0 view .LVU266
 865 00be 204B     		ldr	r3, .L56+28
 866 00c0 0093     		str	r3, [sp]
 332:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 867              		.loc 1 332 3 is_stmt 1 view .LVU267
 332:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 868              		.loc 1 332 16 is_stmt 0 view .LVU268
 869 00c2 4FF48373 		mov	r3, #262
 870 00c6 0193     		str	r3, [sp, #4]
 333:Core/Src/main.c ****   {
 871              		.loc 1 333 3 is_stmt 1 view .LVU269
 333:Core/Src/main.c ****   {
 872              		.loc 1 333 7 is_stmt 0 view .LVU270
 873 00c8 6946     		mov	r1, sp
 874 00ca 1648     		ldr	r0, .L56
 875 00cc FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 876              	.LVL45:
 333:Core/Src/main.c ****   {
 877              		.loc 1 333 6 view .LVU271
 878 00d0 10BB     		cbnz	r0, .L53
 340:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_7;
 879              		.loc 1 340 3 is_stmt 1 view .LVU272
 340:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_7;
 880              		.loc 1 340 19 is_stmt 0 view .LVU273
 881 00d2 1C4B     		ldr	r3, .L56+32
 882 00d4 0093     		str	r3, [sp]
 341:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 883              		.loc 1 341 3 is_stmt 1 view .LVU274
 341:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 884              		.loc 1 341 16 is_stmt 0 view .LVU275
 885 00d6 4FF48673 		mov	r3, #268
 886 00da 0193     		str	r3, [sp, #4]
 342:Core/Src/main.c ****   {
 887              		.loc 1 342 3 is_stmt 1 view .LVU276
 342:Core/Src/main.c ****   {
 888              		.loc 1 342 7 is_stmt 0 view .LVU277
 889 00dc 6946     		mov	r1, sp
 890 00de 1148     		ldr	r0, .L56
 891 00e0 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 892              	.LVL46:
 342:Core/Src/main.c ****   {
 893              		.loc 1 342 6 view .LVU278
 894 00e4 D0B9     		cbnz	r0, .L54
 349:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_8;
 895              		.loc 1 349 3 is_stmt 1 view .LVU279
 349:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_8;
 896              		.loc 1 349 19 is_stmt 0 view .LVU280
 897 00e6 184B     		ldr	r3, .L56+36
 898 00e8 0093     		str	r3, [sp]
 350:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 899              		.loc 1 350 3 is_stmt 1 view .LVU281
 350:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 900              		.loc 1 350 16 is_stmt 0 view .LVU282
 901 00ea 4FF48973 		mov	r3, #274
 902 00ee 0193     		str	r3, [sp, #4]
 351:Core/Src/main.c ****   {
ARM GAS  /tmp/ccLRjrVN.s 			page 37


 903              		.loc 1 351 3 is_stmt 1 view .LVU283
 351:Core/Src/main.c ****   {
 904              		.loc 1 351 7 is_stmt 0 view .LVU284
 905 00f0 6946     		mov	r1, sp
 906 00f2 0C48     		ldr	r0, .L56
 907 00f4 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 908              	.LVL47:
 351:Core/Src/main.c ****   {
 909              		.loc 1 351 6 view .LVU285
 910 00f8 90B9     		cbnz	r0, .L55
 359:Core/Src/main.c **** 
 911              		.loc 1 359 1 view .LVU286
 912 00fa 07B0     		add	sp, sp, #28
 913              		.cfi_remember_state
 914              		.cfi_def_cfa_offset 4
 915              		@ sp needed
 916 00fc 5DF804FB 		ldr	pc, [sp], #4
 917              	.L47:
 918              		.cfi_restore_state
 277:Core/Src/main.c ****   }
 919              		.loc 1 277 5 is_stmt 1 view .LVU287
 920 0100 FFF7FEFF 		bl	Error_Handler
 921              	.LVL48:
 922              	.L48:
 290:Core/Src/main.c ****   }
 923              		.loc 1 290 5 view .LVU288
 924 0104 FFF7FEFF 		bl	Error_Handler
 925              	.LVL49:
 926              	.L49:
 299:Core/Src/main.c ****   }
 927              		.loc 1 299 5 view .LVU289
 928 0108 FFF7FEFF 		bl	Error_Handler
 929              	.LVL50:
 930              	.L50:
 308:Core/Src/main.c ****   }
 931              		.loc 1 308 5 view .LVU290
 932 010c FFF7FEFF 		bl	Error_Handler
 933              	.LVL51:
 934              	.L51:
 317:Core/Src/main.c ****   }
 935              		.loc 1 317 5 view .LVU291
 936 0110 FFF7FEFF 		bl	Error_Handler
 937              	.LVL52:
 938              	.L52:
 326:Core/Src/main.c ****   }
 939              		.loc 1 326 5 view .LVU292
 940 0114 FFF7FEFF 		bl	Error_Handler
 941              	.LVL53:
 942              	.L53:
 335:Core/Src/main.c ****   }
 943              		.loc 1 335 5 view .LVU293
 944 0118 FFF7FEFF 		bl	Error_Handler
 945              	.LVL54:
 946              	.L54:
 344:Core/Src/main.c ****   }
 947              		.loc 1 344 5 view .LVU294
 948 011c FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccLRjrVN.s 			page 38


 949              	.LVL55:
 950              	.L55:
 353:Core/Src/main.c ****   }
 951              		.loc 1 353 5 view .LVU295
 952 0120 FFF7FEFF 		bl	Error_Handler
 953              	.LVL56:
 954              	.L57:
 955              		.align	2
 956              	.L56:
 957 0124 00000000 		.word	.LANCHOR3
 958 0128 00000450 		.word	1342439424
 959 012c 02003004 		.word	70254594
 960 0130 04006008 		.word	140509188
 961 0134 0800900C 		.word	210763784
 962 0138 1000C010 		.word	281018384
 963 013c 0002B025 		.word	632291840
 964 0140 0004002A 		.word	704644096
 965 0144 00106032 		.word	845156352
 966 0148 00209036 		.word	915415040
 967              		.cfi_endproc
 968              	.LFE294:
 970              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 971              		.align	1
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
 976              	MX_USART1_UART_Init:
 977              	.LFB298:
 560:Core/Src/main.c **** 
 978              		.loc 1 560 1 view -0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982 0000 08B5     		push	{r3, lr}
 983              		.cfi_def_cfa_offset 8
 984              		.cfi_offset 3, -8
 985              		.cfi_offset 14, -4
 569:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 986              		.loc 1 569 3 view .LVU297
 569:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 987              		.loc 1 569 19 is_stmt 0 view .LVU298
 988 0002 0B48     		ldr	r0, .L62
 989 0004 0B4B     		ldr	r3, .L62+4
 990 0006 0360     		str	r3, [r0]
 570:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 991              		.loc 1 570 3 is_stmt 1 view .LVU299
 570:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 992              		.loc 1 570 24 is_stmt 0 view .LVU300
 993 0008 4FF4E133 		mov	r3, #115200
 994 000c 4360     		str	r3, [r0, #4]
 571:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 995              		.loc 1 571 3 is_stmt 1 view .LVU301
 571:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 996              		.loc 1 571 26 is_stmt 0 view .LVU302
 997 000e 0023     		movs	r3, #0
 998 0010 8360     		str	r3, [r0, #8]
 572:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/ccLRjrVN.s 			page 39


 999              		.loc 1 572 3 is_stmt 1 view .LVU303
 572:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1000              		.loc 1 572 24 is_stmt 0 view .LVU304
 1001 0012 C360     		str	r3, [r0, #12]
 573:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1002              		.loc 1 573 3 is_stmt 1 view .LVU305
 573:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1003              		.loc 1 573 22 is_stmt 0 view .LVU306
 1004 0014 0361     		str	r3, [r0, #16]
 574:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1005              		.loc 1 574 3 is_stmt 1 view .LVU307
 574:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1006              		.loc 1 574 20 is_stmt 0 view .LVU308
 1007 0016 0C22     		movs	r2, #12
 1008 0018 4261     		str	r2, [r0, #20]
 575:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1009              		.loc 1 575 3 is_stmt 1 view .LVU309
 575:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1010              		.loc 1 575 25 is_stmt 0 view .LVU310
 1011 001a 8361     		str	r3, [r0, #24]
 576:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1012              		.loc 1 576 3 is_stmt 1 view .LVU311
 576:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1013              		.loc 1 576 28 is_stmt 0 view .LVU312
 1014 001c C361     		str	r3, [r0, #28]
 577:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1015              		.loc 1 577 3 is_stmt 1 view .LVU313
 577:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1016              		.loc 1 577 30 is_stmt 0 view .LVU314
 1017 001e 0362     		str	r3, [r0, #32]
 578:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1018              		.loc 1 578 3 is_stmt 1 view .LVU315
 578:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1019              		.loc 1 578 38 is_stmt 0 view .LVU316
 1020 0020 4362     		str	r3, [r0, #36]
 579:Core/Src/main.c ****   {
 1021              		.loc 1 579 3 is_stmt 1 view .LVU317
 579:Core/Src/main.c ****   {
 1022              		.loc 1 579 7 is_stmt 0 view .LVU318
 1023 0022 FFF7FEFF 		bl	HAL_UART_Init
 1024              	.LVL57:
 579:Core/Src/main.c ****   {
 1025              		.loc 1 579 6 view .LVU319
 1026 0026 00B9     		cbnz	r0, .L61
 587:Core/Src/main.c **** 
 1027              		.loc 1 587 1 view .LVU320
 1028 0028 08BD     		pop	{r3, pc}
 1029              	.L61:
 581:Core/Src/main.c ****   }
 1030              		.loc 1 581 5 is_stmt 1 view .LVU321
 1031 002a FFF7FEFF 		bl	Error_Handler
 1032              	.LVL58:
 1033              	.L63:
 1034 002e 00BF     		.align	2
 1035              	.L62:
 1036 0030 00000000 		.word	.LANCHOR4
 1037 0034 00380140 		.word	1073821696
ARM GAS  /tmp/ccLRjrVN.s 			page 40


 1038              		.cfi_endproc
 1039              	.LFE298:
 1041              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1042              		.align	1
 1043              		.syntax unified
 1044              		.thumb
 1045              		.thumb_func
 1047              	MX_TIM1_Init:
 1048              	.LFB295:
 367:Core/Src/main.c **** 
 1049              		.loc 1 367 1 view -0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 104
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053 0000 10B5     		push	{r4, lr}
 1054              		.cfi_def_cfa_offset 8
 1055              		.cfi_offset 4, -8
 1056              		.cfi_offset 14, -4
 1057 0002 9AB0     		sub	sp, sp, #104
 1058              		.cfi_def_cfa_offset 112
 373:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1059              		.loc 1 373 3 view .LVU323
 373:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1060              		.loc 1 373 26 is_stmt 0 view .LVU324
 1061 0004 0024     		movs	r4, #0
 1062 0006 1694     		str	r4, [sp, #88]
 1063 0008 1794     		str	r4, [sp, #92]
 1064 000a 1894     		str	r4, [sp, #96]
 1065 000c 1994     		str	r4, [sp, #100]
 374:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1066              		.loc 1 374 3 is_stmt 1 view .LVU325
 374:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1067              		.loc 1 374 27 is_stmt 0 view .LVU326
 1068 000e 1394     		str	r4, [sp, #76]
 1069 0010 1494     		str	r4, [sp, #80]
 1070 0012 1594     		str	r4, [sp, #84]
 375:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1071              		.loc 1 375 3 is_stmt 1 view .LVU327
 375:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1072              		.loc 1 375 22 is_stmt 0 view .LVU328
 1073 0014 0C94     		str	r4, [sp, #48]
 1074 0016 0D94     		str	r4, [sp, #52]
 1075 0018 0E94     		str	r4, [sp, #56]
 1076 001a 0F94     		str	r4, [sp, #60]
 1077 001c 1094     		str	r4, [sp, #64]
 1078 001e 1194     		str	r4, [sp, #68]
 1079 0020 1294     		str	r4, [sp, #72]
 376:Core/Src/main.c **** 
 1080              		.loc 1 376 3 is_stmt 1 view .LVU329
 376:Core/Src/main.c **** 
 1081              		.loc 1 376 34 is_stmt 0 view .LVU330
 1082 0022 2C22     		movs	r2, #44
 1083 0024 2146     		mov	r1, r4
 1084 0026 01A8     		add	r0, sp, #4
 1085 0028 FFF7FEFF 		bl	memset
 1086              	.LVL59:
 381:Core/Src/main.c ****   htim1.Init.Prescaler = 9; //92;
ARM GAS  /tmp/ccLRjrVN.s 			page 41


 1087              		.loc 1 381 3 is_stmt 1 view .LVU331
 381:Core/Src/main.c ****   htim1.Init.Prescaler = 9; //92;
 1088              		.loc 1 381 18 is_stmt 0 view .LVU332
 1089 002c 3148     		ldr	r0, .L78
 1090 002e 324B     		ldr	r3, .L78+4
 1091 0030 0360     		str	r3, [r0]
 382:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1092              		.loc 1 382 3 is_stmt 1 view .LVU333
 382:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1093              		.loc 1 382 24 is_stmt 0 view .LVU334
 1094 0032 0923     		movs	r3, #9
 1095 0034 4360     		str	r3, [r0, #4]
 383:Core/Src/main.c ****   htim1.Init.Period = 400;
 1096              		.loc 1 383 3 is_stmt 1 view .LVU335
 383:Core/Src/main.c ****   htim1.Init.Period = 400;
 1097              		.loc 1 383 26 is_stmt 0 view .LVU336
 1098 0036 8460     		str	r4, [r0, #8]
 384:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1099              		.loc 1 384 3 is_stmt 1 view .LVU337
 384:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1100              		.loc 1 384 21 is_stmt 0 view .LVU338
 1101 0038 4FF4C873 		mov	r3, #400
 1102 003c C360     		str	r3, [r0, #12]
 385:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1103              		.loc 1 385 3 is_stmt 1 view .LVU339
 385:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1104              		.loc 1 385 28 is_stmt 0 view .LVU340
 1105 003e 0461     		str	r4, [r0, #16]
 386:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1106              		.loc 1 386 3 is_stmt 1 view .LVU341
 386:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1107              		.loc 1 386 32 is_stmt 0 view .LVU342
 1108 0040 4461     		str	r4, [r0, #20]
 387:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1109              		.loc 1 387 3 is_stmt 1 view .LVU343
 387:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1110              		.loc 1 387 32 is_stmt 0 view .LVU344
 1111 0042 8023     		movs	r3, #128
 1112 0044 8361     		str	r3, [r0, #24]
 388:Core/Src/main.c ****   {
 1113              		.loc 1 388 3 is_stmt 1 view .LVU345
 388:Core/Src/main.c ****   {
 1114              		.loc 1 388 7 is_stmt 0 view .LVU346
 1115 0046 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1116              	.LVL60:
 388:Core/Src/main.c ****   {
 1117              		.loc 1 388 6 view .LVU347
 1118 004a 0028     		cmp	r0, #0
 1119 004c 45D1     		bne	.L72
 392:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1120              		.loc 1 392 3 is_stmt 1 view .LVU348
 392:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1121              		.loc 1 392 34 is_stmt 0 view .LVU349
 1122 004e 4FF48053 		mov	r3, #4096
 1123 0052 1693     		str	r3, [sp, #88]
 393:Core/Src/main.c ****   {
 1124              		.loc 1 393 3 is_stmt 1 view .LVU350
ARM GAS  /tmp/ccLRjrVN.s 			page 42


 393:Core/Src/main.c ****   {
 1125              		.loc 1 393 7 is_stmt 0 view .LVU351
 1126 0054 16A9     		add	r1, sp, #88
 1127 0056 2748     		ldr	r0, .L78
 1128 0058 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1129              	.LVL61:
 393:Core/Src/main.c ****   {
 1130              		.loc 1 393 6 view .LVU352
 1131 005c 0028     		cmp	r0, #0
 1132 005e 3ED1     		bne	.L73
 397:Core/Src/main.c ****   {
 1133              		.loc 1 397 3 is_stmt 1 view .LVU353
 397:Core/Src/main.c ****   {
 1134              		.loc 1 397 7 is_stmt 0 view .LVU354
 1135 0060 2448     		ldr	r0, .L78
 1136 0062 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1137              	.LVL62:
 397:Core/Src/main.c ****   {
 1138              		.loc 1 397 6 view .LVU355
 1139 0066 0028     		cmp	r0, #0
 1140 0068 3BD1     		bne	.L74
 401:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 1141              		.loc 1 401 3 is_stmt 1 view .LVU356
 401:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 1142              		.loc 1 401 37 is_stmt 0 view .LVU357
 1143 006a 2023     		movs	r3, #32
 1144 006c 1393     		str	r3, [sp, #76]
 402:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1145              		.loc 1 402 3 is_stmt 1 view .LVU358
 402:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1146              		.loc 1 402 38 is_stmt 0 view .LVU359
 1147 006e 4FF40013 		mov	r3, #2097152
 1148 0072 1493     		str	r3, [sp, #80]
 403:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1149              		.loc 1 403 3 is_stmt 1 view .LVU360
 403:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1150              		.loc 1 403 33 is_stmt 0 view .LVU361
 1151 0074 0023     		movs	r3, #0
 1152 0076 1593     		str	r3, [sp, #84]
 404:Core/Src/main.c ****   {
 1153              		.loc 1 404 3 is_stmt 1 view .LVU362
 404:Core/Src/main.c ****   {
 1154              		.loc 1 404 7 is_stmt 0 view .LVU363
 1155 0078 13A9     		add	r1, sp, #76
 1156 007a 1E48     		ldr	r0, .L78
 1157 007c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1158              	.LVL63:
 404:Core/Src/main.c ****   {
 1159              		.loc 1 404 6 view .LVU364
 1160 0080 0028     		cmp	r0, #0
 1161 0082 30D1     		bne	.L75
 408:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 1162              		.loc 1 408 3 is_stmt 1 view .LVU365
 408:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 1163              		.loc 1 408 20 is_stmt 0 view .LVU366
 1164 0084 6023     		movs	r3, #96
 1165 0086 0C93     		str	r3, [sp, #48]
ARM GAS  /tmp/ccLRjrVN.s 			page 43


 409:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1166              		.loc 1 409 3 is_stmt 1 view .LVU367
 409:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1167              		.loc 1 409 19 is_stmt 0 view .LVU368
 1168 0088 4FF4FA73 		mov	r3, #500
 1169 008c 0D93     		str	r3, [sp, #52]
 410:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 1170              		.loc 1 410 3 is_stmt 1 view .LVU369
 410:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 1171              		.loc 1 410 24 is_stmt 0 view .LVU370
 1172 008e 0023     		movs	r3, #0
 1173 0090 0E93     		str	r3, [sp, #56]
 411:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1174              		.loc 1 411 3 is_stmt 1 view .LVU371
 411:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1175              		.loc 1 411 25 is_stmt 0 view .LVU372
 1176 0092 0822     		movs	r2, #8
 1177 0094 0F92     		str	r2, [sp, #60]
 412:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1178              		.loc 1 412 3 is_stmt 1 view .LVU373
 412:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1179              		.loc 1 412 24 is_stmt 0 view .LVU374
 1180 0096 1093     		str	r3, [sp, #64]
 413:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1181              		.loc 1 413 3 is_stmt 1 view .LVU375
 413:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1182              		.loc 1 413 25 is_stmt 0 view .LVU376
 1183 0098 1193     		str	r3, [sp, #68]
 414:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1184              		.loc 1 414 3 is_stmt 1 view .LVU377
 414:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1185              		.loc 1 414 26 is_stmt 0 view .LVU378
 1186 009a 1293     		str	r3, [sp, #72]
 415:Core/Src/main.c ****   {
 1187              		.loc 1 415 3 is_stmt 1 view .LVU379
 415:Core/Src/main.c ****   {
 1188              		.loc 1 415 7 is_stmt 0 view .LVU380
 1189 009c 0CA9     		add	r1, sp, #48
 1190 009e 1548     		ldr	r0, .L78
 1191 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1192              	.LVL64:
 415:Core/Src/main.c ****   {
 1193              		.loc 1 415 6 view .LVU381
 1194 00a4 08BB     		cbnz	r0, .L76
 419:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1195              		.loc 1 419 3 is_stmt 1 view .LVU382
 419:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1196              		.loc 1 419 40 is_stmt 0 view .LVU383
 1197 00a6 0023     		movs	r3, #0
 1198 00a8 0193     		str	r3, [sp, #4]
 420:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1199              		.loc 1 420 3 is_stmt 1 view .LVU384
 420:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1200              		.loc 1 420 41 is_stmt 0 view .LVU385
 1201 00aa 0293     		str	r3, [sp, #8]
 421:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1202              		.loc 1 421 3 is_stmt 1 view .LVU386
ARM GAS  /tmp/ccLRjrVN.s 			page 44


 421:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1203              		.loc 1 421 34 is_stmt 0 view .LVU387
 1204 00ac 0393     		str	r3, [sp, #12]
 422:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1205              		.loc 1 422 3 is_stmt 1 view .LVU388
 422:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1206              		.loc 1 422 33 is_stmt 0 view .LVU389
 1207 00ae 0493     		str	r3, [sp, #16]
 423:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1208              		.loc 1 423 3 is_stmt 1 view .LVU390
 423:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1209              		.loc 1 423 35 is_stmt 0 view .LVU391
 1210 00b0 0593     		str	r3, [sp, #20]
 424:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1211              		.loc 1 424 3 is_stmt 1 view .LVU392
 424:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1212              		.loc 1 424 38 is_stmt 0 view .LVU393
 1213 00b2 4FF40052 		mov	r2, #8192
 1214 00b6 0692     		str	r2, [sp, #24]
 425:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 1215              		.loc 1 425 3 is_stmt 1 view .LVU394
 425:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 1216              		.loc 1 425 36 is_stmt 0 view .LVU395
 1217 00b8 0793     		str	r3, [sp, #28]
 426:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1218              		.loc 1 426 3 is_stmt 1 view .LVU396
 426:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1219              		.loc 1 426 36 is_stmt 0 view .LVU397
 1220 00ba 0893     		str	r3, [sp, #32]
 427:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 1221              		.loc 1 427 3 is_stmt 1 view .LVU398
 427:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 1222              		.loc 1 427 39 is_stmt 0 view .LVU399
 1223 00bc 4FF00072 		mov	r2, #33554432
 1224 00c0 0992     		str	r2, [sp, #36]
 428:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1225              		.loc 1 428 3 is_stmt 1 view .LVU400
 428:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1226              		.loc 1 428 37 is_stmt 0 view .LVU401
 1227 00c2 0A93     		str	r3, [sp, #40]
 429:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1228              		.loc 1 429 3 is_stmt 1 view .LVU402
 429:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1229              		.loc 1 429 40 is_stmt 0 view .LVU403
 1230 00c4 0B93     		str	r3, [sp, #44]
 430:Core/Src/main.c ****   {
 1231              		.loc 1 430 3 is_stmt 1 view .LVU404
 430:Core/Src/main.c ****   {
 1232              		.loc 1 430 7 is_stmt 0 view .LVU405
 1233 00c6 01A9     		add	r1, sp, #4
 1234 00c8 0A48     		ldr	r0, .L78
 1235 00ca FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1236              	.LVL65:
 430:Core/Src/main.c ****   {
 1237              		.loc 1 430 6 view .LVU406
 1238 00ce 70B9     		cbnz	r0, .L77
 437:Core/Src/main.c **** 
ARM GAS  /tmp/ccLRjrVN.s 			page 45


 1239              		.loc 1 437 3 is_stmt 1 view .LVU407
 1240 00d0 0848     		ldr	r0, .L78
 1241 00d2 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1242              	.LVL66:
 439:Core/Src/main.c **** 
 1243              		.loc 1 439 1 is_stmt 0 view .LVU408
 1244 00d6 1AB0     		add	sp, sp, #104
 1245              		.cfi_remember_state
 1246              		.cfi_def_cfa_offset 8
 1247              		@ sp needed
 1248 00d8 10BD     		pop	{r4, pc}
 1249              	.L72:
 1250              		.cfi_restore_state
 390:Core/Src/main.c ****   }
 1251              		.loc 1 390 5 is_stmt 1 view .LVU409
 1252 00da FFF7FEFF 		bl	Error_Handler
 1253              	.LVL67:
 1254              	.L73:
 395:Core/Src/main.c ****   }
 1255              		.loc 1 395 5 view .LVU410
 1256 00de FFF7FEFF 		bl	Error_Handler
 1257              	.LVL68:
 1258              	.L74:
 399:Core/Src/main.c ****   }
 1259              		.loc 1 399 5 view .LVU411
 1260 00e2 FFF7FEFF 		bl	Error_Handler
 1261              	.LVL69:
 1262              	.L75:
 406:Core/Src/main.c ****   }
 1263              		.loc 1 406 5 view .LVU412
 1264 00e6 FFF7FEFF 		bl	Error_Handler
 1265              	.LVL70:
 1266              	.L76:
 417:Core/Src/main.c ****   }
 1267              		.loc 1 417 5 view .LVU413
 1268 00ea FFF7FEFF 		bl	Error_Handler
 1269              	.LVL71:
 1270              	.L77:
 432:Core/Src/main.c ****   }
 1271              		.loc 1 432 5 view .LVU414
 1272 00ee FFF7FEFF 		bl	Error_Handler
 1273              	.LVL72:
 1274              	.L79:
 1275 00f2 00BF     		.align	2
 1276              	.L78:
 1277 00f4 00000000 		.word	.LANCHOR1
 1278 00f8 002C0140 		.word	1073818624
 1279              		.cfi_endproc
 1280              	.LFE295:
 1282              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1283              		.align	1
 1284              		.syntax unified
 1285              		.thumb
 1286              		.thumb_func
 1288              	MX_USART2_UART_Init:
 1289              	.LFB299:
 595:Core/Src/main.c **** 
ARM GAS  /tmp/ccLRjrVN.s 			page 46


 1290              		.loc 1 595 1 view -0
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 0
 1293              		@ frame_needed = 0, uses_anonymous_args = 0
 1294 0000 08B5     		push	{r3, lr}
 1295              		.cfi_def_cfa_offset 8
 1296              		.cfi_offset 3, -8
 1297              		.cfi_offset 14, -4
 604:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1298              		.loc 1 604 3 view .LVU416
 604:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1299              		.loc 1 604 19 is_stmt 0 view .LVU417
 1300 0002 0B48     		ldr	r0, .L84
 1301 0004 0B4B     		ldr	r3, .L84+4
 1302 0006 0360     		str	r3, [r0]
 605:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1303              		.loc 1 605 3 is_stmt 1 view .LVU418
 605:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1304              		.loc 1 605 24 is_stmt 0 view .LVU419
 1305 0008 4FF4E133 		mov	r3, #115200
 1306 000c 4360     		str	r3, [r0, #4]
 606:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1307              		.loc 1 606 3 is_stmt 1 view .LVU420
 606:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1308              		.loc 1 606 26 is_stmt 0 view .LVU421
 1309 000e 0023     		movs	r3, #0
 1310 0010 8360     		str	r3, [r0, #8]
 607:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1311              		.loc 1 607 3 is_stmt 1 view .LVU422
 607:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1312              		.loc 1 607 24 is_stmt 0 view .LVU423
 1313 0012 C360     		str	r3, [r0, #12]
 608:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1314              		.loc 1 608 3 is_stmt 1 view .LVU424
 608:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1315              		.loc 1 608 22 is_stmt 0 view .LVU425
 1316 0014 0361     		str	r3, [r0, #16]
 609:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1317              		.loc 1 609 3 is_stmt 1 view .LVU426
 609:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1318              		.loc 1 609 20 is_stmt 0 view .LVU427
 1319 0016 0C22     		movs	r2, #12
 1320 0018 4261     		str	r2, [r0, #20]
 610:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1321              		.loc 1 610 3 is_stmt 1 view .LVU428
 610:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1322              		.loc 1 610 25 is_stmt 0 view .LVU429
 1323 001a 8361     		str	r3, [r0, #24]
 611:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1324              		.loc 1 611 3 is_stmt 1 view .LVU430
 611:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1325              		.loc 1 611 28 is_stmt 0 view .LVU431
 1326 001c C361     		str	r3, [r0, #28]
 612:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1327              		.loc 1 612 3 is_stmt 1 view .LVU432
 612:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1328              		.loc 1 612 30 is_stmt 0 view .LVU433
ARM GAS  /tmp/ccLRjrVN.s 			page 47


 1329 001e 0362     		str	r3, [r0, #32]
 613:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1330              		.loc 1 613 3 is_stmt 1 view .LVU434
 613:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1331              		.loc 1 613 38 is_stmt 0 view .LVU435
 1332 0020 4362     		str	r3, [r0, #36]
 614:Core/Src/main.c ****   {
 1333              		.loc 1 614 3 is_stmt 1 view .LVU436
 614:Core/Src/main.c ****   {
 1334              		.loc 1 614 7 is_stmt 0 view .LVU437
 1335 0022 FFF7FEFF 		bl	HAL_UART_Init
 1336              	.LVL73:
 614:Core/Src/main.c ****   {
 1337              		.loc 1 614 6 view .LVU438
 1338 0026 00B9     		cbnz	r0, .L83
 622:Core/Src/main.c **** 
 1339              		.loc 1 622 1 view .LVU439
 1340 0028 08BD     		pop	{r3, pc}
 1341              	.L83:
 616:Core/Src/main.c ****   }
 1342              		.loc 1 616 5 is_stmt 1 view .LVU440
 1343 002a FFF7FEFF 		bl	Error_Handler
 1344              	.LVL74:
 1345              	.L85:
 1346 002e 00BF     		.align	2
 1347              	.L84:
 1348 0030 00000000 		.word	.LANCHOR5
 1349 0034 00440040 		.word	1073759232
 1350              		.cfi_endproc
 1351              	.LFE299:
 1353              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 1354              		.align	1
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1359              	MX_USART3_UART_Init:
 1360              	.LFB300:
 630:Core/Src/main.c **** 
 1361              		.loc 1 630 1 view -0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365 0000 08B5     		push	{r3, lr}
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 3, -8
 1368              		.cfi_offset 14, -4
 639:Core/Src/main.c ****   huart3.Init.BaudRate = 115200;
 1369              		.loc 1 639 3 view .LVU442
 639:Core/Src/main.c ****   huart3.Init.BaudRate = 115200;
 1370              		.loc 1 639 19 is_stmt 0 view .LVU443
 1371 0002 0B48     		ldr	r0, .L90
 1372 0004 0B4B     		ldr	r3, .L90+4
 1373 0006 0360     		str	r3, [r0]
 640:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1374              		.loc 1 640 3 is_stmt 1 view .LVU444
 640:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1375              		.loc 1 640 24 is_stmt 0 view .LVU445
ARM GAS  /tmp/ccLRjrVN.s 			page 48


 1376 0008 4FF4E133 		mov	r3, #115200
 1377 000c 4360     		str	r3, [r0, #4]
 641:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1378              		.loc 1 641 3 is_stmt 1 view .LVU446
 641:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1379              		.loc 1 641 26 is_stmt 0 view .LVU447
 1380 000e 0023     		movs	r3, #0
 1381 0010 8360     		str	r3, [r0, #8]
 642:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 1382              		.loc 1 642 3 is_stmt 1 view .LVU448
 642:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 1383              		.loc 1 642 24 is_stmt 0 view .LVU449
 1384 0012 C360     		str	r3, [r0, #12]
 643:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1385              		.loc 1 643 3 is_stmt 1 view .LVU450
 643:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1386              		.loc 1 643 22 is_stmt 0 view .LVU451
 1387 0014 0361     		str	r3, [r0, #16]
 644:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1388              		.loc 1 644 3 is_stmt 1 view .LVU452
 644:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1389              		.loc 1 644 20 is_stmt 0 view .LVU453
 1390 0016 0C22     		movs	r2, #12
 1391 0018 4261     		str	r2, [r0, #20]
 645:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1392              		.loc 1 645 3 is_stmt 1 view .LVU454
 645:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1393              		.loc 1 645 25 is_stmt 0 view .LVU455
 1394 001a 8361     		str	r3, [r0, #24]
 646:Core/Src/main.c ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1395              		.loc 1 646 3 is_stmt 1 view .LVU456
 646:Core/Src/main.c ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1396              		.loc 1 646 28 is_stmt 0 view .LVU457
 1397 001c C361     		str	r3, [r0, #28]
 647:Core/Src/main.c ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1398              		.loc 1 647 3 is_stmt 1 view .LVU458
 647:Core/Src/main.c ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1399              		.loc 1 647 30 is_stmt 0 view .LVU459
 1400 001e 0362     		str	r3, [r0, #32]
 648:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1401              		.loc 1 648 3 is_stmt 1 view .LVU460
 648:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1402              		.loc 1 648 38 is_stmt 0 view .LVU461
 1403 0020 4362     		str	r3, [r0, #36]
 649:Core/Src/main.c ****   {
 1404              		.loc 1 649 3 is_stmt 1 view .LVU462
 649:Core/Src/main.c ****   {
 1405              		.loc 1 649 7 is_stmt 0 view .LVU463
 1406 0022 FFF7FEFF 		bl	HAL_UART_Init
 1407              	.LVL75:
 649:Core/Src/main.c ****   {
 1408              		.loc 1 649 6 view .LVU464
 1409 0026 00B9     		cbnz	r0, .L89
 657:Core/Src/main.c **** 
 1410              		.loc 1 657 1 view .LVU465
 1411 0028 08BD     		pop	{r3, pc}
 1412              	.L89:
ARM GAS  /tmp/ccLRjrVN.s 			page 49


 651:Core/Src/main.c ****   }
 1413              		.loc 1 651 5 is_stmt 1 view .LVU466
 1414 002a FFF7FEFF 		bl	Error_Handler
 1415              	.LVL76:
 1416              	.L91:
 1417 002e 00BF     		.align	2
 1418              	.L90:
 1419 0030 00000000 		.word	.LANCHOR6
 1420 0034 00480040 		.word	1073760256
 1421              		.cfi_endproc
 1422              	.LFE300:
 1424              		.section	.text.MX_TIM15_Init,"ax",%progbits
 1425              		.align	1
 1426              		.syntax unified
 1427              		.thumb
 1428              		.thumb_func
 1430              	MX_TIM15_Init:
 1431              	.LFB297:
 485:Core/Src/main.c **** 
 1432              		.loc 1 485 1 view -0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 104
 1435              		@ frame_needed = 0, uses_anonymous_args = 0
 1436 0000 10B5     		push	{r4, lr}
 1437              		.cfi_def_cfa_offset 8
 1438              		.cfi_offset 4, -8
 1439              		.cfi_offset 14, -4
 1440 0002 9AB0     		sub	sp, sp, #104
 1441              		.cfi_def_cfa_offset 112
 491:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1442              		.loc 1 491 3 view .LVU468
 491:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1443              		.loc 1 491 26 is_stmt 0 view .LVU469
 1444 0004 0024     		movs	r4, #0
 1445 0006 1694     		str	r4, [sp, #88]
 1446 0008 1794     		str	r4, [sp, #92]
 1447 000a 1894     		str	r4, [sp, #96]
 1448 000c 1994     		str	r4, [sp, #100]
 492:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1449              		.loc 1 492 3 is_stmt 1 view .LVU470
 492:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1450              		.loc 1 492 27 is_stmt 0 view .LVU471
 1451 000e 1394     		str	r4, [sp, #76]
 1452 0010 1494     		str	r4, [sp, #80]
 1453 0012 1594     		str	r4, [sp, #84]
 493:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1454              		.loc 1 493 3 is_stmt 1 view .LVU472
 493:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1455              		.loc 1 493 22 is_stmt 0 view .LVU473
 1456 0014 0C94     		str	r4, [sp, #48]
 1457 0016 0D94     		str	r4, [sp, #52]
 1458 0018 0E94     		str	r4, [sp, #56]
 1459 001a 0F94     		str	r4, [sp, #60]
 1460 001c 1094     		str	r4, [sp, #64]
 1461 001e 1194     		str	r4, [sp, #68]
 1462 0020 1294     		str	r4, [sp, #72]
 494:Core/Src/main.c **** 
ARM GAS  /tmp/ccLRjrVN.s 			page 50


 1463              		.loc 1 494 3 is_stmt 1 view .LVU474
 494:Core/Src/main.c **** 
 1464              		.loc 1 494 34 is_stmt 0 view .LVU475
 1465 0022 2C22     		movs	r2, #44
 1466 0024 2146     		mov	r1, r4
 1467 0026 01A8     		add	r0, sp, #4
 1468 0028 FFF7FEFF 		bl	memset
 1469              	.LVL77:
 499:Core/Src/main.c ****   htim15.Init.Prescaler = 9; //92;
 1470              		.loc 1 499 3 is_stmt 1 view .LVU476
 499:Core/Src/main.c ****   htim15.Init.Prescaler = 9; //92;
 1471              		.loc 1 499 19 is_stmt 0 view .LVU477
 1472 002c 2C48     		ldr	r0, .L106
 1473 002e 2D4B     		ldr	r3, .L106+4
 1474 0030 0360     		str	r3, [r0]
 500:Core/Src/main.c ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1475              		.loc 1 500 3 is_stmt 1 view .LVU478
 500:Core/Src/main.c ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1476              		.loc 1 500 25 is_stmt 0 view .LVU479
 1477 0032 0923     		movs	r3, #9
 1478 0034 4360     		str	r3, [r0, #4]
 501:Core/Src/main.c ****   htim15.Init.Period = 400;
 1479              		.loc 1 501 3 is_stmt 1 view .LVU480
 501:Core/Src/main.c ****   htim15.Init.Period = 400;
 1480              		.loc 1 501 27 is_stmt 0 view .LVU481
 1481 0036 8460     		str	r4, [r0, #8]
 502:Core/Src/main.c ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1482              		.loc 1 502 3 is_stmt 1 view .LVU482
 502:Core/Src/main.c ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1483              		.loc 1 502 22 is_stmt 0 view .LVU483
 1484 0038 4FF4C873 		mov	r3, #400
 1485 003c C360     		str	r3, [r0, #12]
 503:Core/Src/main.c ****   htim15.Init.RepetitionCounter = 0;
 1486              		.loc 1 503 3 is_stmt 1 view .LVU484
 503:Core/Src/main.c ****   htim15.Init.RepetitionCounter = 0;
 1487              		.loc 1 503 29 is_stmt 0 view .LVU485
 1488 003e 0461     		str	r4, [r0, #16]
 504:Core/Src/main.c ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1489              		.loc 1 504 3 is_stmt 1 view .LVU486
 504:Core/Src/main.c ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1490              		.loc 1 504 33 is_stmt 0 view .LVU487
 1491 0040 4461     		str	r4, [r0, #20]
 505:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1492              		.loc 1 505 3 is_stmt 1 view .LVU488
 505:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1493              		.loc 1 505 33 is_stmt 0 view .LVU489
 1494 0042 8023     		movs	r3, #128
 1495 0044 8361     		str	r3, [r0, #24]
 506:Core/Src/main.c ****   {
 1496              		.loc 1 506 3 is_stmt 1 view .LVU490
 506:Core/Src/main.c ****   {
 1497              		.loc 1 506 7 is_stmt 0 view .LVU491
 1498 0046 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1499              	.LVL78:
 506:Core/Src/main.c ****   {
 1500              		.loc 1 506 6 view .LVU492
 1501 004a 0028     		cmp	r0, #0
ARM GAS  /tmp/ccLRjrVN.s 			page 51


 1502 004c 3BD1     		bne	.L100
 510:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1503              		.loc 1 510 3 is_stmt 1 view .LVU493
 510:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1504              		.loc 1 510 34 is_stmt 0 view .LVU494
 1505 004e 4FF48053 		mov	r3, #4096
 1506 0052 1693     		str	r3, [sp, #88]
 511:Core/Src/main.c ****   {
 1507              		.loc 1 511 3 is_stmt 1 view .LVU495
 511:Core/Src/main.c ****   {
 1508              		.loc 1 511 7 is_stmt 0 view .LVU496
 1509 0054 16A9     		add	r1, sp, #88
 1510 0056 2248     		ldr	r0, .L106
 1511 0058 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1512              	.LVL79:
 511:Core/Src/main.c ****   {
 1513              		.loc 1 511 6 view .LVU497
 1514 005c 0028     		cmp	r0, #0
 1515 005e 34D1     		bne	.L101
 515:Core/Src/main.c ****   {
 1516              		.loc 1 515 3 is_stmt 1 view .LVU498
 515:Core/Src/main.c ****   {
 1517              		.loc 1 515 7 is_stmt 0 view .LVU499
 1518 0060 1F48     		ldr	r0, .L106
 1519 0062 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1520              	.LVL80:
 515:Core/Src/main.c ****   {
 1521              		.loc 1 515 6 view .LVU500
 1522 0066 0028     		cmp	r0, #0
 1523 0068 31D1     		bne	.L102
 519:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1524              		.loc 1 519 3 is_stmt 1 view .LVU501
 519:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1525              		.loc 1 519 37 is_stmt 0 view .LVU502
 1526 006a 2023     		movs	r3, #32
 1527 006c 1393     		str	r3, [sp, #76]
 520:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 1528              		.loc 1 520 3 is_stmt 1 view .LVU503
 520:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 1529              		.loc 1 520 33 is_stmt 0 view .LVU504
 1530 006e 0023     		movs	r3, #0
 1531 0070 1593     		str	r3, [sp, #84]
 521:Core/Src/main.c ****   {
 1532              		.loc 1 521 3 is_stmt 1 view .LVU505
 521:Core/Src/main.c ****   {
 1533              		.loc 1 521 7 is_stmt 0 view .LVU506
 1534 0072 13A9     		add	r1, sp, #76
 1535 0074 1A48     		ldr	r0, .L106
 1536 0076 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1537              	.LVL81:
 521:Core/Src/main.c ****   {
 1538              		.loc 1 521 6 view .LVU507
 1539 007a 50BB     		cbnz	r0, .L103
 525:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 1540              		.loc 1 525 3 is_stmt 1 view .LVU508
 525:Core/Src/main.c ****   sConfigOC.Pulse = 500;
 1541              		.loc 1 525 20 is_stmt 0 view .LVU509
ARM GAS  /tmp/ccLRjrVN.s 			page 52


 1542 007c 6023     		movs	r3, #96
 1543 007e 0C93     		str	r3, [sp, #48]
 526:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 1544              		.loc 1 526 3 is_stmt 1 view .LVU510
 526:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 1545              		.loc 1 526 19 is_stmt 0 view .LVU511
 1546 0080 4FF4FA73 		mov	r3, #500
 1547 0084 0D93     		str	r3, [sp, #52]
 527:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1548              		.loc 1 527 3 is_stmt 1 view .LVU512
 527:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1549              		.loc 1 527 24 is_stmt 0 view .LVU513
 1550 0086 0223     		movs	r3, #2
 1551 0088 0E93     		str	r3, [sp, #56]
 528:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1552              		.loc 1 528 3 is_stmt 1 view .LVU514
 528:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1553              		.loc 1 528 25 is_stmt 0 view .LVU515
 1554 008a 0022     		movs	r2, #0
 1555 008c 0F92     		str	r2, [sp, #60]
 529:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1556              		.loc 1 529 3 is_stmt 1 view .LVU516
 529:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1557              		.loc 1 529 24 is_stmt 0 view .LVU517
 1558 008e 1092     		str	r2, [sp, #64]
 530:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1559              		.loc 1 530 3 is_stmt 1 view .LVU518
 530:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1560              		.loc 1 530 25 is_stmt 0 view .LVU519
 1561 0090 1192     		str	r2, [sp, #68]
 531:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1562              		.loc 1 531 3 is_stmt 1 view .LVU520
 531:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1563              		.loc 1 531 26 is_stmt 0 view .LVU521
 1564 0092 1292     		str	r2, [sp, #72]
 532:Core/Src/main.c ****   {
 1565              		.loc 1 532 3 is_stmt 1 view .LVU522
 532:Core/Src/main.c ****   {
 1566              		.loc 1 532 7 is_stmt 0 view .LVU523
 1567 0094 0CA9     		add	r1, sp, #48
 1568 0096 1248     		ldr	r0, .L106
 1569 0098 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1570              	.LVL82:
 532:Core/Src/main.c ****   {
 1571              		.loc 1 532 6 view .LVU524
 1572 009c D8B9     		cbnz	r0, .L104
 536:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1573              		.loc 1 536 3 is_stmt 1 view .LVU525
 536:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1574              		.loc 1 536 40 is_stmt 0 view .LVU526
 1575 009e 0023     		movs	r3, #0
 1576 00a0 0193     		str	r3, [sp, #4]
 537:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1577              		.loc 1 537 3 is_stmt 1 view .LVU527
 537:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1578              		.loc 1 537 41 is_stmt 0 view .LVU528
 1579 00a2 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccLRjrVN.s 			page 53


 538:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1580              		.loc 1 538 3 is_stmt 1 view .LVU529
 538:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1581              		.loc 1 538 34 is_stmt 0 view .LVU530
 1582 00a4 0393     		str	r3, [sp, #12]
 539:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1583              		.loc 1 539 3 is_stmt 1 view .LVU531
 539:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1584              		.loc 1 539 33 is_stmt 0 view .LVU532
 1585 00a6 0493     		str	r3, [sp, #16]
 540:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1586              		.loc 1 540 3 is_stmt 1 view .LVU533
 540:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1587              		.loc 1 540 35 is_stmt 0 view .LVU534
 1588 00a8 0593     		str	r3, [sp, #20]
 541:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1589              		.loc 1 541 3 is_stmt 1 view .LVU535
 541:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1590              		.loc 1 541 38 is_stmt 0 view .LVU536
 1591 00aa 4FF40052 		mov	r2, #8192
 1592 00ae 0692     		str	r2, [sp, #24]
 542:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 1593              		.loc 1 542 3 is_stmt 1 view .LVU537
 542:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 1594              		.loc 1 542 40 is_stmt 0 view .LVU538
 1595 00b0 0B93     		str	r3, [sp, #44]
 543:Core/Src/main.c ****   {
 1596              		.loc 1 543 3 is_stmt 1 view .LVU539
 543:Core/Src/main.c ****   {
 1597              		.loc 1 543 7 is_stmt 0 view .LVU540
 1598 00b2 01A9     		add	r1, sp, #4
 1599 00b4 0A48     		ldr	r0, .L106
 1600 00b6 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1601              	.LVL83:
 543:Core/Src/main.c ****   {
 1602              		.loc 1 543 6 view .LVU541
 1603 00ba 70B9     		cbnz	r0, .L105
 550:Core/Src/main.c **** 
 1604              		.loc 1 550 3 is_stmt 1 view .LVU542
 1605 00bc 0848     		ldr	r0, .L106
 1606 00be FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1607              	.LVL84:
 552:Core/Src/main.c **** 
 1608              		.loc 1 552 1 is_stmt 0 view .LVU543
 1609 00c2 1AB0     		add	sp, sp, #104
 1610              		.cfi_remember_state
 1611              		.cfi_def_cfa_offset 8
 1612              		@ sp needed
 1613 00c4 10BD     		pop	{r4, pc}
 1614              	.L100:
 1615              		.cfi_restore_state
 508:Core/Src/main.c ****   }
 1616              		.loc 1 508 5 is_stmt 1 view .LVU544
 1617 00c6 FFF7FEFF 		bl	Error_Handler
 1618              	.LVL85:
 1619              	.L101:
 513:Core/Src/main.c ****   }
ARM GAS  /tmp/ccLRjrVN.s 			page 54


 1620              		.loc 1 513 5 view .LVU545
 1621 00ca FFF7FEFF 		bl	Error_Handler
 1622              	.LVL86:
 1623              	.L102:
 517:Core/Src/main.c ****   }
 1624              		.loc 1 517 5 view .LVU546
 1625 00ce FFF7FEFF 		bl	Error_Handler
 1626              	.LVL87:
 1627              	.L103:
 523:Core/Src/main.c ****   }
 1628              		.loc 1 523 5 view .LVU547
 1629 00d2 FFF7FEFF 		bl	Error_Handler
 1630              	.LVL88:
 1631              	.L104:
 534:Core/Src/main.c ****   }
 1632              		.loc 1 534 5 view .LVU548
 1633 00d6 FFF7FEFF 		bl	Error_Handler
 1634              	.LVL89:
 1635              	.L105:
 545:Core/Src/main.c ****   }
 1636              		.loc 1 545 5 view .LVU549
 1637 00da FFF7FEFF 		bl	Error_Handler
 1638              	.LVL90:
 1639              	.L107:
 1640 00de 00BF     		.align	2
 1641              	.L106:
 1642 00e0 00000000 		.word	.LANCHOR2
 1643 00e4 00400140 		.word	1073823744
 1644              		.cfi_endproc
 1645              	.LFE297:
 1647              		.section	.text.MX_TIM7_Init,"ax",%progbits
 1648              		.align	1
 1649              		.syntax unified
 1650              		.thumb
 1651              		.thumb_func
 1653              	MX_TIM7_Init:
 1654              	.LFB296:
 447:Core/Src/main.c **** 
 1655              		.loc 1 447 1 view -0
 1656              		.cfi_startproc
 1657              		@ args = 0, pretend = 0, frame = 16
 1658              		@ frame_needed = 0, uses_anonymous_args = 0
 1659 0000 00B5     		push	{lr}
 1660              		.cfi_def_cfa_offset 4
 1661              		.cfi_offset 14, -4
 1662 0002 85B0     		sub	sp, sp, #20
 1663              		.cfi_def_cfa_offset 24
 453:Core/Src/main.c **** 
 1664              		.loc 1 453 3 view .LVU551
 453:Core/Src/main.c **** 
 1665              		.loc 1 453 27 is_stmt 0 view .LVU552
 1666 0004 0023     		movs	r3, #0
 1667 0006 0193     		str	r3, [sp, #4]
 1668 0008 0293     		str	r3, [sp, #8]
 1669 000a 0393     		str	r3, [sp, #12]
 458:Core/Src/main.c ****   htim7.Init.Prescaler = 666;
 1670              		.loc 1 458 3 is_stmt 1 view .LVU553
ARM GAS  /tmp/ccLRjrVN.s 			page 55


 458:Core/Src/main.c ****   htim7.Init.Prescaler = 666;
 1671              		.loc 1 458 18 is_stmt 0 view .LVU554
 1672 000c 0F48     		ldr	r0, .L114
 1673 000e 104A     		ldr	r2, .L114+4
 1674 0010 0260     		str	r2, [r0]
 459:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1675              		.loc 1 459 3 is_stmt 1 view .LVU555
 459:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1676              		.loc 1 459 24 is_stmt 0 view .LVU556
 1677 0012 40F29A22 		movw	r2, #666
 1678 0016 4260     		str	r2, [r0, #4]
 460:Core/Src/main.c ****   htim7.Init.Period = 600;
 1679              		.loc 1 460 3 is_stmt 1 view .LVU557
 460:Core/Src/main.c ****   htim7.Init.Period = 600;
 1680              		.loc 1 460 26 is_stmt 0 view .LVU558
 1681 0018 8360     		str	r3, [r0, #8]
 461:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1682              		.loc 1 461 3 is_stmt 1 view .LVU559
 461:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1683              		.loc 1 461 21 is_stmt 0 view .LVU560
 1684 001a 4FF41673 		mov	r3, #600
 1685 001e C360     		str	r3, [r0, #12]
 462:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1686              		.loc 1 462 3 is_stmt 1 view .LVU561
 462:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1687              		.loc 1 462 32 is_stmt 0 view .LVU562
 1688 0020 8023     		movs	r3, #128
 1689 0022 8361     		str	r3, [r0, #24]
 463:Core/Src/main.c ****   {
 1690              		.loc 1 463 3 is_stmt 1 view .LVU563
 463:Core/Src/main.c ****   {
 1691              		.loc 1 463 7 is_stmt 0 view .LVU564
 1692 0024 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1693              	.LVL91:
 463:Core/Src/main.c ****   {
 1694              		.loc 1 463 6 view .LVU565
 1695 0028 58B9     		cbnz	r0, .L112
 467:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1696              		.loc 1 467 3 is_stmt 1 view .LVU566
 467:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1697              		.loc 1 467 37 is_stmt 0 view .LVU567
 1698 002a 2023     		movs	r3, #32
 1699 002c 0193     		str	r3, [sp, #4]
 468:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 1700              		.loc 1 468 3 is_stmt 1 view .LVU568
 468:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 1701              		.loc 1 468 33 is_stmt 0 view .LVU569
 1702 002e 0023     		movs	r3, #0
 1703 0030 0393     		str	r3, [sp, #12]
 469:Core/Src/main.c ****   {
 1704              		.loc 1 469 3 is_stmt 1 view .LVU570
 469:Core/Src/main.c ****   {
 1705              		.loc 1 469 7 is_stmt 0 view .LVU571
 1706 0032 01A9     		add	r1, sp, #4
 1707 0034 0548     		ldr	r0, .L114
 1708 0036 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1709              	.LVL92:
ARM GAS  /tmp/ccLRjrVN.s 			page 56


 469:Core/Src/main.c ****   {
 1710              		.loc 1 469 6 view .LVU572
 1711 003a 20B9     		cbnz	r0, .L113
 477:Core/Src/main.c **** 
 1712              		.loc 1 477 1 view .LVU573
 1713 003c 05B0     		add	sp, sp, #20
 1714              		.cfi_remember_state
 1715              		.cfi_def_cfa_offset 4
 1716              		@ sp needed
 1717 003e 5DF804FB 		ldr	pc, [sp], #4
 1718              	.L112:
 1719              		.cfi_restore_state
 465:Core/Src/main.c ****   }
 1720              		.loc 1 465 5 is_stmt 1 view .LVU574
 1721 0042 FFF7FEFF 		bl	Error_Handler
 1722              	.LVL93:
 1723              	.L113:
 471:Core/Src/main.c ****   }
 1724              		.loc 1 471 5 view .LVU575
 1725 0046 FFF7FEFF 		bl	Error_Handler
 1726              	.LVL94:
 1727              	.L115:
 1728 004a 00BF     		.align	2
 1729              	.L114:
 1730 004c 00000000 		.word	.LANCHOR7
 1731 0050 00140040 		.word	1073746944
 1732              		.cfi_endproc
 1733              	.LFE296:
 1735              		.section	.text.SystemClock_Config,"ax",%progbits
 1736              		.align	1
 1737              		.global	SystemClock_Config
 1738              		.syntax unified
 1739              		.thumb
 1740              		.thumb_func
 1742              	SystemClock_Config:
 1743              	.LFB292:
 175:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1744              		.loc 1 175 1 view -0
 1745              		.cfi_startproc
 1746              		@ args = 0, pretend = 0, frame = 88
 1747              		@ frame_needed = 0, uses_anonymous_args = 0
 1748 0000 00B5     		push	{lr}
 1749              		.cfi_def_cfa_offset 4
 1750              		.cfi_offset 14, -4
 1751 0002 97B0     		sub	sp, sp, #92
 1752              		.cfi_def_cfa_offset 96
 176:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1753              		.loc 1 176 3 view .LVU577
 176:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1754              		.loc 1 176 22 is_stmt 0 view .LVU578
 1755 0004 4422     		movs	r2, #68
 1756 0006 0021     		movs	r1, #0
 1757 0008 05A8     		add	r0, sp, #20
 1758 000a FFF7FEFF 		bl	memset
 1759              	.LVL95:
 177:Core/Src/main.c **** 
 1760              		.loc 1 177 3 is_stmt 1 view .LVU579
ARM GAS  /tmp/ccLRjrVN.s 			page 57


 177:Core/Src/main.c **** 
 1761              		.loc 1 177 22 is_stmt 0 view .LVU580
 1762 000e 0023     		movs	r3, #0
 1763 0010 0093     		str	r3, [sp]
 1764 0012 0193     		str	r3, [sp, #4]
 1765 0014 0293     		str	r3, [sp, #8]
 1766 0016 0393     		str	r3, [sp, #12]
 1767 0018 0493     		str	r3, [sp, #16]
 181:Core/Src/main.c ****   {
 1768              		.loc 1 181 3 is_stmt 1 view .LVU581
 181:Core/Src/main.c ****   {
 1769              		.loc 1 181 7 is_stmt 0 view .LVU582
 1770 001a 4FF40070 		mov	r0, #512
 1771 001e FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 1772              	.LVL96:
 181:Core/Src/main.c ****   {
 1773              		.loc 1 181 6 view .LVU583
 1774 0022 D0B9     		cbnz	r0, .L121
 189:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 1775              		.loc 1 189 3 is_stmt 1 view .LVU584
 189:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 1776              		.loc 1 189 36 is_stmt 0 view .LVU585
 1777 0024 1023     		movs	r3, #16
 1778 0026 0593     		str	r3, [sp, #20]
 190:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 1779              		.loc 1 190 3 is_stmt 1 view .LVU586
 190:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 1780              		.loc 1 190 30 is_stmt 0 view .LVU587
 1781 0028 0123     		movs	r3, #1
 1782 002a 0B93     		str	r3, [sp, #44]
 191:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 1783              		.loc 1 191 3 is_stmt 1 view .LVU588
 191:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 1784              		.loc 1 191 41 is_stmt 0 view .LVU589
 1785 002c 0023     		movs	r3, #0
 1786 002e 0C93     		str	r3, [sp, #48]
 192:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1787              		.loc 1 192 3 is_stmt 1 view .LVU590
 192:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1788              		.loc 1 192 35 is_stmt 0 view .LVU591
 1789 0030 6022     		movs	r2, #96
 1790 0032 0D92     		str	r2, [sp, #52]
 193:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1791              		.loc 1 193 3 is_stmt 1 view .LVU592
 193:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1792              		.loc 1 193 34 is_stmt 0 view .LVU593
 1793 0034 0F93     		str	r3, [sp, #60]
 194:Core/Src/main.c ****   {
 1794              		.loc 1 194 3 is_stmt 1 view .LVU594
 194:Core/Src/main.c ****   {
 1795              		.loc 1 194 7 is_stmt 0 view .LVU595
 1796 0036 05A8     		add	r0, sp, #20
 1797 0038 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1798              	.LVL97:
 194:Core/Src/main.c ****   {
 1799              		.loc 1 194 6 view .LVU596
 1800 003c 78B9     		cbnz	r0, .L122
ARM GAS  /tmp/ccLRjrVN.s 			page 58


 201:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1801              		.loc 1 201 3 is_stmt 1 view .LVU597
 201:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1802              		.loc 1 201 31 is_stmt 0 view .LVU598
 1803 003e 0F23     		movs	r3, #15
 1804 0040 0093     		str	r3, [sp]
 203:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1805              		.loc 1 203 3 is_stmt 1 view .LVU599
 203:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1806              		.loc 1 203 34 is_stmt 0 view .LVU600
 1807 0042 0021     		movs	r1, #0
 1808 0044 0191     		str	r1, [sp, #4]
 204:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1809              		.loc 1 204 3 is_stmt 1 view .LVU601
 204:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1810              		.loc 1 204 35 is_stmt 0 view .LVU602
 1811 0046 0291     		str	r1, [sp, #8]
 205:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1812              		.loc 1 205 3 is_stmt 1 view .LVU603
 205:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1813              		.loc 1 205 36 is_stmt 0 view .LVU604
 1814 0048 0391     		str	r1, [sp, #12]
 206:Core/Src/main.c **** 
 1815              		.loc 1 206 3 is_stmt 1 view .LVU605
 206:Core/Src/main.c **** 
 1816              		.loc 1 206 36 is_stmt 0 view .LVU606
 1817 004a 0491     		str	r1, [sp, #16]
 208:Core/Src/main.c ****   {
 1818              		.loc 1 208 3 is_stmt 1 view .LVU607
 208:Core/Src/main.c ****   {
 1819              		.loc 1 208 7 is_stmt 0 view .LVU608
 1820 004c 6846     		mov	r0, sp
 1821 004e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1822              	.LVL98:
 208:Core/Src/main.c ****   {
 1823              		.loc 1 208 6 view .LVU609
 1824 0052 30B9     		cbnz	r0, .L123
 212:Core/Src/main.c **** 
 1825              		.loc 1 212 1 view .LVU610
 1826 0054 17B0     		add	sp, sp, #92
 1827              		.cfi_remember_state
 1828              		.cfi_def_cfa_offset 4
 1829              		@ sp needed
 1830 0056 5DF804FB 		ldr	pc, [sp], #4
 1831              	.L121:
 1832              		.cfi_restore_state
 183:Core/Src/main.c ****   }
 1833              		.loc 1 183 5 is_stmt 1 view .LVU611
 1834 005a FFF7FEFF 		bl	Error_Handler
 1835              	.LVL99:
 1836              	.L122:
 196:Core/Src/main.c ****   }
 1837              		.loc 1 196 5 view .LVU612
 1838 005e FFF7FEFF 		bl	Error_Handler
 1839              	.LVL100:
 1840              	.L123:
 210:Core/Src/main.c ****   }
ARM GAS  /tmp/ccLRjrVN.s 			page 59


 1841              		.loc 1 210 5 view .LVU613
 1842 0062 FFF7FEFF 		bl	Error_Handler
 1843              	.LVL101:
 1844              		.cfi_endproc
 1845              	.LFE292:
 1847              		.section	.text.PeriphCommonClock_Config,"ax",%progbits
 1848              		.align	1
 1849              		.global	PeriphCommonClock_Config
 1850              		.syntax unified
 1851              		.thumb
 1852              		.thumb_func
 1854              	PeriphCommonClock_Config:
 1855              	.LFB293:
 219:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1856              		.loc 1 219 1 view -0
 1857              		.cfi_startproc
 1858              		@ args = 0, pretend = 0, frame = 96
 1859              		@ frame_needed = 0, uses_anonymous_args = 0
 1860 0000 00B5     		push	{lr}
 1861              		.cfi_def_cfa_offset 4
 1862              		.cfi_offset 14, -4
 1863 0002 99B0     		sub	sp, sp, #100
 1864              		.cfi_def_cfa_offset 104
 220:Core/Src/main.c **** 
 1865              		.loc 1 220 3 view .LVU615
 220:Core/Src/main.c **** 
 1866              		.loc 1 220 28 is_stmt 0 view .LVU616
 1867 0004 5C22     		movs	r2, #92
 1868 0006 0021     		movs	r1, #0
 1869 0008 01A8     		add	r0, sp, #4
 1870 000a FFF7FEFF 		bl	memset
 1871              	.LVL102:
 224:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 1872              		.loc 1 224 3 is_stmt 1 view .LVU617
 224:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 1873              		.loc 1 224 38 is_stmt 0 view .LVU618
 1874 000e 4FF40423 		mov	r3, #540672
 1875 0012 0193     		str	r3, [sp, #4]
 225:Core/Src/main.c ****   PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 1876              		.loc 1 225 3 is_stmt 1 view .LVU619
 225:Core/Src/main.c ****   PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 1877              		.loc 1 225 35 is_stmt 0 view .LVU620
 1878 0014 4FF08053 		mov	r3, #268435456
 1879 0018 1593     		str	r3, [sp, #84]
 226:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 1880              		.loc 1 226 3 is_stmt 1 view .LVU621
 226:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 1881              		.loc 1 226 38 is_stmt 0 view .LVU622
 1882 001a 4FF08063 		mov	r3, #67108864
 1883 001e 1393     		str	r3, [sp, #76]
 227:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 1884              		.loc 1 227 3 is_stmt 1 view .LVU623
 227:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 1885              		.loc 1 227 39 is_stmt 0 view .LVU624
 1886 0020 0123     		movs	r3, #1
 1887 0022 0293     		str	r3, [sp, #8]
 228:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
ARM GAS  /tmp/ccLRjrVN.s 			page 60


 1888              		.loc 1 228 3 is_stmt 1 view .LVU625
 228:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 1889              		.loc 1 228 34 is_stmt 0 view .LVU626
 1890 0024 0393     		str	r3, [sp, #12]
 229:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 1891              		.loc 1 229 3 is_stmt 1 view .LVU627
 229:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 1892              		.loc 1 229 34 is_stmt 0 view .LVU628
 1893 0026 1023     		movs	r3, #16
 1894 0028 0493     		str	r3, [sp, #16]
 230:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 1895              		.loc 1 230 3 is_stmt 1 view .LVU629
 230:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 1896              		.loc 1 230 34 is_stmt 0 view .LVU630
 1897 002a 0723     		movs	r3, #7
 1898 002c 0593     		str	r3, [sp, #20]
 231:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 1899              		.loc 1 231 3 is_stmt 1 view .LVU631
 231:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 1900              		.loc 1 231 34 is_stmt 0 view .LVU632
 1901 002e 0223     		movs	r3, #2
 1902 0030 0693     		str	r3, [sp, #24]
 232:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 1903              		.loc 1 232 3 is_stmt 1 view .LVU633
 232:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 1904              		.loc 1 232 34 is_stmt 0 view .LVU634
 1905 0032 0793     		str	r3, [sp, #28]
 233:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1906              		.loc 1 233 3 is_stmt 1 view .LVU635
 233:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1907              		.loc 1 233 41 is_stmt 0 view .LVU636
 1908 0034 4FF08873 		mov	r3, #17825792
 1909 0038 0893     		str	r3, [sp, #32]
 234:Core/Src/main.c ****   {
 1910              		.loc 1 234 3 is_stmt 1 view .LVU637
 234:Core/Src/main.c ****   {
 1911              		.loc 1 234 7 is_stmt 0 view .LVU638
 1912 003a 01A8     		add	r0, sp, #4
 1913 003c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1914              	.LVL103:
 234:Core/Src/main.c ****   {
 1915              		.loc 1 234 6 view .LVU639
 1916 0040 10B9     		cbnz	r0, .L127
 238:Core/Src/main.c **** 
 1917              		.loc 1 238 1 view .LVU640
 1918 0042 19B0     		add	sp, sp, #100
 1919              		.cfi_remember_state
 1920              		.cfi_def_cfa_offset 4
 1921              		@ sp needed
 1922 0044 5DF804FB 		ldr	pc, [sp], #4
 1923              	.L127:
 1924              		.cfi_restore_state
 236:Core/Src/main.c ****   }
 1925              		.loc 1 236 5 is_stmt 1 view .LVU641
 1926 0048 FFF7FEFF 		bl	Error_Handler
 1927              	.LVL104:
 1928              		.cfi_endproc
ARM GAS  /tmp/ccLRjrVN.s 			page 61


 1929              	.LFE293:
 1931              		.section	.text.main,"ax",%progbits
 1932              		.align	1
 1933              		.global	main
 1934              		.syntax unified
 1935              		.thumb
 1936              		.thumb_func
 1938              	main:
 1939              	.LFB291:
 105:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1940              		.loc 1 105 1 view -0
 1941              		.cfi_startproc
 1942              		@ Volatile: function does not return.
 1943              		@ args = 0, pretend = 0, frame = 0
 1944              		@ frame_needed = 0, uses_anonymous_args = 0
 1945 0000 00B5     		push	{lr}
 1946              		.cfi_def_cfa_offset 4
 1947              		.cfi_offset 14, -4
 1948 0002 83B0     		sub	sp, sp, #12
 1949              		.cfi_def_cfa_offset 16
 113:Core/Src/main.c **** 
 1950              		.loc 1 113 3 view .LVU643
 1951 0004 FFF7FEFF 		bl	HAL_Init
 1952              	.LVL105:
 120:Core/Src/main.c **** 
 1953              		.loc 1 120 3 view .LVU644
 1954 0008 FFF7FEFF 		bl	SystemClock_Config
 1955              	.LVL106:
 123:Core/Src/main.c **** 
 1956              		.loc 1 123 3 view .LVU645
 1957 000c FFF7FEFF 		bl	PeriphCommonClock_Config
 1958              	.LVL107:
 130:Core/Src/main.c ****   MX_DMA_Init();
 1959              		.loc 1 130 3 view .LVU646
 1960 0010 FFF7FEFF 		bl	MX_GPIO_Init
 1961              	.LVL108:
 131:Core/Src/main.c ****   MX_ADC1_Init();
 1962              		.loc 1 131 3 view .LVU647
 1963 0014 FFF7FEFF 		bl	MX_DMA_Init
 1964              	.LVL109:
 132:Core/Src/main.c ****   MX_USART1_UART_Init();
 1965              		.loc 1 132 3 view .LVU648
 1966 0018 FFF7FEFF 		bl	MX_ADC1_Init
 1967              	.LVL110:
 133:Core/Src/main.c ****   MX_TIM1_Init();
 1968              		.loc 1 133 3 view .LVU649
 1969 001c FFF7FEFF 		bl	MX_USART1_UART_Init
 1970              	.LVL111:
 134:Core/Src/main.c ****   MX_USART2_UART_Init();
 1971              		.loc 1 134 3 view .LVU650
 1972 0020 FFF7FEFF 		bl	MX_TIM1_Init
 1973              	.LVL112:
 135:Core/Src/main.c ****   MX_USART3_UART_Init();
 1974              		.loc 1 135 3 view .LVU651
 1975 0024 FFF7FEFF 		bl	MX_USART2_UART_Init
 1976              	.LVL113:
 136:Core/Src/main.c ****   MX_TIM15_Init();
ARM GAS  /tmp/ccLRjrVN.s 			page 62


 1977              		.loc 1 136 3 view .LVU652
 1978 0028 FFF7FEFF 		bl	MX_USART3_UART_Init
 1979              	.LVL114:
 137:Core/Src/main.c ****   MX_TIM7_Init();
 1980              		.loc 1 137 3 view .LVU653
 1981 002c FFF7FEFF 		bl	MX_TIM15_Init
 1982              	.LVL115:
 138:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1983              		.loc 1 138 3 view .LVU654
 1984 0030 FFF7FEFF 		bl	MX_TIM7_Init
 1985              	.LVL116:
 141:Core/Src/main.c **** 
 1986              		.loc 1 141 3 view .LVU655
 1987 0034 FFF7FEFF 		bl	initLCD
 1988              	.LVL117:
 143:Core/Src/main.c **** 
 1989              		.loc 1 143 3 view .LVU656
 1990 0038 1748     		ldr	r0, .L131
 1991 003a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1992              	.LVL118:
 145:Core/Src/main.c ****   HAL_TIM_PWM_Start_IT(&enY_tim, TIM_CHANNEL_1);
 1993              		.loc 1 145 3 view .LVU657
 1994 003e 174D     		ldr	r5, .L131+4
 1995 0040 0821     		movs	r1, #8
 1996 0042 2846     		mov	r0, r5
 1997 0044 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start_IT
 1998              	.LVL119:
 146:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 1999              		.loc 1 146 3 view .LVU658
 2000 0048 154C     		ldr	r4, .L131+8
 2001 004a 0021     		movs	r1, #0
 2002 004c 2046     		mov	r0, r4
 2003 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start_IT
 2004              	.LVL120:
 147:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 2005              		.loc 1 147 3 view .LVU659
 147:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 2006              		.loc 1 147 10 is_stmt 0 view .LVU660
 2007 0052 2A68     		ldr	r2, [r5]
 147:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_CEN;
 2008              		.loc 1 147 25 view .LVU661
 2009 0054 1368     		ldr	r3, [r2]
 2010 0056 23F00103 		bic	r3, r3, #1
 2011 005a 1360     		str	r3, [r2]
 148:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 2012              		.loc 1 148 3 is_stmt 1 view .LVU662
 148:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 2013              		.loc 1 148 10 is_stmt 0 view .LVU663
 2014 005c 2268     		ldr	r2, [r4]
 148:Core/Src/main.c ****   enX_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 2015              		.loc 1 148 25 view .LVU664
 2016 005e 1368     		ldr	r3, [r2]
 2017 0060 23F00103 		bic	r3, r3, #1
 2018 0064 1360     		str	r3, [r2]
 149:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 2019              		.loc 1 149 3 is_stmt 1 view .LVU665
 149:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
ARM GAS  /tmp/ccLRjrVN.s 			page 63


 2020              		.loc 1 149 10 is_stmt 0 view .LVU666
 2021 0066 2A68     		ldr	r2, [r5]
 149:Core/Src/main.c ****   enY_tim.Instance->CR1 &= ~TIM_CR1_ARPE;
 2022              		.loc 1 149 25 view .LVU667
 2023 0068 1368     		ldr	r3, [r2]
 2024 006a 23F08003 		bic	r3, r3, #128
 2025 006e 1360     		str	r3, [r2]
 150:Core/Src/main.c **** 
 2026              		.loc 1 150 3 is_stmt 1 view .LVU668
 150:Core/Src/main.c **** 
 2027              		.loc 1 150 10 is_stmt 0 view .LVU669
 2028 0070 2268     		ldr	r2, [r4]
 150:Core/Src/main.c **** 
 2029              		.loc 1 150 25 view .LVU670
 2030 0072 1368     		ldr	r3, [r2]
 2031 0074 23F08003 		bic	r3, r3, #128
 2032 0078 1360     		str	r3, [r2]
 152:Core/Src/main.c **** 
 2033              		.loc 1 152 3 is_stmt 1 view .LVU671
 2034 007a 0822     		movs	r2, #8
 2035 007c 0949     		ldr	r1, .L131+12
 2036 007e 0A48     		ldr	r0, .L131+16
 2037 0080 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2038              	.LVL121:
 2039              	.L129:
 158:Core/Src/main.c ****   {
 2040              		.loc 1 158 3 discriminator 1 view .LVU672
 164:Core/Src/main.c ****     //HAL_Delay(1);
 2041              		.loc 1 164 5 discriminator 1 view .LVU673
 2042 0084 074B     		ldr	r3, .L131+12
 2043 0086 0093     		str	r3, [sp]
 2044 0088 084B     		ldr	r3, .L131+20
 2045 008a 054A     		ldr	r2, .L131+8
 2046 008c 0349     		ldr	r1, .L131+4
 2047 008e 0848     		ldr	r0, .L131+24
 2048 0090 FFF7FEFF 		bl	CNC_HL_Control
 2049              	.LVL122:
 158:Core/Src/main.c ****   {
 2050              		.loc 1 158 9 discriminator 1 view .LVU674
 2051 0094 F6E7     		b	.L129
 2052              	.L132:
 2053 0096 00BF     		.align	2
 2054              	.L131:
 2055 0098 00000000 		.word	.LANCHOR7
 2056 009c 00000000 		.word	.LANCHOR1
 2057 00a0 00000000 		.word	.LANCHOR2
 2058 00a4 00000000 		.word	.LANCHOR8
 2059 00a8 00000000 		.word	.LANCHOR3
 2060 00ac 00000000 		.word	.LANCHOR4
 2061 00b0 00000000 		.word	.LANCHOR0
 2062              		.cfi_endproc
 2063              	.LFE291:
 2065              		.global	adc_data
 2066              		.global	hmi_info
 2067              		.global	huart3
 2068              		.global	huart2
 2069              		.global	huart1
ARM GAS  /tmp/ccLRjrVN.s 			page 64


 2070              		.global	htim15
 2071              		.global	htim7
 2072              		.global	htim1
 2073              		.global	hdma_adc1
 2074              		.global	hadc1
 2075              		.section	.bss.adc_data,"aw",%nobits
 2076              		.align	2
 2077              		.set	.LANCHOR8,. + 0
 2080              	adc_data:
 2081 0000 00000000 		.space	16
 2081      00000000 
 2081      00000000 
 2081      00000000 
 2082              		.section	.bss.hadc1,"aw",%nobits
 2083              		.align	2
 2084              		.set	.LANCHOR3,. + 0
 2087              	hadc1:
 2088 0000 00000000 		.space	100
 2088      00000000 
 2088      00000000 
 2088      00000000 
 2088      00000000 
 2089              		.section	.bss.hdma_adc1,"aw",%nobits
 2090              		.align	2
 2093              	hdma_adc1:
 2094 0000 00000000 		.space	72
 2094      00000000 
 2094      00000000 
 2094      00000000 
 2094      00000000 
 2095              		.section	.bss.htim1,"aw",%nobits
 2096              		.align	2
 2097              		.set	.LANCHOR1,. + 0
 2100              	htim1:
 2101 0000 00000000 		.space	76
 2101      00000000 
 2101      00000000 
 2101      00000000 
 2101      00000000 
 2102              		.section	.bss.htim15,"aw",%nobits
 2103              		.align	2
 2104              		.set	.LANCHOR2,. + 0
 2107              	htim15:
 2108 0000 00000000 		.space	76
 2108      00000000 
 2108      00000000 
 2108      00000000 
 2108      00000000 
 2109              		.section	.bss.htim7,"aw",%nobits
 2110              		.align	2
 2111              		.set	.LANCHOR7,. + 0
 2114              	htim7:
 2115 0000 00000000 		.space	76
 2115      00000000 
 2115      00000000 
 2115      00000000 
 2115      00000000 
ARM GAS  /tmp/ccLRjrVN.s 			page 65


 2116              		.section	.bss.huart1,"aw",%nobits
 2117              		.align	2
 2118              		.set	.LANCHOR4,. + 0
 2121              	huart1:
 2122 0000 00000000 		.space	132
 2122      00000000 
 2122      00000000 
 2122      00000000 
 2122      00000000 
 2123              		.section	.bss.huart2,"aw",%nobits
 2124              		.align	2
 2125              		.set	.LANCHOR5,. + 0
 2128              	huart2:
 2129 0000 00000000 		.space	132
 2129      00000000 
 2129      00000000 
 2129      00000000 
 2129      00000000 
 2130              		.section	.bss.huart3,"aw",%nobits
 2131              		.align	2
 2132              		.set	.LANCHOR6,. + 0
 2135              	huart3:
 2136 0000 00000000 		.space	132
 2136      00000000 
 2136      00000000 
 2136      00000000 
 2136      00000000 
 2137              		.section	.data.hmi_info,"aw"
 2138              		.align	2
 2139              		.set	.LANCHOR0,. + 0
 2142              	hmi_info:
 2143 0000 00       		.byte	0
 2144 0001 00       		.byte	0
 2145 0002 02       		.byte	2
 2146 0003 00       		.space	1
 2147 0004 B80B     		.short	3000
 2148 0006 B80B     		.short	3000
 2149 0008 E803     		.short	1000
 2150 000a E803     		.short	1000
 2151 000c 0000     		.short	0
 2152 000e 0000     		.short	0
 2153 0010 0000     		.space	2
 2154 0012 0000     		.short	0
 2155 0014 0000     		.short	0
 2156 0016 E803     		.short	1000
 2157 0018 00       		.byte	0
 2158 0019 00       		.byte	0
 2159 001a 01       		.byte	1
 2160 001b 00       		.byte	0
 2161 001c 00       		.byte	0
 2162 001d FF       		.byte	-1
 2163              		.text
 2164              	.Letext0:
 2165              		.file 3 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l431xx.h"
 2166              		.file 4 "/home/retfie/.config/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 2167              		.file 5 "/home/retfie/.config/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 2168              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
ARM GAS  /tmp/ccLRjrVN.s 			page 66


 2169              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 2170              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 2171              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
 2172              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 2173              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 2174              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
 2175              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 2176              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 2177              		.file 15 "Core/Inc/cnc_info.h"
 2178              		.file 16 "Core/Inc/lcd.h"
 2179              		.file 17 "Core/Inc/cnc_core.h"
 2180              		.file 18 "Core/Inc/hmi.h"
 2181              		.file 19 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
 2182              		.file 20 "Core/Inc/main.h"
 2183              		.file 21 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
 2184              		.file 22 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_cortex.h"
 2185              		.file 23 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 2186              		.file 24 "<built-in>"
ARM GAS  /tmp/ccLRjrVN.s 			page 67


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccLRjrVN.s:20     .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccLRjrVN.s:25     .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccLRjrVN.s:59     .text.MX_DMA_Init:000000000000001c $d
     /tmp/ccLRjrVN.s:64     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccLRjrVN.s:69     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccLRjrVN.s:430    .text.MX_GPIO_Init:00000000000001c0 $d
     /tmp/ccLRjrVN.s:439    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccLRjrVN.s:445    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccLRjrVN.s:468    .text.HAL_TIM_PeriodElapsedCallback:000000000000000c $d
     /tmp/ccLRjrVN.s:473    .text.HAL_TIM_PWM_PulseFinishedCallback:0000000000000000 $t
     /tmp/ccLRjrVN.s:479    .text.HAL_TIM_PWM_PulseFinishedCallback:0000000000000000 HAL_TIM_PWM_PulseFinishedCallback
     /tmp/ccLRjrVN.s:528    .text.HAL_TIM_PWM_PulseFinishedCallback:0000000000000028 $d
     /tmp/ccLRjrVN.s:535    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccLRjrVN.s:541    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/ccLRjrVN.s:603    .text.HAL_GPIO_EXTI_Callback:000000000000003c $d
     /tmp/ccLRjrVN.s:610    .rodata.Error_Handler.str1.4:0000000000000000 $d
     /tmp/ccLRjrVN.s:614    .text.Error_Handler:0000000000000000 $t
     /tmp/ccLRjrVN.s:620    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccLRjrVN.s:676    .text.Error_Handler:0000000000000030 $d
     /tmp/ccLRjrVN.s:681    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccLRjrVN.s:686    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccLRjrVN.s:957    .text.MX_ADC1_Init:0000000000000124 $d
     /tmp/ccLRjrVN.s:971    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccLRjrVN.s:976    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccLRjrVN.s:1036   .text.MX_USART1_UART_Init:0000000000000030 $d
     /tmp/ccLRjrVN.s:1042   .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccLRjrVN.s:1047   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccLRjrVN.s:1277   .text.MX_TIM1_Init:00000000000000f4 $d
     /tmp/ccLRjrVN.s:1283   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccLRjrVN.s:1288   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccLRjrVN.s:1348   .text.MX_USART2_UART_Init:0000000000000030 $d
     /tmp/ccLRjrVN.s:1354   .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccLRjrVN.s:1359   .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccLRjrVN.s:1419   .text.MX_USART3_UART_Init:0000000000000030 $d
     /tmp/ccLRjrVN.s:1425   .text.MX_TIM15_Init:0000000000000000 $t
     /tmp/ccLRjrVN.s:1430   .text.MX_TIM15_Init:0000000000000000 MX_TIM15_Init
     /tmp/ccLRjrVN.s:1642   .text.MX_TIM15_Init:00000000000000e0 $d
     /tmp/ccLRjrVN.s:1648   .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/ccLRjrVN.s:1653   .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/ccLRjrVN.s:1730   .text.MX_TIM7_Init:000000000000004c $d
     /tmp/ccLRjrVN.s:1736   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccLRjrVN.s:1742   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccLRjrVN.s:1848   .text.PeriphCommonClock_Config:0000000000000000 $t
     /tmp/ccLRjrVN.s:1854   .text.PeriphCommonClock_Config:0000000000000000 PeriphCommonClock_Config
     /tmp/ccLRjrVN.s:1932   .text.main:0000000000000000 $t
     /tmp/ccLRjrVN.s:1938   .text.main:0000000000000000 main
     /tmp/ccLRjrVN.s:2055   .text.main:0000000000000098 $d
     /tmp/ccLRjrVN.s:2080   .bss.adc_data:0000000000000000 adc_data
     /tmp/ccLRjrVN.s:2142   .data.hmi_info:0000000000000000 hmi_info
     /tmp/ccLRjrVN.s:2135   .bss.huart3:0000000000000000 huart3
     /tmp/ccLRjrVN.s:2128   .bss.huart2:0000000000000000 huart2
     /tmp/ccLRjrVN.s:2121   .bss.huart1:0000000000000000 huart1
     /tmp/ccLRjrVN.s:2107   .bss.htim15:0000000000000000 htim15
     /tmp/ccLRjrVN.s:2114   .bss.htim7:0000000000000000 htim7
     /tmp/ccLRjrVN.s:2100   .bss.htim1:0000000000000000 htim1
ARM GAS  /tmp/ccLRjrVN.s 			page 68


     /tmp/ccLRjrVN.s:2093   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/ccLRjrVN.s:2087   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccLRjrVN.s:2076   .bss.adc_data:0000000000000000 $d
     /tmp/ccLRjrVN.s:2083   .bss.hadc1:0000000000000000 $d
     /tmp/ccLRjrVN.s:2090   .bss.hdma_adc1:0000000000000000 $d
     /tmp/ccLRjrVN.s:2096   .bss.htim1:0000000000000000 $d
     /tmp/ccLRjrVN.s:2103   .bss.htim15:0000000000000000 $d
     /tmp/ccLRjrVN.s:2110   .bss.htim7:0000000000000000 $d
     /tmp/ccLRjrVN.s:2117   .bss.huart1:0000000000000000 $d
     /tmp/ccLRjrVN.s:2124   .bss.huart2:0000000000000000 $d
     /tmp/ccLRjrVN.s:2131   .bss.huart3:0000000000000000 $d
     /tmp/ccLRjrVN.s:2138   .data.hmi_info:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HMI_Update
CNC_TIM_Callback_X
CNC_TIM_Callback_Y
CNC_Stop
CNC_Limit_X
CNC_Limit_Y
clearLCD
setCursor
writeLCD
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
initLCD
HAL_TIM_Base_Start_IT
HAL_TIMEx_PWMN_Start_IT
HAL_TIM_PWM_Start_IT
HAL_ADC_Start_DMA
CNC_HL_Control
