ARM GAS  /tmp/cc0faEhb.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_DMA_Init,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MX_DMA_Init:
  26              	.LFB301:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <string.h>
  25:Core/Src/main.c **** #include <stdio.h>
  26:Core/Src/main.c **** #include <stdint.h>
  27:Core/Src/main.c **** #include <stdbool.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** #include "hmi.h"
  30:Core/Src/main.c **** #include "cnc_core.h"
  31:Core/Src/main.c **** #include "lcd.h"
ARM GAS  /tmp/cc0faEhb.s 			page 2


  32:Core/Src/main.c **** #include "cnc_config.h"
  33:Core/Src/main.c **** /* USER CODE END Includes */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PD */
  42:Core/Src/main.c **** /* USER CODE END PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PM */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  50:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  51:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  54:Core/Src/main.c **** TIM_HandleTypeDef htim7;
  55:Core/Src/main.c **** TIM_HandleTypeDef htim15;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** UART_HandleTypeDef huart1;
  58:Core/Src/main.c **** UART_HandleTypeDef huart2;
  59:Core/Src/main.c **** UART_HandleTypeDef huart3;
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE BEGIN PV */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* USER CODE END PV */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  66:Core/Src/main.c **** void SystemClock_Config(void);
  67:Core/Src/main.c **** void PeriphCommonClock_Config(void);
  68:Core/Src/main.c **** static void MX_GPIO_Init(void);
  69:Core/Src/main.c **** static void MX_DMA_Init(void);
  70:Core/Src/main.c **** static void MX_ADC1_Init(void);
  71:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  72:Core/Src/main.c **** static void MX_TIM1_Init(void);
  73:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  74:Core/Src/main.c **** static void MX_USART3_UART_Init(void);
  75:Core/Src/main.c **** static void MX_TIM15_Init(void);
  76:Core/Src/main.c **** static void MX_TIM7_Init(void);
  77:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* USER CODE END PFP */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  82:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  83:Core/Src/main.c **** HMI_info_t hmi_info = { .mode = HMI_Mode_Zero, 
  84:Core/Src/main.c ****                         .state = HMI_State_Stop, 
  85:Core/Src/main.c ****                         .move = HMI_Move_None,
  86:Core/Src/main.c ****                         .pos = {3000, 3000},
  87:Core/Src/main.c ****                         .speed = {0, 0},
  88:Core/Src/main.c ****                         .commanded.pos = {0, 0},
ARM GAS  /tmp/cc0faEhb.s 			page 3


  89:Core/Src/main.c ****                         .feed = 100,
  90:Core/Src/main.c ****                         .cnt1 = 0,
  91:Core/Src/main.c ****                         .cnt2 = 0,
  92:Core/Src/main.c ****                         .update = true,
  93:Core/Src/main.c ****                         .zeroed = false,
  94:Core/Src/main.c ****                         .pushbuttons = 0xFFU};
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** volatile uint16_t adc_data[8];
  97:Core/Src/main.c **** /* USER CODE END 0 */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /**
 100:Core/Src/main.c ****   * @brief  The application entry point.
 101:Core/Src/main.c ****   * @retval int
 102:Core/Src/main.c ****   */
 103:Core/Src/main.c **** int main(void)
 104:Core/Src/main.c **** {
 105:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE END 1 */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 112:Core/Src/main.c ****   HAL_Init();
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE END Init */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* Configure the system clock */
 119:Core/Src/main.c ****   SystemClock_Config();
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** /* Configure the peripherals common clocks */
 122:Core/Src/main.c ****   PeriphCommonClock_Config();
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* USER CODE END SysInit */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* Initialize all configured peripherals */
 129:Core/Src/main.c ****   MX_GPIO_Init();
 130:Core/Src/main.c ****   MX_DMA_Init();
 131:Core/Src/main.c ****   MX_ADC1_Init();
 132:Core/Src/main.c ****   MX_USART1_UART_Init();
 133:Core/Src/main.c ****   MX_TIM1_Init();
 134:Core/Src/main.c ****   MX_USART2_UART_Init();
 135:Core/Src/main.c ****   MX_USART3_UART_Init();
 136:Core/Src/main.c ****   MX_TIM15_Init();
 137:Core/Src/main.c ****   MX_TIM7_Init();
 138:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   initLCD();
 141:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim7);
 142:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_data, 8);
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* USER CODE END 2 */
 145:Core/Src/main.c **** 
ARM GAS  /tmp/cc0faEhb.s 			page 4


 146:Core/Src/main.c ****   /* Infinite loop */
 147:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 148:Core/Src/main.c ****   while (1)
 149:Core/Src/main.c ****   {
 150:Core/Src/main.c ****     /* USER CODE END WHILE */
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****     CNC_HL_Control(&hmi_info, &enX_tim, &enY_tim, &huart1);
 155:Core/Src/main.c ****     //HAL_Delay(1);
 156:Core/Src/main.c ****   }
 157:Core/Src/main.c ****   /* USER CODE END 3 */
 158:Core/Src/main.c **** }
 159:Core/Src/main.c **** 
 160:Core/Src/main.c **** /**
 161:Core/Src/main.c ****   * @brief System Clock Configuration
 162:Core/Src/main.c ****   * @retval None
 163:Core/Src/main.c ****   */
 164:Core/Src/main.c **** void SystemClock_Config(void)
 165:Core/Src/main.c **** {
 166:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 167:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 170:Core/Src/main.c ****   */
 171:Core/Src/main.c ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 172:Core/Src/main.c ****   {
 173:Core/Src/main.c ****     Error_Handler();
 174:Core/Src/main.c ****   }
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 177:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 178:Core/Src/main.c ****   */
 179:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 180:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 181:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 182:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 183:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 184:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 185:Core/Src/main.c ****   {
 186:Core/Src/main.c ****     Error_Handler();
 187:Core/Src/main.c ****   }
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 190:Core/Src/main.c ****   */
 191:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 192:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 193:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 194:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 195:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 196:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 199:Core/Src/main.c ****   {
 200:Core/Src/main.c ****     Error_Handler();
 201:Core/Src/main.c ****   }
 202:Core/Src/main.c **** }
ARM GAS  /tmp/cc0faEhb.s 			page 5


 203:Core/Src/main.c **** 
 204:Core/Src/main.c **** /**
 205:Core/Src/main.c ****   * @brief Peripherals Common Clock Configuration
 206:Core/Src/main.c ****   * @retval None
 207:Core/Src/main.c ****   */
 208:Core/Src/main.c **** void PeriphCommonClock_Config(void)
 209:Core/Src/main.c **** {
 210:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /** Initializes the peripherals clock
 213:Core/Src/main.c ****   */
 214:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
 215:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 216:Core/Src/main.c ****   PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 217:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 218:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 219:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 220:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 221:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 222:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 223:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 224:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 225:Core/Src/main.c ****   {
 226:Core/Src/main.c ****     Error_Handler();
 227:Core/Src/main.c ****   }
 228:Core/Src/main.c **** }
 229:Core/Src/main.c **** 
 230:Core/Src/main.c **** /**
 231:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 232:Core/Src/main.c ****   * @param None
 233:Core/Src/main.c ****   * @retval None
 234:Core/Src/main.c ****   */
 235:Core/Src/main.c **** static void MX_ADC1_Init(void)
 236:Core/Src/main.c **** {
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /** Common config
 249:Core/Src/main.c ****   */
 250:Core/Src/main.c ****   hadc1.Instance = ADC1;
 251:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 252:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 253:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 254:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 255:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 256:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 257:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 258:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 8;
 259:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
ARM GAS  /tmp/cc0faEhb.s 			page 6


 260:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 261:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 262:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 263:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 264:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 265:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 266:Core/Src/main.c ****   {
 267:Core/Src/main.c ****     Error_Handler();
 268:Core/Src/main.c ****   }
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /** Configure Regular Channel
 271:Core/Src/main.c ****   */
 272:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 273:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 274:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 275:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 276:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 277:Core/Src/main.c ****   sConfig.Offset = 0;
 278:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 279:Core/Src/main.c ****   {
 280:Core/Src/main.c ****     Error_Handler();
 281:Core/Src/main.c ****   }
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /** Configure Regular Channel
 284:Core/Src/main.c ****   */
 285:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_2;
 286:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 287:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 288:Core/Src/main.c ****   {
 289:Core/Src/main.c ****     Error_Handler();
 290:Core/Src/main.c ****   }
 291:Core/Src/main.c **** 
 292:Core/Src/main.c ****   /** Configure Regular Channel
 293:Core/Src/main.c ****   */
 294:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_3;
 295:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 296:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 297:Core/Src/main.c ****   {
 298:Core/Src/main.c ****     Error_Handler();
 299:Core/Src/main.c ****   }
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /** Configure Regular Channel
 302:Core/Src/main.c ****   */
 303:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 304:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 305:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 306:Core/Src/main.c ****   {
 307:Core/Src/main.c ****     Error_Handler();
 308:Core/Src/main.c ****   }
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /** Configure Regular Channel
 311:Core/Src/main.c ****   */
 312:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_9;
 313:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 314:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 315:Core/Src/main.c ****   {
 316:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/cc0faEhb.s 			page 7


 317:Core/Src/main.c ****   }
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /** Configure Regular Channel
 320:Core/Src/main.c ****   */
 321:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_10;
 322:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 323:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 324:Core/Src/main.c ****   {
 325:Core/Src/main.c ****     Error_Handler();
 326:Core/Src/main.c ****   }
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   /** Configure Regular Channel
 329:Core/Src/main.c ****   */
 330:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_12;
 331:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_7;
 332:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 333:Core/Src/main.c ****   {
 334:Core/Src/main.c ****     Error_Handler();
 335:Core/Src/main.c ****   }
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /** Configure Regular Channel
 338:Core/Src/main.c ****   */
 339:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_13;
 340:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_8;
 341:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 342:Core/Src/main.c ****   {
 343:Core/Src/main.c ****     Error_Handler();
 344:Core/Src/main.c ****   }
 345:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 346:Core/Src/main.c **** 
 347:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 348:Core/Src/main.c **** 
 349:Core/Src/main.c **** }
 350:Core/Src/main.c **** 
 351:Core/Src/main.c **** /**
 352:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 353:Core/Src/main.c ****   * @param None
 354:Core/Src/main.c ****   * @retval None
 355:Core/Src/main.c ****   */
 356:Core/Src/main.c **** static void MX_TIM1_Init(void)
 357:Core/Src/main.c **** {
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 360:Core/Src/main.c **** 
 361:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 364:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 365:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 366:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 371:Core/Src/main.c ****   htim1.Instance = TIM1;
 372:Core/Src/main.c ****   htim1.Init.Prescaler = 600;
 373:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  /tmp/cc0faEhb.s 			page 8


 374:Core/Src/main.c ****   htim1.Init.Period = 10;
 375:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 376:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 20;
 377:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 378:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 379:Core/Src/main.c ****   {
 380:Core/Src/main.c ****     Error_Handler();
 381:Core/Src/main.c ****   }
 382:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 383:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 384:Core/Src/main.c ****   {
 385:Core/Src/main.c ****     Error_Handler();
 386:Core/Src/main.c ****   }
 387:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 388:Core/Src/main.c ****   {
 389:Core/Src/main.c ****     Error_Handler();
 390:Core/Src/main.c ****   }
 391:Core/Src/main.c ****   if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 392:Core/Src/main.c ****   {
 393:Core/Src/main.c ****     Error_Handler();
 394:Core/Src/main.c ****   }
 395:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 396:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 397:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 398:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 399:Core/Src/main.c ****   {
 400:Core/Src/main.c ****     Error_Handler();
 401:Core/Src/main.c ****   }
 402:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 403:Core/Src/main.c ****   sConfigOC.Pulse = 5;
 404:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 405:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 406:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 407:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 408:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 409:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 410:Core/Src/main.c ****   {
 411:Core/Src/main.c ****     Error_Handler();
 412:Core/Src/main.c ****   }
 413:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 414:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 415:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 416:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 417:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 418:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 419:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 420:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 421:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 422:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 423:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 424:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 425:Core/Src/main.c ****   {
 426:Core/Src/main.c ****     Error_Handler();
 427:Core/Src/main.c ****   }
 428:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
ARM GAS  /tmp/cc0faEhb.s 			page 9


 431:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 432:Core/Src/main.c **** 
 433:Core/Src/main.c **** }
 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** /**
 436:Core/Src/main.c ****   * @brief TIM7 Initialization Function
 437:Core/Src/main.c ****   * @param None
 438:Core/Src/main.c ****   * @retval None
 439:Core/Src/main.c ****   */
 440:Core/Src/main.c **** static void MX_TIM7_Init(void)
 441:Core/Src/main.c **** {
 442:Core/Src/main.c **** 
 443:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 0 */
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* USER CODE END TIM7_Init 0 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 1 */
 450:Core/Src/main.c **** 
 451:Core/Src/main.c ****   /* USER CODE END TIM7_Init 1 */
 452:Core/Src/main.c ****   htim7.Instance = TIM7;
 453:Core/Src/main.c ****   htim7.Init.Prescaler = 666;
 454:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 455:Core/Src/main.c ****   htim7.Init.Period = 600;
 456:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 457:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 458:Core/Src/main.c ****   {
 459:Core/Src/main.c ****     Error_Handler();
 460:Core/Src/main.c ****   }
 461:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 462:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 463:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 464:Core/Src/main.c ****   {
 465:Core/Src/main.c ****     Error_Handler();
 466:Core/Src/main.c ****   }
 467:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 2 */
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /* USER CODE END TIM7_Init 2 */
 470:Core/Src/main.c **** 
 471:Core/Src/main.c **** }
 472:Core/Src/main.c **** 
 473:Core/Src/main.c **** /**
 474:Core/Src/main.c ****   * @brief TIM15 Initialization Function
 475:Core/Src/main.c ****   * @param None
 476:Core/Src/main.c ****   * @retval None
 477:Core/Src/main.c ****   */
 478:Core/Src/main.c **** static void MX_TIM15_Init(void)
 479:Core/Src/main.c **** {
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   /* USER CODE BEGIN TIM15_Init 0 */
 482:Core/Src/main.c **** 
 483:Core/Src/main.c ****   /* USER CODE END TIM15_Init 0 */
 484:Core/Src/main.c **** 
 485:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 486:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 487:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
ARM GAS  /tmp/cc0faEhb.s 			page 10


 488:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 489:Core/Src/main.c **** 
 490:Core/Src/main.c ****   /* USER CODE BEGIN TIM15_Init 1 */
 491:Core/Src/main.c **** 
 492:Core/Src/main.c ****   /* USER CODE END TIM15_Init 1 */
 493:Core/Src/main.c ****   htim15.Instance = TIM15;
 494:Core/Src/main.c ****   htim15.Init.Prescaler = 600;
 495:Core/Src/main.c ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 496:Core/Src/main.c ****   htim15.Init.Period = 5;
 497:Core/Src/main.c ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 498:Core/Src/main.c ****   htim15.Init.RepetitionCounter = 5;
 499:Core/Src/main.c ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 500:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 501:Core/Src/main.c ****   {
 502:Core/Src/main.c ****     Error_Handler();
 503:Core/Src/main.c ****   }
 504:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 505:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 506:Core/Src/main.c ****   {
 507:Core/Src/main.c ****     Error_Handler();
 508:Core/Src/main.c ****   }
 509:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 510:Core/Src/main.c ****   {
 511:Core/Src/main.c ****     Error_Handler();
 512:Core/Src/main.c ****   }
 513:Core/Src/main.c ****   if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK)
 514:Core/Src/main.c ****   {
 515:Core/Src/main.c ****     Error_Handler();
 516:Core/Src/main.c ****   }
 517:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 518:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 519:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 520:Core/Src/main.c ****   {
 521:Core/Src/main.c ****     Error_Handler();
 522:Core/Src/main.c ****   }
 523:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 524:Core/Src/main.c ****   sConfigOC.Pulse = 2;
 525:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 526:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 527:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 528:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 529:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 530:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 531:Core/Src/main.c ****   {
 532:Core/Src/main.c ****     Error_Handler();
 533:Core/Src/main.c ****   }
 534:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 535:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 536:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 537:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 538:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 539:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 540:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 541:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 542:Core/Src/main.c ****   {
 543:Core/Src/main.c ****     Error_Handler();
 544:Core/Src/main.c ****   }
ARM GAS  /tmp/cc0faEhb.s 			page 11


 545:Core/Src/main.c ****   /* USER CODE BEGIN TIM15_Init 2 */
 546:Core/Src/main.c **** 
 547:Core/Src/main.c ****   /* USER CODE END TIM15_Init 2 */
 548:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim15);
 549:Core/Src/main.c **** 
 550:Core/Src/main.c **** }
 551:Core/Src/main.c **** 
 552:Core/Src/main.c **** /**
 553:Core/Src/main.c ****   * @brief USART1 Initialization Function
 554:Core/Src/main.c ****   * @param None
 555:Core/Src/main.c ****   * @retval None
 556:Core/Src/main.c ****   */
 557:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 558:Core/Src/main.c **** {
 559:Core/Src/main.c **** 
 560:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 561:Core/Src/main.c **** 
 562:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 563:Core/Src/main.c **** 
 564:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 565:Core/Src/main.c **** 
 566:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 567:Core/Src/main.c ****   huart1.Instance = USART1;
 568:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 569:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 570:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 571:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 572:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 573:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 574:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 575:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 576:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 577:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 578:Core/Src/main.c ****   {
 579:Core/Src/main.c ****     Error_Handler();
 580:Core/Src/main.c ****   }
 581:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 582:Core/Src/main.c **** 
 583:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 584:Core/Src/main.c **** 
 585:Core/Src/main.c **** }
 586:Core/Src/main.c **** 
 587:Core/Src/main.c **** /**
 588:Core/Src/main.c ****   * @brief USART2 Initialization Function
 589:Core/Src/main.c ****   * @param None
 590:Core/Src/main.c ****   * @retval None
 591:Core/Src/main.c ****   */
 592:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 593:Core/Src/main.c **** {
 594:Core/Src/main.c **** 
 595:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 596:Core/Src/main.c **** 
 597:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 598:Core/Src/main.c **** 
 599:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 600:Core/Src/main.c **** 
 601:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
ARM GAS  /tmp/cc0faEhb.s 			page 12


 602:Core/Src/main.c ****   huart2.Instance = USART2;
 603:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 604:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 605:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 606:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 607:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 608:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 609:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 610:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 611:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 612:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 613:Core/Src/main.c ****   {
 614:Core/Src/main.c ****     Error_Handler();
 615:Core/Src/main.c ****   }
 616:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 617:Core/Src/main.c **** 
 618:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 619:Core/Src/main.c **** 
 620:Core/Src/main.c **** }
 621:Core/Src/main.c **** 
 622:Core/Src/main.c **** /**
 623:Core/Src/main.c ****   * @brief USART3 Initialization Function
 624:Core/Src/main.c ****   * @param None
 625:Core/Src/main.c ****   * @retval None
 626:Core/Src/main.c ****   */
 627:Core/Src/main.c **** static void MX_USART3_UART_Init(void)
 628:Core/Src/main.c **** {
 629:Core/Src/main.c **** 
 630:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 0 */
 631:Core/Src/main.c **** 
 632:Core/Src/main.c ****   /* USER CODE END USART3_Init 0 */
 633:Core/Src/main.c **** 
 634:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 1 */
 635:Core/Src/main.c **** 
 636:Core/Src/main.c ****   /* USER CODE END USART3_Init 1 */
 637:Core/Src/main.c ****   huart3.Instance = USART3;
 638:Core/Src/main.c ****   huart3.Init.BaudRate = 115200;
 639:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 640:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 641:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 642:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 643:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 644:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 645:Core/Src/main.c ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 646:Core/Src/main.c ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 647:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 648:Core/Src/main.c ****   {
 649:Core/Src/main.c ****     Error_Handler();
 650:Core/Src/main.c ****   }
 651:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 2 */
 652:Core/Src/main.c **** 
 653:Core/Src/main.c ****   /* USER CODE END USART3_Init 2 */
 654:Core/Src/main.c **** 
 655:Core/Src/main.c **** }
 656:Core/Src/main.c **** 
 657:Core/Src/main.c **** /**
 658:Core/Src/main.c ****   * Enable DMA controller clock
ARM GAS  /tmp/cc0faEhb.s 			page 13


 659:Core/Src/main.c ****   */
 660:Core/Src/main.c **** static void MX_DMA_Init(void)
 661:Core/Src/main.c **** {
  28              		.loc 1 661 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 82B0     		sub	sp, sp, #8
  34              		.cfi_def_cfa_offset 8
 662:Core/Src/main.c **** 
 663:Core/Src/main.c ****   /* DMA controller clock enable */
 664:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
  35              		.loc 1 664 3 view .LVU1
  36              	.LBB4:
  37              		.loc 1 664 3 view .LVU2
  38              		.loc 1 664 3 view .LVU3
  39 0002 064B     		ldr	r3, .L3
  40 0004 9A6C     		ldr	r2, [r3, #72]
  41 0006 42F00102 		orr	r2, r2, #1
  42 000a 9A64     		str	r2, [r3, #72]
  43              		.loc 1 664 3 view .LVU4
  44 000c 9B6C     		ldr	r3, [r3, #72]
  45 000e 03F00103 		and	r3, r3, #1
  46 0012 0193     		str	r3, [sp, #4]
  47              		.loc 1 664 3 view .LVU5
  48 0014 019B     		ldr	r3, [sp, #4]
  49              	.LBE4:
  50              		.loc 1 664 3 view .LVU6
 665:Core/Src/main.c **** 
 666:Core/Src/main.c **** }
  51              		.loc 1 666 1 is_stmt 0 view .LVU7
  52 0016 02B0     		add	sp, sp, #8
  53              		.cfi_def_cfa_offset 0
  54              		@ sp needed
  55 0018 7047     		bx	lr
  56              	.L4:
  57 001a 00BF     		.align	2
  58              	.L3:
  59 001c 00100240 		.word	1073876992
  60              		.cfi_endproc
  61              	.LFE301:
  63              		.section	.text.MX_GPIO_Init,"ax",%progbits
  64              		.align	1
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  69              	MX_GPIO_Init:
  70              	.LFB302:
 667:Core/Src/main.c **** 
 668:Core/Src/main.c **** /**
 669:Core/Src/main.c ****   * @brief GPIO Initialization Function
 670:Core/Src/main.c ****   * @param None
 671:Core/Src/main.c ****   * @retval None
 672:Core/Src/main.c ****   */
 673:Core/Src/main.c **** static void MX_GPIO_Init(void)
 674:Core/Src/main.c **** {
ARM GAS  /tmp/cc0faEhb.s 			page 14


  71              		.loc 1 674 1 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 48
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  76              		.cfi_def_cfa_offset 28
  77              		.cfi_offset 4, -28
  78              		.cfi_offset 5, -24
  79              		.cfi_offset 6, -20
  80              		.cfi_offset 7, -16
  81              		.cfi_offset 8, -12
  82              		.cfi_offset 9, -8
  83              		.cfi_offset 14, -4
  84 0004 8DB0     		sub	sp, sp, #52
  85              		.cfi_def_cfa_offset 80
 675:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  86              		.loc 1 675 3 view .LVU9
  87              		.loc 1 675 20 is_stmt 0 view .LVU10
  88 0006 0024     		movs	r4, #0
  89 0008 0794     		str	r4, [sp, #28]
  90 000a 0894     		str	r4, [sp, #32]
  91 000c 0994     		str	r4, [sp, #36]
  92 000e 0A94     		str	r4, [sp, #40]
  93 0010 0B94     		str	r4, [sp, #44]
 676:Core/Src/main.c **** 
 677:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 678:Core/Src/main.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
  94              		.loc 1 678 3 is_stmt 1 view .LVU11
  95              	.LBB5:
  96              		.loc 1 678 3 view .LVU12
  97              		.loc 1 678 3 view .LVU13
  98 0012 584B     		ldr	r3, .L7
  99 0014 DA6C     		ldr	r2, [r3, #76]
 100 0016 42F01002 		orr	r2, r2, #16
 101 001a DA64     		str	r2, [r3, #76]
 102              		.loc 1 678 3 view .LVU14
 103 001c DA6C     		ldr	r2, [r3, #76]
 104 001e 02F01002 		and	r2, r2, #16
 105 0022 0192     		str	r2, [sp, #4]
 106              		.loc 1 678 3 view .LVU15
 107 0024 019A     		ldr	r2, [sp, #4]
 108              	.LBE5:
 109              		.loc 1 678 3 view .LVU16
 679:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 110              		.loc 1 679 3 view .LVU17
 111              	.LBB6:
 112              		.loc 1 679 3 view .LVU18
 113              		.loc 1 679 3 view .LVU19
 114 0026 DA6C     		ldr	r2, [r3, #76]
 115 0028 42F00402 		orr	r2, r2, #4
 116 002c DA64     		str	r2, [r3, #76]
 117              		.loc 1 679 3 view .LVU20
 118 002e DA6C     		ldr	r2, [r3, #76]
 119 0030 02F00402 		and	r2, r2, #4
 120 0034 0292     		str	r2, [sp, #8]
 121              		.loc 1 679 3 view .LVU21
 122 0036 029A     		ldr	r2, [sp, #8]
ARM GAS  /tmp/cc0faEhb.s 			page 15


 123              	.LBE6:
 124              		.loc 1 679 3 view .LVU22
 680:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 125              		.loc 1 680 3 view .LVU23
 126              	.LBB7:
 127              		.loc 1 680 3 view .LVU24
 128              		.loc 1 680 3 view .LVU25
 129 0038 DA6C     		ldr	r2, [r3, #76]
 130 003a 42F08002 		orr	r2, r2, #128
 131 003e DA64     		str	r2, [r3, #76]
 132              		.loc 1 680 3 view .LVU26
 133 0040 DA6C     		ldr	r2, [r3, #76]
 134 0042 02F08002 		and	r2, r2, #128
 135 0046 0392     		str	r2, [sp, #12]
 136              		.loc 1 680 3 view .LVU27
 137 0048 039A     		ldr	r2, [sp, #12]
 138              	.LBE7:
 139              		.loc 1 680 3 view .LVU28
 681:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 140              		.loc 1 681 3 view .LVU29
 141              	.LBB8:
 142              		.loc 1 681 3 view .LVU30
 143              		.loc 1 681 3 view .LVU31
 144 004a DA6C     		ldr	r2, [r3, #76]
 145 004c 42F00102 		orr	r2, r2, #1
 146 0050 DA64     		str	r2, [r3, #76]
 147              		.loc 1 681 3 view .LVU32
 148 0052 DA6C     		ldr	r2, [r3, #76]
 149 0054 02F00102 		and	r2, r2, #1
 150 0058 0492     		str	r2, [sp, #16]
 151              		.loc 1 681 3 view .LVU33
 152 005a 049A     		ldr	r2, [sp, #16]
 153              	.LBE8:
 154              		.loc 1 681 3 view .LVU34
 682:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 155              		.loc 1 682 3 view .LVU35
 156              	.LBB9:
 157              		.loc 1 682 3 view .LVU36
 158              		.loc 1 682 3 view .LVU37
 159 005c DA6C     		ldr	r2, [r3, #76]
 160 005e 42F00202 		orr	r2, r2, #2
 161 0062 DA64     		str	r2, [r3, #76]
 162              		.loc 1 682 3 view .LVU38
 163 0064 DA6C     		ldr	r2, [r3, #76]
 164 0066 02F00202 		and	r2, r2, #2
 165 006a 0592     		str	r2, [sp, #20]
 166              		.loc 1 682 3 view .LVU39
 167 006c 059A     		ldr	r2, [sp, #20]
 168              	.LBE9:
 169              		.loc 1 682 3 view .LVU40
 683:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 170              		.loc 1 683 3 view .LVU41
 171              	.LBB10:
 172              		.loc 1 683 3 view .LVU42
 173              		.loc 1 683 3 view .LVU43
 174 006e DA6C     		ldr	r2, [r3, #76]
 175 0070 42F00802 		orr	r2, r2, #8
ARM GAS  /tmp/cc0faEhb.s 			page 16


 176 0074 DA64     		str	r2, [r3, #76]
 177              		.loc 1 683 3 view .LVU44
 178 0076 DB6C     		ldr	r3, [r3, #76]
 179 0078 03F00803 		and	r3, r3, #8
 180 007c 0693     		str	r3, [sp, #24]
 181              		.loc 1 683 3 view .LVU45
 182 007e 069B     		ldr	r3, [sp, #24]
 183              	.LBE10:
 184              		.loc 1 683 3 view .LVU46
 684:Core/Src/main.c **** 
 685:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 686:Core/Src/main.c ****   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 185              		.loc 1 686 3 view .LVU47
 186 0080 2246     		mov	r2, r4
 187 0082 0221     		movs	r1, #2
 188 0084 4FF09040 		mov	r0, #1207959552
 189 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 190              	.LVL0:
 687:Core/Src/main.c **** 
 688:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 689:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, PO0_Pin|SW2_Pin|SW3_Pin, GPIO_PIN_RESET);
 191              		.loc 1 689 3 view .LVU48
 192 008c DFF8F090 		ldr	r9, .L7+12
 193 0090 2246     		mov	r2, r4
 194 0092 E021     		movs	r1, #224
 195 0094 4846     		mov	r0, r9
 196 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 197              	.LVL1:
 690:Core/Src/main.c **** 
 691:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 692:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, PO1_Pin|PO2_Pin|DIR3_Pin|D4_Pin
 198              		.loc 1 692 3 view .LVU49
 199 009a 374E     		ldr	r6, .L7+4
 200 009c 2246     		mov	r2, r4
 201 009e 41F2C531 		movw	r1, #5061
 202 00a2 3046     		mov	r0, r6
 203 00a4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 204              	.LVL2:
 693:Core/Src/main.c ****                           |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 694:Core/Src/main.c **** 
 695:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 696:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOE, PO3_Pin|O0_Pin|O1_Pin|O2_Pin
 205              		.loc 1 696 3 view .LVU50
 206 00a8 DFF8D880 		ldr	r8, .L7+16
 207 00ac 2246     		mov	r2, r4
 208 00ae 4FF68371 		movw	r1, #65411
 209 00b2 4046     		mov	r0, r8
 210 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 211              	.LVL3:
 697:Core/Src/main.c ****                           |O3_Pin|O4_Pin|O5_Pin|O6_Pin
 698:Core/Src/main.c ****                           |O7_Pin|EN_Pin|RS_Pin, GPIO_PIN_RESET);
 699:Core/Src/main.c **** 
 700:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 701:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOD, O10_Pin|O11_Pin|O12_Pin|O13_Pin
 212              		.loc 1 701 3 view .LVU51
 213 00b8 304F     		ldr	r7, .L7+8
 214 00ba 2246     		mov	r2, r4
ARM GAS  /tmp/cc0faEhb.s 			page 17


 215 00bc 4FF47F41 		mov	r1, #65280
 216 00c0 3846     		mov	r0, r7
 217 00c2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 218              	.LVL4:
 702:Core/Src/main.c ****                           |O14_Pin|O15_Pin|SW0_Pin|SW1_Pin, GPIO_PIN_RESET);
 703:Core/Src/main.c **** 
 704:Core/Src/main.c ****   /*Configure GPIO pins : PB7_Pin PB6_Pin PB5_Pin PB4_Pin
 705:Core/Src/main.c ****                            PB3_Pin */
 706:Core/Src/main.c ****   GPIO_InitStruct.Pin = PB7_Pin|PB6_Pin|PB5_Pin|PB4_Pin
 219              		.loc 1 706 3 view .LVU52
 220              		.loc 1 706 23 is_stmt 0 view .LVU53
 221 00c6 7C23     		movs	r3, #124
 222 00c8 0793     		str	r3, [sp, #28]
 707:Core/Src/main.c ****                           |PB3_Pin;
 708:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 223              		.loc 1 708 3 is_stmt 1 view .LVU54
 224              		.loc 1 708 24 is_stmt 0 view .LVU55
 225 00ca 0894     		str	r4, [sp, #32]
 709:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 226              		.loc 1 709 3 is_stmt 1 view .LVU56
 227              		.loc 1 709 24 is_stmt 0 view .LVU57
 228 00cc 0994     		str	r4, [sp, #36]
 710:Core/Src/main.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 229              		.loc 1 710 3 is_stmt 1 view .LVU58
 230 00ce 07A9     		add	r1, sp, #28
 231 00d0 4046     		mov	r0, r8
 232 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL5:
 711:Core/Src/main.c **** 
 712:Core/Src/main.c ****   /*Configure GPIO pins : PB2_Pin PB1_Pin PB0_Pin */
 713:Core/Src/main.c ****   GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin|PB0_Pin;
 234              		.loc 1 713 3 view .LVU59
 235              		.loc 1 713 23 is_stmt 0 view .LVU60
 236 00d6 4FF46043 		mov	r3, #57344
 237 00da 0793     		str	r3, [sp, #28]
 714:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 238              		.loc 1 714 3 is_stmt 1 view .LVU61
 239              		.loc 1 714 24 is_stmt 0 view .LVU62
 240 00dc 0894     		str	r4, [sp, #32]
 715:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 241              		.loc 1 715 3 is_stmt 1 view .LVU63
 242              		.loc 1 715 24 is_stmt 0 view .LVU64
 243 00de 0994     		str	r4, [sp, #36]
 716:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 244              		.loc 1 716 3 is_stmt 1 view .LVU65
 245 00e0 07A9     		add	r1, sp, #28
 246 00e2 4846     		mov	r0, r9
 247 00e4 FFF7FEFF 		bl	HAL_GPIO_Init
 248              	.LVL6:
 717:Core/Src/main.c **** 
 718:Core/Src/main.c ****   /*Configure GPIO pin : DIR2_Pin */
 719:Core/Src/main.c ****   GPIO_InitStruct.Pin = DIR2_Pin;
 249              		.loc 1 719 3 view .LVU66
 250              		.loc 1 719 23 is_stmt 0 view .LVU67
 251 00e8 0223     		movs	r3, #2
 252 00ea 0793     		str	r3, [sp, #28]
 720:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
ARM GAS  /tmp/cc0faEhb.s 			page 18


 253              		.loc 1 720 3 is_stmt 1 view .LVU68
 254              		.loc 1 720 24 is_stmt 0 view .LVU69
 255 00ec 0125     		movs	r5, #1
 256 00ee 0895     		str	r5, [sp, #32]
 721:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 257              		.loc 1 721 3 is_stmt 1 view .LVU70
 258              		.loc 1 721 24 is_stmt 0 view .LVU71
 259 00f0 0994     		str	r4, [sp, #36]
 722:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 260              		.loc 1 722 3 is_stmt 1 view .LVU72
 261              		.loc 1 722 25 is_stmt 0 view .LVU73
 262 00f2 0A94     		str	r4, [sp, #40]
 723:Core/Src/main.c ****   HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 263              		.loc 1 723 3 is_stmt 1 view .LVU74
 264 00f4 07A9     		add	r1, sp, #28
 265 00f6 4FF09040 		mov	r0, #1207959552
 266 00fa FFF7FEFF 		bl	HAL_GPIO_Init
 267              	.LVL7:
 724:Core/Src/main.c **** 
 725:Core/Src/main.c ****   /*Configure GPIO pins : PO0_Pin SW2_Pin SW3_Pin */
 726:Core/Src/main.c ****   GPIO_InitStruct.Pin = PO0_Pin|SW2_Pin|SW3_Pin;
 268              		.loc 1 726 3 view .LVU75
 269              		.loc 1 726 23 is_stmt 0 view .LVU76
 270 00fe E023     		movs	r3, #224
 271 0100 0793     		str	r3, [sp, #28]
 727:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 272              		.loc 1 727 3 is_stmt 1 view .LVU77
 273              		.loc 1 727 24 is_stmt 0 view .LVU78
 274 0102 0895     		str	r5, [sp, #32]
 728:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 275              		.loc 1 728 3 is_stmt 1 view .LVU79
 276              		.loc 1 728 24 is_stmt 0 view .LVU80
 277 0104 0994     		str	r4, [sp, #36]
 729:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 278              		.loc 1 729 3 is_stmt 1 view .LVU81
 279              		.loc 1 729 25 is_stmt 0 view .LVU82
 280 0106 0A94     		str	r4, [sp, #40]
 730:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 281              		.loc 1 730 3 is_stmt 1 view .LVU83
 282 0108 07A9     		add	r1, sp, #28
 283 010a 4846     		mov	r0, r9
 284 010c FFF7FEFF 		bl	HAL_GPIO_Init
 285              	.LVL8:
 731:Core/Src/main.c **** 
 732:Core/Src/main.c ****   /*Configure GPIO pins : PO1_Pin PO2_Pin DIR3_Pin D4_Pin
 733:Core/Src/main.c ****                            D5_Pin D6_Pin D7_Pin */
 734:Core/Src/main.c ****   GPIO_InitStruct.Pin = PO1_Pin|PO2_Pin|DIR3_Pin|D4_Pin
 286              		.loc 1 734 3 view .LVU84
 287              		.loc 1 734 23 is_stmt 0 view .LVU85
 288 0110 41F2C533 		movw	r3, #5061
 289 0114 0793     		str	r3, [sp, #28]
 735:Core/Src/main.c ****                           |D5_Pin|D6_Pin|D7_Pin;
 736:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 290              		.loc 1 736 3 is_stmt 1 view .LVU86
 291              		.loc 1 736 24 is_stmt 0 view .LVU87
 292 0116 0895     		str	r5, [sp, #32]
 737:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  /tmp/cc0faEhb.s 			page 19


 293              		.loc 1 737 3 is_stmt 1 view .LVU88
 294              		.loc 1 737 24 is_stmt 0 view .LVU89
 295 0118 0994     		str	r4, [sp, #36]
 738:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 296              		.loc 1 738 3 is_stmt 1 view .LVU90
 297              		.loc 1 738 25 is_stmt 0 view .LVU91
 298 011a 0A94     		str	r4, [sp, #40]
 739:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 299              		.loc 1 739 3 is_stmt 1 view .LVU92
 300 011c 07A9     		add	r1, sp, #28
 301 011e 3046     		mov	r0, r6
 302 0120 FFF7FEFF 		bl	HAL_GPIO_Init
 303              	.LVL9:
 740:Core/Src/main.c **** 
 741:Core/Src/main.c ****   /*Configure GPIO pins : PO3_Pin O0_Pin O1_Pin O2_Pin
 742:Core/Src/main.c ****                            O3_Pin O4_Pin O5_Pin O6_Pin
 743:Core/Src/main.c ****                            O7_Pin EN_Pin RS_Pin */
 744:Core/Src/main.c ****   GPIO_InitStruct.Pin = PO3_Pin|O0_Pin|O1_Pin|O2_Pin
 304              		.loc 1 744 3 view .LVU93
 305              		.loc 1 744 23 is_stmt 0 view .LVU94
 306 0124 4FF68373 		movw	r3, #65411
 307 0128 0793     		str	r3, [sp, #28]
 745:Core/Src/main.c ****                           |O3_Pin|O4_Pin|O5_Pin|O6_Pin
 746:Core/Src/main.c ****                           |O7_Pin|EN_Pin|RS_Pin;
 747:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 308              		.loc 1 747 3 is_stmt 1 view .LVU95
 309              		.loc 1 747 24 is_stmt 0 view .LVU96
 310 012a 0895     		str	r5, [sp, #32]
 748:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 311              		.loc 1 748 3 is_stmt 1 view .LVU97
 312              		.loc 1 748 24 is_stmt 0 view .LVU98
 313 012c 0994     		str	r4, [sp, #36]
 749:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 314              		.loc 1 749 3 is_stmt 1 view .LVU99
 315              		.loc 1 749 25 is_stmt 0 view .LVU100
 316 012e 0A94     		str	r4, [sp, #40]
 750:Core/Src/main.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 317              		.loc 1 750 3 is_stmt 1 view .LVU101
 318 0130 07A9     		add	r1, sp, #28
 319 0132 4046     		mov	r0, r8
 320 0134 FFF7FEFF 		bl	HAL_GPIO_Init
 321              	.LVL10:
 751:Core/Src/main.c **** 
 752:Core/Src/main.c ****   /*Configure GPIO pins : O10_Pin O11_Pin O12_Pin O13_Pin
 753:Core/Src/main.c ****                            O14_Pin O15_Pin SW0_Pin SW1_Pin */
 754:Core/Src/main.c ****   GPIO_InitStruct.Pin = O10_Pin|O11_Pin|O12_Pin|O13_Pin
 322              		.loc 1 754 3 view .LVU102
 323              		.loc 1 754 23 is_stmt 0 view .LVU103
 324 0138 4FF47F43 		mov	r3, #65280
 325 013c 0793     		str	r3, [sp, #28]
 755:Core/Src/main.c ****                           |O14_Pin|O15_Pin|SW0_Pin|SW1_Pin;
 756:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 326              		.loc 1 756 3 is_stmt 1 view .LVU104
 327              		.loc 1 756 24 is_stmt 0 view .LVU105
 328 013e 0895     		str	r5, [sp, #32]
 757:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 329              		.loc 1 757 3 is_stmt 1 view .LVU106
ARM GAS  /tmp/cc0faEhb.s 			page 20


 330              		.loc 1 757 24 is_stmt 0 view .LVU107
 331 0140 0994     		str	r4, [sp, #36]
 758:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 332              		.loc 1 758 3 is_stmt 1 view .LVU108
 333              		.loc 1 758 25 is_stmt 0 view .LVU109
 334 0142 0A94     		str	r4, [sp, #40]
 759:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 335              		.loc 1 759 3 is_stmt 1 view .LVU110
 336 0144 07A9     		add	r1, sp, #28
 337 0146 3846     		mov	r0, r7
 338 0148 FFF7FEFF 		bl	HAL_GPIO_Init
 339              	.LVL11:
 760:Core/Src/main.c **** 
 761:Core/Src/main.c ****   /*Configure GPIO pins : I0_Pin I1_Pin I2_Pin I3_Pin
 762:Core/Src/main.c ****                            I4_Pin I5_Pin I6_Pin */
 763:Core/Src/main.c ****   GPIO_InitStruct.Pin = I0_Pin|I1_Pin|I2_Pin|I3_Pin
 340              		.loc 1 763 3 view .LVU111
 341              		.loc 1 763 23 is_stmt 0 view .LVU112
 342 014c FB23     		movs	r3, #251
 343 014e 0793     		str	r3, [sp, #28]
 764:Core/Src/main.c ****                           |I4_Pin|I5_Pin|I6_Pin;
 765:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 344              		.loc 1 765 3 is_stmt 1 view .LVU113
 345              		.loc 1 765 24 is_stmt 0 view .LVU114
 346 0150 0894     		str	r4, [sp, #32]
 766:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 347              		.loc 1 766 3 is_stmt 1 view .LVU115
 348              		.loc 1 766 24 is_stmt 0 view .LVU116
 349 0152 0994     		str	r4, [sp, #36]
 767:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 350              		.loc 1 767 3 is_stmt 1 view .LVU117
 351 0154 07A9     		add	r1, sp, #28
 352 0156 3846     		mov	r0, r7
 353 0158 FFF7FEFF 		bl	HAL_GPIO_Init
 354              	.LVL12:
 768:Core/Src/main.c **** 
 769:Core/Src/main.c ****   /*Configure GPIO pin : I7_Pin */
 770:Core/Src/main.c ****   GPIO_InitStruct.Pin = I7_Pin;
 355              		.loc 1 770 3 view .LVU118
 356              		.loc 1 770 23 is_stmt 0 view .LVU119
 357 015c 0823     		movs	r3, #8
 358 015e 0793     		str	r3, [sp, #28]
 771:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 359              		.loc 1 771 3 is_stmt 1 view .LVU120
 360              		.loc 1 771 24 is_stmt 0 view .LVU121
 361 0160 0894     		str	r4, [sp, #32]
 772:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 362              		.loc 1 772 3 is_stmt 1 view .LVU122
 363              		.loc 1 772 24 is_stmt 0 view .LVU123
 364 0162 0994     		str	r4, [sp, #36]
 773:Core/Src/main.c ****   HAL_GPIO_Init(I7_GPIO_Port, &GPIO_InitStruct);
 365              		.loc 1 773 3 is_stmt 1 view .LVU124
 366 0164 07A9     		add	r1, sp, #28
 367 0166 3046     		mov	r0, r6
 368 0168 FFF7FEFF 		bl	HAL_GPIO_Init
 369              	.LVL13:
 774:Core/Src/main.c **** 
ARM GAS  /tmp/cc0faEhb.s 			page 21


 775:Core/Src/main.c **** }
 370              		.loc 1 775 1 is_stmt 0 view .LVU125
 371 016c 0DB0     		add	sp, sp, #52
 372              		.cfi_def_cfa_offset 28
 373              		@ sp needed
 374 016e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 375              	.L8:
 376 0172 00BF     		.align	2
 377              	.L7:
 378 0174 00100240 		.word	1073876992
 379 0178 00040048 		.word	1207960576
 380 017c 000C0048 		.word	1207962624
 381 0180 00080048 		.word	1207961600
 382 0184 00100048 		.word	1207963648
 383              		.cfi_endproc
 384              	.LFE302:
 386              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 387              		.align	1
 388              		.global	HAL_TIM_PeriodElapsedCallback
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 393              	HAL_TIM_PeriodElapsedCallback:
 394              	.LVL14:
 395              	.LFB303:
 776:Core/Src/main.c **** 
 777:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 778:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
 779:Core/Src/main.c **** {
 396              		.loc 1 779 1 is_stmt 1 view -0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400              		.loc 1 779 1 is_stmt 0 view .LVU127
 401 0000 08B5     		push	{r3, lr}
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 3, -8
 404              		.cfi_offset 14, -4
 780:Core/Src/main.c ****   HMI_Update(&hmi_info, adc_data);
 405              		.loc 1 780 3 is_stmt 1 view .LVU128
 406 0002 0249     		ldr	r1, .L11
 407 0004 0248     		ldr	r0, .L11+4
 408              	.LVL15:
 409              		.loc 1 780 3 is_stmt 0 view .LVU129
 410 0006 FFF7FEFF 		bl	HMI_Update
 411              	.LVL16:
 781:Core/Src/main.c **** }
 412              		.loc 1 781 1 view .LVU130
 413 000a 08BD     		pop	{r3, pc}
 414              	.L12:
 415              		.align	2
 416              	.L11:
 417 000c 00000000 		.word	.LANCHOR0
 418 0010 00000000 		.word	.LANCHOR1
 419              		.cfi_endproc
 420              	.LFE303:
 422              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/cc0faEhb.s 			page 22


 423              		.align	2
 424              	.LC0:
 425 0000 71756920 		.ascii	"qui si \303\250\012rotto tutto\000"
 425      736920C3 
 425      A80A726F 
 425      74746F20 
 425      74757474 
 426              		.section	.text.Error_Handler,"ax",%progbits
 427              		.align	1
 428              		.global	Error_Handler
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 433              	Error_Handler:
 434              	.LFB304:
 782:Core/Src/main.c **** /* USER CODE END 4 */
 783:Core/Src/main.c **** 
 784:Core/Src/main.c **** /**
 785:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 786:Core/Src/main.c ****   * @retval None
 787:Core/Src/main.c ****   */
 788:Core/Src/main.c **** void Error_Handler(void)
 789:Core/Src/main.c **** {
 435              		.loc 1 789 1 is_stmt 1 view -0
 436              		.cfi_startproc
 437              		@ Volatile: function does not return.
 438              		@ args = 0, pretend = 0, frame = 24
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440 0000 00B5     		push	{lr}
 441              		.cfi_def_cfa_offset 4
 442              		.cfi_offset 14, -4
 443 0002 87B0     		sub	sp, sp, #28
 444              		.cfi_def_cfa_offset 32
 790:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 791:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 792:Core/Src/main.c ****   __disable_irq();
 445              		.loc 1 792 3 view .LVU132
 446              	.LBB11:
 447              	.LBI11:
 448              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/cc0faEhb.s 			page 23


  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
ARM GAS  /tmp/cc0faEhb.s 			page 24


  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
ARM GAS  /tmp/cc0faEhb.s 			page 25


 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  /tmp/cc0faEhb.s 			page 26


 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 449              		.loc 2 207 27 view .LVU133
 450              	.LBB12:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 451              		.loc 2 209 3 view .LVU134
 452              		.syntax unified
 453              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 454 0004 72B6     		cpsid i
 455              	@ 0 "" 2
 456              		.thumb
 457              		.syntax unified
 458              	.LBE12:
 459              	.LBE11:
 793:Core/Src/main.c ****   char textStr[] = "qui si è\nrotto tutto";
 460              		.loc 1 793 3 view .LVU135
 461              		.loc 1 793 8 is_stmt 0 view .LVU136
 462 0006 EC46     		mov	ip, sp
 463 0008 094C     		ldr	r4, .L16
 464 000a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 465 000c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 466 0010 94E80300 		ldm	r4, {r0, r1}
 467 0014 4CF8040B 		str	r0, [ip], #4
 468 0018 ACF80010 		strh	r1, [ip]	@ movhi
 794:Core/Src/main.c ****   clearLCD();
 469              		.loc 1 794 3 is_stmt 1 view .LVU137
 470 001c FFF7FEFF 		bl	clearLCD
 471              	.LVL17:
 795:Core/Src/main.c ****   setCursor(0,  0);
 472              		.loc 1 795 3 view .LVU138
 473 0020 0021     		movs	r1, #0
 474 0022 0846     		mov	r0, r1
 475 0024 FFF7FEFF 		bl	setCursor
 476              	.LVL18:
 796:Core/Src/main.c ****   writeLCD(textStr);
 477              		.loc 1 796 3 view .LVU139
 478 0028 6846     		mov	r0, sp
 479 002a FFF7FEFF 		bl	writeLCD
 480              	.LVL19:
ARM GAS  /tmp/cc0faEhb.s 			page 27


 481              	.L14:
 797:Core/Src/main.c ****   while (1)
 482              		.loc 1 797 3 discriminator 1 view .LVU140
 798:Core/Src/main.c ****   {
 799:Core/Src/main.c ****   }
 483              		.loc 1 799 3 discriminator 1 view .LVU141
 797:Core/Src/main.c ****   while (1)
 484              		.loc 1 797 9 discriminator 1 view .LVU142
 485 002e FEE7     		b	.L14
 486              	.L17:
 487              		.align	2
 488              	.L16:
 489 0030 00000000 		.word	.LC0
 490              		.cfi_endproc
 491              	.LFE304:
 493              		.section	.text.MX_ADC1_Init,"ax",%progbits
 494              		.align	1
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 499              	MX_ADC1_Init:
 500              	.LFB294:
 236:Core/Src/main.c **** 
 501              		.loc 1 236 1 view -0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 24
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505 0000 00B5     		push	{lr}
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 14, -4
 508 0002 87B0     		sub	sp, sp, #28
 509              		.cfi_def_cfa_offset 32
 242:Core/Src/main.c **** 
 510              		.loc 1 242 3 view .LVU144
 242:Core/Src/main.c **** 
 511              		.loc 1 242 26 is_stmt 0 view .LVU145
 512 0004 0023     		movs	r3, #0
 513 0006 0093     		str	r3, [sp]
 514 0008 0193     		str	r3, [sp, #4]
 515 000a 0293     		str	r3, [sp, #8]
 516 000c 0393     		str	r3, [sp, #12]
 517 000e 0493     		str	r3, [sp, #16]
 518 0010 0593     		str	r3, [sp, #20]
 250:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 519              		.loc 1 250 3 is_stmt 1 view .LVU146
 250:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 520              		.loc 1 250 18 is_stmt 0 view .LVU147
 521 0012 4448     		ldr	r0, .L38
 522 0014 444A     		ldr	r2, .L38+4
 523 0016 0260     		str	r2, [r0]
 251:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 524              		.loc 1 251 3 is_stmt 1 view .LVU148
 251:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 525              		.loc 1 251 29 is_stmt 0 view .LVU149
 526 0018 4360     		str	r3, [r0, #4]
 252:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 527              		.loc 1 252 3 is_stmt 1 view .LVU150
ARM GAS  /tmp/cc0faEhb.s 			page 28


 252:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 528              		.loc 1 252 25 is_stmt 0 view .LVU151
 529 001a 8360     		str	r3, [r0, #8]
 253:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 530              		.loc 1 253 3 is_stmt 1 view .LVU152
 253:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 531              		.loc 1 253 24 is_stmt 0 view .LVU153
 532 001c C360     		str	r3, [r0, #12]
 254:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 533              		.loc 1 254 3 is_stmt 1 view .LVU154
 254:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 534              		.loc 1 254 27 is_stmt 0 view .LVU155
 535 001e 0122     		movs	r2, #1
 536 0020 0261     		str	r2, [r0, #16]
 255:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 537              		.loc 1 255 3 is_stmt 1 view .LVU156
 255:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 538              		.loc 1 255 27 is_stmt 0 view .LVU157
 539 0022 0821     		movs	r1, #8
 540 0024 4161     		str	r1, [r0, #20]
 256:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 541              		.loc 1 256 3 is_stmt 1 view .LVU158
 256:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 542              		.loc 1 256 31 is_stmt 0 view .LVU159
 543 0026 0376     		strb	r3, [r0, #24]
 257:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 8;
 544              		.loc 1 257 3 is_stmt 1 view .LVU160
 257:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 8;
 545              		.loc 1 257 33 is_stmt 0 view .LVU161
 546 0028 4276     		strb	r2, [r0, #25]
 258:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 547              		.loc 1 258 3 is_stmt 1 view .LVU162
 258:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 548              		.loc 1 258 30 is_stmt 0 view .LVU163
 549 002a C161     		str	r1, [r0, #28]
 259:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 550              		.loc 1 259 3 is_stmt 1 view .LVU164
 259:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 551              		.loc 1 259 36 is_stmt 0 view .LVU165
 552 002c 80F82030 		strb	r3, [r0, #32]
 260:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 553              		.loc 1 260 3 is_stmt 1 view .LVU166
 260:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 554              		.loc 1 260 31 is_stmt 0 view .LVU167
 555 0030 8362     		str	r3, [r0, #40]
 261:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 556              		.loc 1 261 3 is_stmt 1 view .LVU168
 261:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 557              		.loc 1 261 35 is_stmt 0 view .LVU169
 558 0032 C362     		str	r3, [r0, #44]
 262:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 559              		.loc 1 262 3 is_stmt 1 view .LVU170
 262:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 560              		.loc 1 262 36 is_stmt 0 view .LVU171
 561 0034 80F83020 		strb	r2, [r0, #48]
 263:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 562              		.loc 1 263 3 is_stmt 1 view .LVU172
ARM GAS  /tmp/cc0faEhb.s 			page 29


 263:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 563              		.loc 1 263 22 is_stmt 0 view .LVU173
 564 0038 4FF48052 		mov	r2, #4096
 565 003c 4263     		str	r2, [r0, #52]
 264:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 566              		.loc 1 264 3 is_stmt 1 view .LVU174
 264:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 567              		.loc 1 264 31 is_stmt 0 view .LVU175
 568 003e 80F83830 		strb	r3, [r0, #56]
 265:Core/Src/main.c ****   {
 569              		.loc 1 265 3 is_stmt 1 view .LVU176
 265:Core/Src/main.c ****   {
 570              		.loc 1 265 7 is_stmt 0 view .LVU177
 571 0042 FFF7FEFF 		bl	HAL_ADC_Init
 572              	.LVL20:
 265:Core/Src/main.c ****   {
 573              		.loc 1 265 6 view .LVU178
 574 0046 0028     		cmp	r0, #0
 575 0048 5AD1     		bne	.L29
 272:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 576              		.loc 1 272 3 is_stmt 1 view .LVU179
 272:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 577              		.loc 1 272 19 is_stmt 0 view .LVU180
 578 004a 384B     		ldr	r3, .L38+8
 579 004c 0093     		str	r3, [sp]
 273:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 580              		.loc 1 273 3 is_stmt 1 view .LVU181
 273:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 581              		.loc 1 273 16 is_stmt 0 view .LVU182
 582 004e 0623     		movs	r3, #6
 583 0050 0193     		str	r3, [sp, #4]
 274:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 584              		.loc 1 274 3 is_stmt 1 view .LVU183
 274:Core/Src/main.c ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 585              		.loc 1 274 24 is_stmt 0 view .LVU184
 586 0052 0723     		movs	r3, #7
 587 0054 0293     		str	r3, [sp, #8]
 275:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 588              		.loc 1 275 3 is_stmt 1 view .LVU185
 275:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 589              		.loc 1 275 22 is_stmt 0 view .LVU186
 590 0056 7F23     		movs	r3, #127
 591 0058 0393     		str	r3, [sp, #12]
 276:Core/Src/main.c ****   sConfig.Offset = 0;
 592              		.loc 1 276 3 is_stmt 1 view .LVU187
 276:Core/Src/main.c ****   sConfig.Offset = 0;
 593              		.loc 1 276 24 is_stmt 0 view .LVU188
 594 005a 0423     		movs	r3, #4
 595 005c 0493     		str	r3, [sp, #16]
 277:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 596              		.loc 1 277 3 is_stmt 1 view .LVU189
 277:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 597              		.loc 1 277 18 is_stmt 0 view .LVU190
 598 005e 0023     		movs	r3, #0
 599 0060 0593     		str	r3, [sp, #20]
 278:Core/Src/main.c ****   {
 600              		.loc 1 278 3 is_stmt 1 view .LVU191
ARM GAS  /tmp/cc0faEhb.s 			page 30


 278:Core/Src/main.c ****   {
 601              		.loc 1 278 7 is_stmt 0 view .LVU192
 602 0062 6946     		mov	r1, sp
 603 0064 2F48     		ldr	r0, .L38
 604 0066 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 605              	.LVL21:
 278:Core/Src/main.c ****   {
 606              		.loc 1 278 6 view .LVU193
 607 006a 0028     		cmp	r0, #0
 608 006c 4AD1     		bne	.L30
 285:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 609              		.loc 1 285 3 is_stmt 1 view .LVU194
 285:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 610              		.loc 1 285 19 is_stmt 0 view .LVU195
 611 006e 304B     		ldr	r3, .L38+12
 612 0070 0093     		str	r3, [sp]
 286:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 613              		.loc 1 286 3 is_stmt 1 view .LVU196
 286:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 614              		.loc 1 286 16 is_stmt 0 view .LVU197
 615 0072 0C23     		movs	r3, #12
 616 0074 0193     		str	r3, [sp, #4]
 287:Core/Src/main.c ****   {
 617              		.loc 1 287 3 is_stmt 1 view .LVU198
 287:Core/Src/main.c ****   {
 618              		.loc 1 287 7 is_stmt 0 view .LVU199
 619 0076 6946     		mov	r1, sp
 620 0078 2A48     		ldr	r0, .L38
 621 007a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 622              	.LVL22:
 287:Core/Src/main.c ****   {
 623              		.loc 1 287 6 view .LVU200
 624 007e 0028     		cmp	r0, #0
 625 0080 42D1     		bne	.L31
 294:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 626              		.loc 1 294 3 is_stmt 1 view .LVU201
 294:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_3;
 627              		.loc 1 294 19 is_stmt 0 view .LVU202
 628 0082 2C4B     		ldr	r3, .L38+16
 629 0084 0093     		str	r3, [sp]
 295:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 630              		.loc 1 295 3 is_stmt 1 view .LVU203
 295:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 631              		.loc 1 295 16 is_stmt 0 view .LVU204
 632 0086 1223     		movs	r3, #18
 633 0088 0193     		str	r3, [sp, #4]
 296:Core/Src/main.c ****   {
 634              		.loc 1 296 3 is_stmt 1 view .LVU205
 296:Core/Src/main.c ****   {
 635              		.loc 1 296 7 is_stmt 0 view .LVU206
 636 008a 6946     		mov	r1, sp
 637 008c 2548     		ldr	r0, .L38
 638 008e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 639              	.LVL23:
 296:Core/Src/main.c ****   {
 640              		.loc 1 296 6 view .LVU207
 641 0092 0028     		cmp	r0, #0
ARM GAS  /tmp/cc0faEhb.s 			page 31


 642 0094 3AD1     		bne	.L32
 303:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 643              		.loc 1 303 3 is_stmt 1 view .LVU208
 303:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_4;
 644              		.loc 1 303 19 is_stmt 0 view .LVU209
 645 0096 284B     		ldr	r3, .L38+20
 646 0098 0093     		str	r3, [sp]
 304:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 647              		.loc 1 304 3 is_stmt 1 view .LVU210
 304:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 648              		.loc 1 304 16 is_stmt 0 view .LVU211
 649 009a 1823     		movs	r3, #24
 650 009c 0193     		str	r3, [sp, #4]
 305:Core/Src/main.c ****   {
 651              		.loc 1 305 3 is_stmt 1 view .LVU212
 305:Core/Src/main.c ****   {
 652              		.loc 1 305 7 is_stmt 0 view .LVU213
 653 009e 6946     		mov	r1, sp
 654 00a0 2048     		ldr	r0, .L38
 655 00a2 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 656              	.LVL24:
 305:Core/Src/main.c ****   {
 657              		.loc 1 305 6 view .LVU214
 658 00a6 0028     		cmp	r0, #0
 659 00a8 32D1     		bne	.L33
 312:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 660              		.loc 1 312 3 is_stmt 1 view .LVU215
 312:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_5;
 661              		.loc 1 312 19 is_stmt 0 view .LVU216
 662 00aa 244B     		ldr	r3, .L38+24
 663 00ac 0093     		str	r3, [sp]
 313:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 664              		.loc 1 313 3 is_stmt 1 view .LVU217
 313:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 665              		.loc 1 313 16 is_stmt 0 view .LVU218
 666 00ae 4FF48073 		mov	r3, #256
 667 00b2 0193     		str	r3, [sp, #4]
 314:Core/Src/main.c ****   {
 668              		.loc 1 314 3 is_stmt 1 view .LVU219
 314:Core/Src/main.c ****   {
 669              		.loc 1 314 7 is_stmt 0 view .LVU220
 670 00b4 6946     		mov	r1, sp
 671 00b6 1B48     		ldr	r0, .L38
 672 00b8 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 673              	.LVL25:
 314:Core/Src/main.c ****   {
 674              		.loc 1 314 6 view .LVU221
 675 00bc 50BB     		cbnz	r0, .L34
 321:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 676              		.loc 1 321 3 is_stmt 1 view .LVU222
 321:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_6;
 677              		.loc 1 321 19 is_stmt 0 view .LVU223
 678 00be 204B     		ldr	r3, .L38+28
 679 00c0 0093     		str	r3, [sp]
 322:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 680              		.loc 1 322 3 is_stmt 1 view .LVU224
 322:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/cc0faEhb.s 			page 32


 681              		.loc 1 322 16 is_stmt 0 view .LVU225
 682 00c2 4FF48373 		mov	r3, #262
 683 00c6 0193     		str	r3, [sp, #4]
 323:Core/Src/main.c ****   {
 684              		.loc 1 323 3 is_stmt 1 view .LVU226
 323:Core/Src/main.c ****   {
 685              		.loc 1 323 7 is_stmt 0 view .LVU227
 686 00c8 6946     		mov	r1, sp
 687 00ca 1648     		ldr	r0, .L38
 688 00cc FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 689              	.LVL26:
 323:Core/Src/main.c ****   {
 690              		.loc 1 323 6 view .LVU228
 691 00d0 10BB     		cbnz	r0, .L35
 330:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_7;
 692              		.loc 1 330 3 is_stmt 1 view .LVU229
 330:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_7;
 693              		.loc 1 330 19 is_stmt 0 view .LVU230
 694 00d2 1C4B     		ldr	r3, .L38+32
 695 00d4 0093     		str	r3, [sp]
 331:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 696              		.loc 1 331 3 is_stmt 1 view .LVU231
 331:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 697              		.loc 1 331 16 is_stmt 0 view .LVU232
 698 00d6 4FF48673 		mov	r3, #268
 699 00da 0193     		str	r3, [sp, #4]
 332:Core/Src/main.c ****   {
 700              		.loc 1 332 3 is_stmt 1 view .LVU233
 332:Core/Src/main.c ****   {
 701              		.loc 1 332 7 is_stmt 0 view .LVU234
 702 00dc 6946     		mov	r1, sp
 703 00de 1148     		ldr	r0, .L38
 704 00e0 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 705              	.LVL27:
 332:Core/Src/main.c ****   {
 706              		.loc 1 332 6 view .LVU235
 707 00e4 D0B9     		cbnz	r0, .L36
 339:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_8;
 708              		.loc 1 339 3 is_stmt 1 view .LVU236
 339:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_8;
 709              		.loc 1 339 19 is_stmt 0 view .LVU237
 710 00e6 184B     		ldr	r3, .L38+36
 711 00e8 0093     		str	r3, [sp]
 340:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 712              		.loc 1 340 3 is_stmt 1 view .LVU238
 340:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 713              		.loc 1 340 16 is_stmt 0 view .LVU239
 714 00ea 4FF48973 		mov	r3, #274
 715 00ee 0193     		str	r3, [sp, #4]
 341:Core/Src/main.c ****   {
 716              		.loc 1 341 3 is_stmt 1 view .LVU240
 341:Core/Src/main.c ****   {
 717              		.loc 1 341 7 is_stmt 0 view .LVU241
 718 00f0 6946     		mov	r1, sp
 719 00f2 0C48     		ldr	r0, .L38
 720 00f4 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 721              	.LVL28:
ARM GAS  /tmp/cc0faEhb.s 			page 33


 341:Core/Src/main.c ****   {
 722              		.loc 1 341 6 view .LVU242
 723 00f8 90B9     		cbnz	r0, .L37
 349:Core/Src/main.c **** 
 724              		.loc 1 349 1 view .LVU243
 725 00fa 07B0     		add	sp, sp, #28
 726              		.cfi_remember_state
 727              		.cfi_def_cfa_offset 4
 728              		@ sp needed
 729 00fc 5DF804FB 		ldr	pc, [sp], #4
 730              	.L29:
 731              		.cfi_restore_state
 267:Core/Src/main.c ****   }
 732              		.loc 1 267 5 is_stmt 1 view .LVU244
 733 0100 FFF7FEFF 		bl	Error_Handler
 734              	.LVL29:
 735              	.L30:
 280:Core/Src/main.c ****   }
 736              		.loc 1 280 5 view .LVU245
 737 0104 FFF7FEFF 		bl	Error_Handler
 738              	.LVL30:
 739              	.L31:
 289:Core/Src/main.c ****   }
 740              		.loc 1 289 5 view .LVU246
 741 0108 FFF7FEFF 		bl	Error_Handler
 742              	.LVL31:
 743              	.L32:
 298:Core/Src/main.c ****   }
 744              		.loc 1 298 5 view .LVU247
 745 010c FFF7FEFF 		bl	Error_Handler
 746              	.LVL32:
 747              	.L33:
 307:Core/Src/main.c ****   }
 748              		.loc 1 307 5 view .LVU248
 749 0110 FFF7FEFF 		bl	Error_Handler
 750              	.LVL33:
 751              	.L34:
 316:Core/Src/main.c ****   }
 752              		.loc 1 316 5 view .LVU249
 753 0114 FFF7FEFF 		bl	Error_Handler
 754              	.LVL34:
 755              	.L35:
 325:Core/Src/main.c ****   }
 756              		.loc 1 325 5 view .LVU250
 757 0118 FFF7FEFF 		bl	Error_Handler
 758              	.LVL35:
 759              	.L36:
 334:Core/Src/main.c ****   }
 760              		.loc 1 334 5 view .LVU251
 761 011c FFF7FEFF 		bl	Error_Handler
 762              	.LVL36:
 763              	.L37:
 343:Core/Src/main.c ****   }
 764              		.loc 1 343 5 view .LVU252
 765 0120 FFF7FEFF 		bl	Error_Handler
 766              	.LVL37:
 767              	.L39:
ARM GAS  /tmp/cc0faEhb.s 			page 34


 768              		.align	2
 769              	.L38:
 770 0124 00000000 		.word	.LANCHOR2
 771 0128 00000450 		.word	1342439424
 772 012c 02003004 		.word	70254594
 773 0130 04006008 		.word	140509188
 774 0134 0800900C 		.word	210763784
 775 0138 1000C010 		.word	281018384
 776 013c 0002B025 		.word	632291840
 777 0140 0004002A 		.word	704644096
 778 0144 00106032 		.word	845156352
 779 0148 00209036 		.word	915415040
 780              		.cfi_endproc
 781              	.LFE294:
 783              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 784              		.align	1
 785              		.syntax unified
 786              		.thumb
 787              		.thumb_func
 789              	MX_USART1_UART_Init:
 790              	.LFB298:
 558:Core/Src/main.c **** 
 791              		.loc 1 558 1 view -0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 795 0000 08B5     		push	{r3, lr}
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 3, -8
 798              		.cfi_offset 14, -4
 567:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 799              		.loc 1 567 3 view .LVU254
 567:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 800              		.loc 1 567 19 is_stmt 0 view .LVU255
 801 0002 0B48     		ldr	r0, .L44
 802 0004 0B4B     		ldr	r3, .L44+4
 803 0006 0360     		str	r3, [r0]
 568:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 804              		.loc 1 568 3 is_stmt 1 view .LVU256
 568:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 805              		.loc 1 568 24 is_stmt 0 view .LVU257
 806 0008 4FF4E133 		mov	r3, #115200
 807 000c 4360     		str	r3, [r0, #4]
 569:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 808              		.loc 1 569 3 is_stmt 1 view .LVU258
 569:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 809              		.loc 1 569 26 is_stmt 0 view .LVU259
 810 000e 0023     		movs	r3, #0
 811 0010 8360     		str	r3, [r0, #8]
 570:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 812              		.loc 1 570 3 is_stmt 1 view .LVU260
 570:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 813              		.loc 1 570 24 is_stmt 0 view .LVU261
 814 0012 C360     		str	r3, [r0, #12]
 571:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 815              		.loc 1 571 3 is_stmt 1 view .LVU262
 571:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
ARM GAS  /tmp/cc0faEhb.s 			page 35


 816              		.loc 1 571 22 is_stmt 0 view .LVU263
 817 0014 0361     		str	r3, [r0, #16]
 572:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 818              		.loc 1 572 3 is_stmt 1 view .LVU264
 572:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 819              		.loc 1 572 20 is_stmt 0 view .LVU265
 820 0016 0C22     		movs	r2, #12
 821 0018 4261     		str	r2, [r0, #20]
 573:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 822              		.loc 1 573 3 is_stmt 1 view .LVU266
 573:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 823              		.loc 1 573 25 is_stmt 0 view .LVU267
 824 001a 8361     		str	r3, [r0, #24]
 574:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 825              		.loc 1 574 3 is_stmt 1 view .LVU268
 574:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 826              		.loc 1 574 28 is_stmt 0 view .LVU269
 827 001c C361     		str	r3, [r0, #28]
 575:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 828              		.loc 1 575 3 is_stmt 1 view .LVU270
 575:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 829              		.loc 1 575 30 is_stmt 0 view .LVU271
 830 001e 0362     		str	r3, [r0, #32]
 576:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 831              		.loc 1 576 3 is_stmt 1 view .LVU272
 576:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 832              		.loc 1 576 38 is_stmt 0 view .LVU273
 833 0020 4362     		str	r3, [r0, #36]
 577:Core/Src/main.c ****   {
 834              		.loc 1 577 3 is_stmt 1 view .LVU274
 577:Core/Src/main.c ****   {
 835              		.loc 1 577 7 is_stmt 0 view .LVU275
 836 0022 FFF7FEFF 		bl	HAL_UART_Init
 837              	.LVL38:
 577:Core/Src/main.c ****   {
 838              		.loc 1 577 6 view .LVU276
 839 0026 00B9     		cbnz	r0, .L43
 585:Core/Src/main.c **** 
 840              		.loc 1 585 1 view .LVU277
 841 0028 08BD     		pop	{r3, pc}
 842              	.L43:
 579:Core/Src/main.c ****   }
 843              		.loc 1 579 5 is_stmt 1 view .LVU278
 844 002a FFF7FEFF 		bl	Error_Handler
 845              	.LVL39:
 846              	.L45:
 847 002e 00BF     		.align	2
 848              	.L44:
 849 0030 00000000 		.word	.LANCHOR3
 850 0034 00380140 		.word	1073821696
 851              		.cfi_endproc
 852              	.LFE298:
 854              		.section	.text.MX_TIM1_Init,"ax",%progbits
 855              		.align	1
 856              		.syntax unified
 857              		.thumb
 858              		.thumb_func
ARM GAS  /tmp/cc0faEhb.s 			page 36


 860              	MX_TIM1_Init:
 861              	.LFB295:
 357:Core/Src/main.c **** 
 862              		.loc 1 357 1 view -0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 104
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866 0000 10B5     		push	{r4, lr}
 867              		.cfi_def_cfa_offset 8
 868              		.cfi_offset 4, -8
 869              		.cfi_offset 14, -4
 870 0002 9AB0     		sub	sp, sp, #104
 871              		.cfi_def_cfa_offset 112
 363:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 872              		.loc 1 363 3 view .LVU280
 363:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 873              		.loc 1 363 26 is_stmt 0 view .LVU281
 874 0004 0024     		movs	r4, #0
 875 0006 1694     		str	r4, [sp, #88]
 876 0008 1794     		str	r4, [sp, #92]
 877 000a 1894     		str	r4, [sp, #96]
 878 000c 1994     		str	r4, [sp, #100]
 364:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 879              		.loc 1 364 3 is_stmt 1 view .LVU282
 364:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 880              		.loc 1 364 27 is_stmt 0 view .LVU283
 881 000e 1394     		str	r4, [sp, #76]
 882 0010 1494     		str	r4, [sp, #80]
 883 0012 1594     		str	r4, [sp, #84]
 365:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 884              		.loc 1 365 3 is_stmt 1 view .LVU284
 365:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 885              		.loc 1 365 22 is_stmt 0 view .LVU285
 886 0014 0C94     		str	r4, [sp, #48]
 887 0016 0D94     		str	r4, [sp, #52]
 888 0018 0E94     		str	r4, [sp, #56]
 889 001a 0F94     		str	r4, [sp, #60]
 890 001c 1094     		str	r4, [sp, #64]
 891 001e 1194     		str	r4, [sp, #68]
 892 0020 1294     		str	r4, [sp, #72]
 366:Core/Src/main.c **** 
 893              		.loc 1 366 3 is_stmt 1 view .LVU286
 366:Core/Src/main.c **** 
 894              		.loc 1 366 34 is_stmt 0 view .LVU287
 895 0022 2C22     		movs	r2, #44
 896 0024 2146     		mov	r1, r4
 897 0026 01A8     		add	r0, sp, #4
 898 0028 FFF7FEFF 		bl	memset
 899              	.LVL40:
 371:Core/Src/main.c ****   htim1.Init.Prescaler = 600;
 900              		.loc 1 371 3 is_stmt 1 view .LVU288
 371:Core/Src/main.c ****   htim1.Init.Prescaler = 600;
 901              		.loc 1 371 18 is_stmt 0 view .LVU289
 902 002c 3348     		ldr	r0, .L62
 903 002e 344B     		ldr	r3, .L62+4
 904 0030 0360     		str	r3, [r0]
 372:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  /tmp/cc0faEhb.s 			page 37


 905              		.loc 1 372 3 is_stmt 1 view .LVU290
 372:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 906              		.loc 1 372 24 is_stmt 0 view .LVU291
 907 0032 4FF41673 		mov	r3, #600
 908 0036 4360     		str	r3, [r0, #4]
 373:Core/Src/main.c ****   htim1.Init.Period = 10;
 909              		.loc 1 373 3 is_stmt 1 view .LVU292
 373:Core/Src/main.c ****   htim1.Init.Period = 10;
 910              		.loc 1 373 26 is_stmt 0 view .LVU293
 911 0038 8460     		str	r4, [r0, #8]
 374:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 912              		.loc 1 374 3 is_stmt 1 view .LVU294
 374:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 913              		.loc 1 374 21 is_stmt 0 view .LVU295
 914 003a 0A23     		movs	r3, #10
 915 003c C360     		str	r3, [r0, #12]
 375:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 20;
 916              		.loc 1 375 3 is_stmt 1 view .LVU296
 375:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 20;
 917              		.loc 1 375 28 is_stmt 0 view .LVU297
 918 003e 0461     		str	r4, [r0, #16]
 376:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 919              		.loc 1 376 3 is_stmt 1 view .LVU298
 376:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 920              		.loc 1 376 32 is_stmt 0 view .LVU299
 921 0040 1423     		movs	r3, #20
 922 0042 4361     		str	r3, [r0, #20]
 377:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 923              		.loc 1 377 3 is_stmt 1 view .LVU300
 377:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 924              		.loc 1 377 32 is_stmt 0 view .LVU301
 925 0044 8023     		movs	r3, #128
 926 0046 8361     		str	r3, [r0, #24]
 378:Core/Src/main.c ****   {
 927              		.loc 1 378 3 is_stmt 1 view .LVU302
 378:Core/Src/main.c ****   {
 928              		.loc 1 378 7 is_stmt 0 view .LVU303
 929 0048 FFF7FEFF 		bl	HAL_TIM_Base_Init
 930              	.LVL41:
 378:Core/Src/main.c ****   {
 931              		.loc 1 378 6 view .LVU304
 932 004c 0028     		cmp	r0, #0
 933 004e 47D1     		bne	.L55
 382:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 934              		.loc 1 382 3 is_stmt 1 view .LVU305
 382:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 935              		.loc 1 382 34 is_stmt 0 view .LVU306
 936 0050 4FF48053 		mov	r3, #4096
 937 0054 1693     		str	r3, [sp, #88]
 383:Core/Src/main.c ****   {
 938              		.loc 1 383 3 is_stmt 1 view .LVU307
 383:Core/Src/main.c ****   {
 939              		.loc 1 383 7 is_stmt 0 view .LVU308
 940 0056 16A9     		add	r1, sp, #88
 941 0058 2848     		ldr	r0, .L62
 942 005a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 943              	.LVL42:
ARM GAS  /tmp/cc0faEhb.s 			page 38


 383:Core/Src/main.c ****   {
 944              		.loc 1 383 6 view .LVU309
 945 005e 0028     		cmp	r0, #0
 946 0060 40D1     		bne	.L56
 387:Core/Src/main.c ****   {
 947              		.loc 1 387 3 is_stmt 1 view .LVU310
 387:Core/Src/main.c ****   {
 948              		.loc 1 387 7 is_stmt 0 view .LVU311
 949 0062 2648     		ldr	r0, .L62
 950 0064 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 951              	.LVL43:
 387:Core/Src/main.c ****   {
 952              		.loc 1 387 6 view .LVU312
 953 0068 0028     		cmp	r0, #0
 954 006a 3DD1     		bne	.L57
 391:Core/Src/main.c ****   {
 955              		.loc 1 391 3 is_stmt 1 view .LVU313
 391:Core/Src/main.c ****   {
 956              		.loc 1 391 7 is_stmt 0 view .LVU314
 957 006c 0821     		movs	r1, #8
 958 006e 2348     		ldr	r0, .L62
 959 0070 FFF7FEFF 		bl	HAL_TIM_OnePulse_Init
 960              	.LVL44:
 391:Core/Src/main.c ****   {
 961              		.loc 1 391 6 view .LVU315
 962 0074 0028     		cmp	r0, #0
 963 0076 39D1     		bne	.L58
 395:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 964              		.loc 1 395 3 is_stmt 1 view .LVU316
 395:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 965              		.loc 1 395 37 is_stmt 0 view .LVU317
 966 0078 0023     		movs	r3, #0
 967 007a 1393     		str	r3, [sp, #76]
 396:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 968              		.loc 1 396 3 is_stmt 1 view .LVU318
 396:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 969              		.loc 1 396 38 is_stmt 0 view .LVU319
 970 007c 1493     		str	r3, [sp, #80]
 397:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 971              		.loc 1 397 3 is_stmt 1 view .LVU320
 397:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 972              		.loc 1 397 33 is_stmt 0 view .LVU321
 973 007e 1593     		str	r3, [sp, #84]
 398:Core/Src/main.c ****   {
 974              		.loc 1 398 3 is_stmt 1 view .LVU322
 398:Core/Src/main.c ****   {
 975              		.loc 1 398 7 is_stmt 0 view .LVU323
 976 0080 13A9     		add	r1, sp, #76
 977 0082 1E48     		ldr	r0, .L62
 978 0084 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 979              	.LVL45:
 398:Core/Src/main.c ****   {
 980              		.loc 1 398 6 view .LVU324
 981 0088 0028     		cmp	r0, #0
 982 008a 31D1     		bne	.L59
 402:Core/Src/main.c ****   sConfigOC.Pulse = 5;
 983              		.loc 1 402 3 is_stmt 1 view .LVU325
ARM GAS  /tmp/cc0faEhb.s 			page 39


 402:Core/Src/main.c ****   sConfigOC.Pulse = 5;
 984              		.loc 1 402 20 is_stmt 0 view .LVU326
 985 008c 6023     		movs	r3, #96
 986 008e 0C93     		str	r3, [sp, #48]
 403:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 987              		.loc 1 403 3 is_stmt 1 view .LVU327
 403:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 988              		.loc 1 403 19 is_stmt 0 view .LVU328
 989 0090 0523     		movs	r3, #5
 990 0092 0D93     		str	r3, [sp, #52]
 404:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 991              		.loc 1 404 3 is_stmt 1 view .LVU329
 404:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 992              		.loc 1 404 24 is_stmt 0 view .LVU330
 993 0094 0023     		movs	r3, #0
 994 0096 0E93     		str	r3, [sp, #56]
 405:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 995              		.loc 1 405 3 is_stmt 1 view .LVU331
 405:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 996              		.loc 1 405 25 is_stmt 0 view .LVU332
 997 0098 0822     		movs	r2, #8
 998 009a 0F92     		str	r2, [sp, #60]
 406:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 999              		.loc 1 406 3 is_stmt 1 view .LVU333
 406:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1000              		.loc 1 406 24 is_stmt 0 view .LVU334
 1001 009c 1093     		str	r3, [sp, #64]
 407:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1002              		.loc 1 407 3 is_stmt 1 view .LVU335
 407:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1003              		.loc 1 407 25 is_stmt 0 view .LVU336
 1004 009e 1193     		str	r3, [sp, #68]
 408:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1005              		.loc 1 408 3 is_stmt 1 view .LVU337
 408:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 1006              		.loc 1 408 26 is_stmt 0 view .LVU338
 1007 00a0 1293     		str	r3, [sp, #72]
 409:Core/Src/main.c ****   {
 1008              		.loc 1 409 3 is_stmt 1 view .LVU339
 409:Core/Src/main.c ****   {
 1009              		.loc 1 409 7 is_stmt 0 view .LVU340
 1010 00a2 0CA9     		add	r1, sp, #48
 1011 00a4 1548     		ldr	r0, .L62
 1012 00a6 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1013              	.LVL46:
 409:Core/Src/main.c ****   {
 1014              		.loc 1 409 6 view .LVU341
 1015 00aa 18BB     		cbnz	r0, .L60
 413:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1016              		.loc 1 413 3 is_stmt 1 view .LVU342
 413:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1017              		.loc 1 413 40 is_stmt 0 view .LVU343
 1018 00ac 0023     		movs	r3, #0
 1019 00ae 0193     		str	r3, [sp, #4]
 414:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1020              		.loc 1 414 3 is_stmt 1 view .LVU344
 414:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
ARM GAS  /tmp/cc0faEhb.s 			page 40


 1021              		.loc 1 414 41 is_stmt 0 view .LVU345
 1022 00b0 0293     		str	r3, [sp, #8]
 415:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1023              		.loc 1 415 3 is_stmt 1 view .LVU346
 415:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1024              		.loc 1 415 34 is_stmt 0 view .LVU347
 1025 00b2 0393     		str	r3, [sp, #12]
 416:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1026              		.loc 1 416 3 is_stmt 1 view .LVU348
 416:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1027              		.loc 1 416 33 is_stmt 0 view .LVU349
 1028 00b4 0493     		str	r3, [sp, #16]
 417:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1029              		.loc 1 417 3 is_stmt 1 view .LVU350
 417:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1030              		.loc 1 417 35 is_stmt 0 view .LVU351
 1031 00b6 0593     		str	r3, [sp, #20]
 418:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1032              		.loc 1 418 3 is_stmt 1 view .LVU352
 418:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1033              		.loc 1 418 38 is_stmt 0 view .LVU353
 1034 00b8 4FF40052 		mov	r2, #8192
 1035 00bc 0692     		str	r2, [sp, #24]
 419:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 1036              		.loc 1 419 3 is_stmt 1 view .LVU354
 419:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 1037              		.loc 1 419 36 is_stmt 0 view .LVU355
 1038 00be 0793     		str	r3, [sp, #28]
 420:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1039              		.loc 1 420 3 is_stmt 1 view .LVU356
 420:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1040              		.loc 1 420 36 is_stmt 0 view .LVU357
 1041 00c0 0893     		str	r3, [sp, #32]
 421:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 1042              		.loc 1 421 3 is_stmt 1 view .LVU358
 421:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 1043              		.loc 1 421 39 is_stmt 0 view .LVU359
 1044 00c2 4FF00072 		mov	r2, #33554432
 1045 00c6 0992     		str	r2, [sp, #36]
 422:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1046              		.loc 1 422 3 is_stmt 1 view .LVU360
 422:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1047              		.loc 1 422 37 is_stmt 0 view .LVU361
 1048 00c8 0A93     		str	r3, [sp, #40]
 423:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1049              		.loc 1 423 3 is_stmt 1 view .LVU362
 423:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1050              		.loc 1 423 40 is_stmt 0 view .LVU363
 1051 00ca 0B93     		str	r3, [sp, #44]
 424:Core/Src/main.c ****   {
 1052              		.loc 1 424 3 is_stmt 1 view .LVU364
 424:Core/Src/main.c ****   {
 1053              		.loc 1 424 7 is_stmt 0 view .LVU365
 1054 00cc 01A9     		add	r1, sp, #4
 1055 00ce 0B48     		ldr	r0, .L62
 1056 00d0 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1057              	.LVL47:
ARM GAS  /tmp/cc0faEhb.s 			page 41


 424:Core/Src/main.c ****   {
 1058              		.loc 1 424 6 view .LVU366
 1059 00d4 80B9     		cbnz	r0, .L61
 431:Core/Src/main.c **** 
 1060              		.loc 1 431 3 is_stmt 1 view .LVU367
 1061 00d6 0948     		ldr	r0, .L62
 1062 00d8 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1063              	.LVL48:
 433:Core/Src/main.c **** 
 1064              		.loc 1 433 1 is_stmt 0 view .LVU368
 1065 00dc 1AB0     		add	sp, sp, #104
 1066              		.cfi_remember_state
 1067              		.cfi_def_cfa_offset 8
 1068              		@ sp needed
 1069 00de 10BD     		pop	{r4, pc}
 1070              	.L55:
 1071              		.cfi_restore_state
 380:Core/Src/main.c ****   }
 1072              		.loc 1 380 5 is_stmt 1 view .LVU369
 1073 00e0 FFF7FEFF 		bl	Error_Handler
 1074              	.LVL49:
 1075              	.L56:
 385:Core/Src/main.c ****   }
 1076              		.loc 1 385 5 view .LVU370
 1077 00e4 FFF7FEFF 		bl	Error_Handler
 1078              	.LVL50:
 1079              	.L57:
 389:Core/Src/main.c ****   }
 1080              		.loc 1 389 5 view .LVU371
 1081 00e8 FFF7FEFF 		bl	Error_Handler
 1082              	.LVL51:
 1083              	.L58:
 393:Core/Src/main.c ****   }
 1084              		.loc 1 393 5 view .LVU372
 1085 00ec FFF7FEFF 		bl	Error_Handler
 1086              	.LVL52:
 1087              	.L59:
 400:Core/Src/main.c ****   }
 1088              		.loc 1 400 5 view .LVU373
 1089 00f0 FFF7FEFF 		bl	Error_Handler
 1090              	.LVL53:
 1091              	.L60:
 411:Core/Src/main.c ****   }
 1092              		.loc 1 411 5 view .LVU374
 1093 00f4 FFF7FEFF 		bl	Error_Handler
 1094              	.LVL54:
 1095              	.L61:
 426:Core/Src/main.c ****   }
 1096              		.loc 1 426 5 view .LVU375
 1097 00f8 FFF7FEFF 		bl	Error_Handler
 1098              	.LVL55:
 1099              	.L63:
 1100              		.align	2
 1101              	.L62:
 1102 00fc 00000000 		.word	.LANCHOR4
 1103 0100 002C0140 		.word	1073818624
 1104              		.cfi_endproc
ARM GAS  /tmp/cc0faEhb.s 			page 42


 1105              	.LFE295:
 1107              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1108              		.align	1
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1113              	MX_USART2_UART_Init:
 1114              	.LFB299:
 593:Core/Src/main.c **** 
 1115              		.loc 1 593 1 view -0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 0
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119 0000 08B5     		push	{r3, lr}
 1120              		.cfi_def_cfa_offset 8
 1121              		.cfi_offset 3, -8
 1122              		.cfi_offset 14, -4
 602:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1123              		.loc 1 602 3 view .LVU377
 602:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1124              		.loc 1 602 19 is_stmt 0 view .LVU378
 1125 0002 0B48     		ldr	r0, .L68
 1126 0004 0B4B     		ldr	r3, .L68+4
 1127 0006 0360     		str	r3, [r0]
 603:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1128              		.loc 1 603 3 is_stmt 1 view .LVU379
 603:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1129              		.loc 1 603 24 is_stmt 0 view .LVU380
 1130 0008 4FF4E133 		mov	r3, #115200
 1131 000c 4360     		str	r3, [r0, #4]
 604:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1132              		.loc 1 604 3 is_stmt 1 view .LVU381
 604:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1133              		.loc 1 604 26 is_stmt 0 view .LVU382
 1134 000e 0023     		movs	r3, #0
 1135 0010 8360     		str	r3, [r0, #8]
 605:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1136              		.loc 1 605 3 is_stmt 1 view .LVU383
 605:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1137              		.loc 1 605 24 is_stmt 0 view .LVU384
 1138 0012 C360     		str	r3, [r0, #12]
 606:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1139              		.loc 1 606 3 is_stmt 1 view .LVU385
 606:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1140              		.loc 1 606 22 is_stmt 0 view .LVU386
 1141 0014 0361     		str	r3, [r0, #16]
 607:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1142              		.loc 1 607 3 is_stmt 1 view .LVU387
 607:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1143              		.loc 1 607 20 is_stmt 0 view .LVU388
 1144 0016 0C22     		movs	r2, #12
 1145 0018 4261     		str	r2, [r0, #20]
 608:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1146              		.loc 1 608 3 is_stmt 1 view .LVU389
 608:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1147              		.loc 1 608 25 is_stmt 0 view .LVU390
 1148 001a 8361     		str	r3, [r0, #24]
ARM GAS  /tmp/cc0faEhb.s 			page 43


 609:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1149              		.loc 1 609 3 is_stmt 1 view .LVU391
 609:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1150              		.loc 1 609 28 is_stmt 0 view .LVU392
 1151 001c C361     		str	r3, [r0, #28]
 610:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1152              		.loc 1 610 3 is_stmt 1 view .LVU393
 610:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1153              		.loc 1 610 30 is_stmt 0 view .LVU394
 1154 001e 0362     		str	r3, [r0, #32]
 611:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1155              		.loc 1 611 3 is_stmt 1 view .LVU395
 611:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1156              		.loc 1 611 38 is_stmt 0 view .LVU396
 1157 0020 4362     		str	r3, [r0, #36]
 612:Core/Src/main.c ****   {
 1158              		.loc 1 612 3 is_stmt 1 view .LVU397
 612:Core/Src/main.c ****   {
 1159              		.loc 1 612 7 is_stmt 0 view .LVU398
 1160 0022 FFF7FEFF 		bl	HAL_UART_Init
 1161              	.LVL56:
 612:Core/Src/main.c ****   {
 1162              		.loc 1 612 6 view .LVU399
 1163 0026 00B9     		cbnz	r0, .L67
 620:Core/Src/main.c **** 
 1164              		.loc 1 620 1 view .LVU400
 1165 0028 08BD     		pop	{r3, pc}
 1166              	.L67:
 614:Core/Src/main.c ****   }
 1167              		.loc 1 614 5 is_stmt 1 view .LVU401
 1168 002a FFF7FEFF 		bl	Error_Handler
 1169              	.LVL57:
 1170              	.L69:
 1171 002e 00BF     		.align	2
 1172              	.L68:
 1173 0030 00000000 		.word	.LANCHOR5
 1174 0034 00440040 		.word	1073759232
 1175              		.cfi_endproc
 1176              	.LFE299:
 1178              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 1179              		.align	1
 1180              		.syntax unified
 1181              		.thumb
 1182              		.thumb_func
 1184              	MX_USART3_UART_Init:
 1185              	.LFB300:
 628:Core/Src/main.c **** 
 1186              		.loc 1 628 1 view -0
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 0
 1189              		@ frame_needed = 0, uses_anonymous_args = 0
 1190 0000 08B5     		push	{r3, lr}
 1191              		.cfi_def_cfa_offset 8
 1192              		.cfi_offset 3, -8
 1193              		.cfi_offset 14, -4
 637:Core/Src/main.c ****   huart3.Init.BaudRate = 115200;
 1194              		.loc 1 637 3 view .LVU403
ARM GAS  /tmp/cc0faEhb.s 			page 44


 637:Core/Src/main.c ****   huart3.Init.BaudRate = 115200;
 1195              		.loc 1 637 19 is_stmt 0 view .LVU404
 1196 0002 0B48     		ldr	r0, .L74
 1197 0004 0B4B     		ldr	r3, .L74+4
 1198 0006 0360     		str	r3, [r0]
 638:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1199              		.loc 1 638 3 is_stmt 1 view .LVU405
 638:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1200              		.loc 1 638 24 is_stmt 0 view .LVU406
 1201 0008 4FF4E133 		mov	r3, #115200
 1202 000c 4360     		str	r3, [r0, #4]
 639:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1203              		.loc 1 639 3 is_stmt 1 view .LVU407
 639:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1204              		.loc 1 639 26 is_stmt 0 view .LVU408
 1205 000e 0023     		movs	r3, #0
 1206 0010 8360     		str	r3, [r0, #8]
 640:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 1207              		.loc 1 640 3 is_stmt 1 view .LVU409
 640:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 1208              		.loc 1 640 24 is_stmt 0 view .LVU410
 1209 0012 C360     		str	r3, [r0, #12]
 641:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1210              		.loc 1 641 3 is_stmt 1 view .LVU411
 641:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1211              		.loc 1 641 22 is_stmt 0 view .LVU412
 1212 0014 0361     		str	r3, [r0, #16]
 642:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1213              		.loc 1 642 3 is_stmt 1 view .LVU413
 642:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1214              		.loc 1 642 20 is_stmt 0 view .LVU414
 1215 0016 0C22     		movs	r2, #12
 1216 0018 4261     		str	r2, [r0, #20]
 643:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1217              		.loc 1 643 3 is_stmt 1 view .LVU415
 643:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1218              		.loc 1 643 25 is_stmt 0 view .LVU416
 1219 001a 8361     		str	r3, [r0, #24]
 644:Core/Src/main.c ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1220              		.loc 1 644 3 is_stmt 1 view .LVU417
 644:Core/Src/main.c ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1221              		.loc 1 644 28 is_stmt 0 view .LVU418
 1222 001c C361     		str	r3, [r0, #28]
 645:Core/Src/main.c ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1223              		.loc 1 645 3 is_stmt 1 view .LVU419
 645:Core/Src/main.c ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1224              		.loc 1 645 30 is_stmt 0 view .LVU420
 1225 001e 0362     		str	r3, [r0, #32]
 646:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1226              		.loc 1 646 3 is_stmt 1 view .LVU421
 646:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1227              		.loc 1 646 38 is_stmt 0 view .LVU422
 1228 0020 4362     		str	r3, [r0, #36]
 647:Core/Src/main.c ****   {
 1229              		.loc 1 647 3 is_stmt 1 view .LVU423
 647:Core/Src/main.c ****   {
 1230              		.loc 1 647 7 is_stmt 0 view .LVU424
ARM GAS  /tmp/cc0faEhb.s 			page 45


 1231 0022 FFF7FEFF 		bl	HAL_UART_Init
 1232              	.LVL58:
 647:Core/Src/main.c ****   {
 1233              		.loc 1 647 6 view .LVU425
 1234 0026 00B9     		cbnz	r0, .L73
 655:Core/Src/main.c **** 
 1235              		.loc 1 655 1 view .LVU426
 1236 0028 08BD     		pop	{r3, pc}
 1237              	.L73:
 649:Core/Src/main.c ****   }
 1238              		.loc 1 649 5 is_stmt 1 view .LVU427
 1239 002a FFF7FEFF 		bl	Error_Handler
 1240              	.LVL59:
 1241              	.L75:
 1242 002e 00BF     		.align	2
 1243              	.L74:
 1244 0030 00000000 		.word	.LANCHOR6
 1245 0034 00480040 		.word	1073760256
 1246              		.cfi_endproc
 1247              	.LFE300:
 1249              		.section	.text.MX_TIM15_Init,"ax",%progbits
 1250              		.align	1
 1251              		.syntax unified
 1252              		.thumb
 1253              		.thumb_func
 1255              	MX_TIM15_Init:
 1256              	.LFB297:
 479:Core/Src/main.c **** 
 1257              		.loc 1 479 1 view -0
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 104
 1260              		@ frame_needed = 0, uses_anonymous_args = 0
 1261 0000 10B5     		push	{r4, lr}
 1262              		.cfi_def_cfa_offset 8
 1263              		.cfi_offset 4, -8
 1264              		.cfi_offset 14, -4
 1265 0002 9AB0     		sub	sp, sp, #104
 1266              		.cfi_def_cfa_offset 112
 485:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1267              		.loc 1 485 3 view .LVU429
 485:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1268              		.loc 1 485 26 is_stmt 0 view .LVU430
 1269 0004 0024     		movs	r4, #0
 1270 0006 1694     		str	r4, [sp, #88]
 1271 0008 1794     		str	r4, [sp, #92]
 1272 000a 1894     		str	r4, [sp, #96]
 1273 000c 1994     		str	r4, [sp, #100]
 486:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1274              		.loc 1 486 3 is_stmt 1 view .LVU431
 486:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1275              		.loc 1 486 27 is_stmt 0 view .LVU432
 1276 000e 1394     		str	r4, [sp, #76]
 1277 0010 1494     		str	r4, [sp, #80]
 1278 0012 1594     		str	r4, [sp, #84]
 487:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1279              		.loc 1 487 3 is_stmt 1 view .LVU433
 487:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
ARM GAS  /tmp/cc0faEhb.s 			page 46


 1280              		.loc 1 487 22 is_stmt 0 view .LVU434
 1281 0014 0C94     		str	r4, [sp, #48]
 1282 0016 0D94     		str	r4, [sp, #52]
 1283 0018 0E94     		str	r4, [sp, #56]
 1284 001a 0F94     		str	r4, [sp, #60]
 1285 001c 1094     		str	r4, [sp, #64]
 1286 001e 1194     		str	r4, [sp, #68]
 1287 0020 1294     		str	r4, [sp, #72]
 488:Core/Src/main.c **** 
 1288              		.loc 1 488 3 is_stmt 1 view .LVU435
 488:Core/Src/main.c **** 
 1289              		.loc 1 488 34 is_stmt 0 view .LVU436
 1290 0022 2C22     		movs	r2, #44
 1291 0024 2146     		mov	r1, r4
 1292 0026 01A8     		add	r0, sp, #4
 1293 0028 FFF7FEFF 		bl	memset
 1294              	.LVL60:
 493:Core/Src/main.c ****   htim15.Init.Prescaler = 600;
 1295              		.loc 1 493 3 is_stmt 1 view .LVU437
 493:Core/Src/main.c ****   htim15.Init.Prescaler = 600;
 1296              		.loc 1 493 19 is_stmt 0 view .LVU438
 1297 002c 2E48     		ldr	r0, .L92
 1298 002e 2F4B     		ldr	r3, .L92+4
 1299 0030 0360     		str	r3, [r0]
 494:Core/Src/main.c ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1300              		.loc 1 494 3 is_stmt 1 view .LVU439
 494:Core/Src/main.c ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1301              		.loc 1 494 25 is_stmt 0 view .LVU440
 1302 0032 4FF41673 		mov	r3, #600
 1303 0036 4360     		str	r3, [r0, #4]
 495:Core/Src/main.c ****   htim15.Init.Period = 5;
 1304              		.loc 1 495 3 is_stmt 1 view .LVU441
 495:Core/Src/main.c ****   htim15.Init.Period = 5;
 1305              		.loc 1 495 27 is_stmt 0 view .LVU442
 1306 0038 8460     		str	r4, [r0, #8]
 496:Core/Src/main.c ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1307              		.loc 1 496 3 is_stmt 1 view .LVU443
 496:Core/Src/main.c ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1308              		.loc 1 496 22 is_stmt 0 view .LVU444
 1309 003a 0523     		movs	r3, #5
 1310 003c C360     		str	r3, [r0, #12]
 497:Core/Src/main.c ****   htim15.Init.RepetitionCounter = 5;
 1311              		.loc 1 497 3 is_stmt 1 view .LVU445
 497:Core/Src/main.c ****   htim15.Init.RepetitionCounter = 5;
 1312              		.loc 1 497 29 is_stmt 0 view .LVU446
 1313 003e 0461     		str	r4, [r0, #16]
 498:Core/Src/main.c ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1314              		.loc 1 498 3 is_stmt 1 view .LVU447
 498:Core/Src/main.c ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1315              		.loc 1 498 33 is_stmt 0 view .LVU448
 1316 0040 4361     		str	r3, [r0, #20]
 499:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1317              		.loc 1 499 3 is_stmt 1 view .LVU449
 499:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1318              		.loc 1 499 33 is_stmt 0 view .LVU450
 1319 0042 8023     		movs	r3, #128
 1320 0044 8361     		str	r3, [r0, #24]
ARM GAS  /tmp/cc0faEhb.s 			page 47


 500:Core/Src/main.c ****   {
 1321              		.loc 1 500 3 is_stmt 1 view .LVU451
 500:Core/Src/main.c ****   {
 1322              		.loc 1 500 7 is_stmt 0 view .LVU452
 1323 0046 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1324              	.LVL61:
 500:Core/Src/main.c ****   {
 1325              		.loc 1 500 6 view .LVU453
 1326 004a 0028     		cmp	r0, #0
 1327 004c 3ED1     		bne	.L85
 504:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1328              		.loc 1 504 3 is_stmt 1 view .LVU454
 504:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1329              		.loc 1 504 34 is_stmt 0 view .LVU455
 1330 004e 4FF48053 		mov	r3, #4096
 1331 0052 1693     		str	r3, [sp, #88]
 505:Core/Src/main.c ****   {
 1332              		.loc 1 505 3 is_stmt 1 view .LVU456
 505:Core/Src/main.c ****   {
 1333              		.loc 1 505 7 is_stmt 0 view .LVU457
 1334 0054 16A9     		add	r1, sp, #88
 1335 0056 2448     		ldr	r0, .L92
 1336 0058 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1337              	.LVL62:
 505:Core/Src/main.c ****   {
 1338              		.loc 1 505 6 view .LVU458
 1339 005c 0028     		cmp	r0, #0
 1340 005e 37D1     		bne	.L86
 509:Core/Src/main.c ****   {
 1341              		.loc 1 509 3 is_stmt 1 view .LVU459
 509:Core/Src/main.c ****   {
 1342              		.loc 1 509 7 is_stmt 0 view .LVU460
 1343 0060 2148     		ldr	r0, .L92
 1344 0062 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1345              	.LVL63:
 509:Core/Src/main.c ****   {
 1346              		.loc 1 509 6 view .LVU461
 1347 0066 0028     		cmp	r0, #0
 1348 0068 34D1     		bne	.L87
 513:Core/Src/main.c ****   {
 1349              		.loc 1 513 3 is_stmt 1 view .LVU462
 513:Core/Src/main.c ****   {
 1350              		.loc 1 513 7 is_stmt 0 view .LVU463
 1351 006a 0821     		movs	r1, #8
 1352 006c 1E48     		ldr	r0, .L92
 1353 006e FFF7FEFF 		bl	HAL_TIM_OnePulse_Init
 1354              	.LVL64:
 513:Core/Src/main.c ****   {
 1355              		.loc 1 513 6 view .LVU464
 1356 0072 0028     		cmp	r0, #0
 1357 0074 30D1     		bne	.L88
 517:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1358              		.loc 1 517 3 is_stmt 1 view .LVU465
 517:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1359              		.loc 1 517 37 is_stmt 0 view .LVU466
 1360 0076 0023     		movs	r3, #0
 1361 0078 1393     		str	r3, [sp, #76]
ARM GAS  /tmp/cc0faEhb.s 			page 48


 518:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 1362              		.loc 1 518 3 is_stmt 1 view .LVU467
 518:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 1363              		.loc 1 518 33 is_stmt 0 view .LVU468
 1364 007a 1593     		str	r3, [sp, #84]
 519:Core/Src/main.c ****   {
 1365              		.loc 1 519 3 is_stmt 1 view .LVU469
 519:Core/Src/main.c ****   {
 1366              		.loc 1 519 7 is_stmt 0 view .LVU470
 1367 007c 13A9     		add	r1, sp, #76
 1368 007e 1A48     		ldr	r0, .L92
 1369 0080 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1370              	.LVL65:
 519:Core/Src/main.c ****   {
 1371              		.loc 1 519 6 view .LVU471
 1372 0084 50BB     		cbnz	r0, .L89
 523:Core/Src/main.c ****   sConfigOC.Pulse = 2;
 1373              		.loc 1 523 3 is_stmt 1 view .LVU472
 523:Core/Src/main.c ****   sConfigOC.Pulse = 2;
 1374              		.loc 1 523 20 is_stmt 0 view .LVU473
 1375 0086 6023     		movs	r3, #96
 1376 0088 0C93     		str	r3, [sp, #48]
 524:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 1377              		.loc 1 524 3 is_stmt 1 view .LVU474
 524:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 1378              		.loc 1 524 19 is_stmt 0 view .LVU475
 1379 008a 0223     		movs	r3, #2
 1380 008c 0D93     		str	r3, [sp, #52]
 525:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1381              		.loc 1 525 3 is_stmt 1 view .LVU476
 525:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1382              		.loc 1 525 24 is_stmt 0 view .LVU477
 1383 008e 0E93     		str	r3, [sp, #56]
 526:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1384              		.loc 1 526 3 is_stmt 1 view .LVU478
 526:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1385              		.loc 1 526 25 is_stmt 0 view .LVU479
 1386 0090 0022     		movs	r2, #0
 1387 0092 0F92     		str	r2, [sp, #60]
 527:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1388              		.loc 1 527 3 is_stmt 1 view .LVU480
 527:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1389              		.loc 1 527 24 is_stmt 0 view .LVU481
 1390 0094 1092     		str	r2, [sp, #64]
 528:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1391              		.loc 1 528 3 is_stmt 1 view .LVU482
 528:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1392              		.loc 1 528 25 is_stmt 0 view .LVU483
 1393 0096 1192     		str	r2, [sp, #68]
 529:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1394              		.loc 1 529 3 is_stmt 1 view .LVU484
 529:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1395              		.loc 1 529 26 is_stmt 0 view .LVU485
 1396 0098 1292     		str	r2, [sp, #72]
 530:Core/Src/main.c ****   {
 1397              		.loc 1 530 3 is_stmt 1 view .LVU486
 530:Core/Src/main.c ****   {
ARM GAS  /tmp/cc0faEhb.s 			page 49


 1398              		.loc 1 530 7 is_stmt 0 view .LVU487
 1399 009a 0CA9     		add	r1, sp, #48
 1400 009c 1248     		ldr	r0, .L92
 1401 009e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1402              	.LVL66:
 530:Core/Src/main.c ****   {
 1403              		.loc 1 530 6 view .LVU488
 1404 00a2 E8B9     		cbnz	r0, .L90
 534:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1405              		.loc 1 534 3 is_stmt 1 view .LVU489
 534:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1406              		.loc 1 534 40 is_stmt 0 view .LVU490
 1407 00a4 0023     		movs	r3, #0
 1408 00a6 0193     		str	r3, [sp, #4]
 535:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1409              		.loc 1 535 3 is_stmt 1 view .LVU491
 535:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1410              		.loc 1 535 41 is_stmt 0 view .LVU492
 1411 00a8 0293     		str	r3, [sp, #8]
 536:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1412              		.loc 1 536 3 is_stmt 1 view .LVU493
 536:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1413              		.loc 1 536 34 is_stmt 0 view .LVU494
 1414 00aa 0393     		str	r3, [sp, #12]
 537:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1415              		.loc 1 537 3 is_stmt 1 view .LVU495
 537:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1416              		.loc 1 537 33 is_stmt 0 view .LVU496
 1417 00ac 0493     		str	r3, [sp, #16]
 538:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1418              		.loc 1 538 3 is_stmt 1 view .LVU497
 538:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1419              		.loc 1 538 35 is_stmt 0 view .LVU498
 1420 00ae 0593     		str	r3, [sp, #20]
 539:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1421              		.loc 1 539 3 is_stmt 1 view .LVU499
 539:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1422              		.loc 1 539 38 is_stmt 0 view .LVU500
 1423 00b0 4FF40052 		mov	r2, #8192
 1424 00b4 0692     		str	r2, [sp, #24]
 540:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 1425              		.loc 1 540 3 is_stmt 1 view .LVU501
 540:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 1426              		.loc 1 540 40 is_stmt 0 view .LVU502
 1427 00b6 0B93     		str	r3, [sp, #44]
 541:Core/Src/main.c ****   {
 1428              		.loc 1 541 3 is_stmt 1 view .LVU503
 541:Core/Src/main.c ****   {
 1429              		.loc 1 541 7 is_stmt 0 view .LVU504
 1430 00b8 01A9     		add	r1, sp, #4
 1431 00ba 0B48     		ldr	r0, .L92
 1432 00bc FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1433              	.LVL67:
 541:Core/Src/main.c ****   {
 1434              		.loc 1 541 6 view .LVU505
 1435 00c0 80B9     		cbnz	r0, .L91
 548:Core/Src/main.c **** 
ARM GAS  /tmp/cc0faEhb.s 			page 50


 1436              		.loc 1 548 3 is_stmt 1 view .LVU506
 1437 00c2 0948     		ldr	r0, .L92
 1438 00c4 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1439              	.LVL68:
 550:Core/Src/main.c **** 
 1440              		.loc 1 550 1 is_stmt 0 view .LVU507
 1441 00c8 1AB0     		add	sp, sp, #104
 1442              		.cfi_remember_state
 1443              		.cfi_def_cfa_offset 8
 1444              		@ sp needed
 1445 00ca 10BD     		pop	{r4, pc}
 1446              	.L85:
 1447              		.cfi_restore_state
 502:Core/Src/main.c ****   }
 1448              		.loc 1 502 5 is_stmt 1 view .LVU508
 1449 00cc FFF7FEFF 		bl	Error_Handler
 1450              	.LVL69:
 1451              	.L86:
 507:Core/Src/main.c ****   }
 1452              		.loc 1 507 5 view .LVU509
 1453 00d0 FFF7FEFF 		bl	Error_Handler
 1454              	.LVL70:
 1455              	.L87:
 511:Core/Src/main.c ****   }
 1456              		.loc 1 511 5 view .LVU510
 1457 00d4 FFF7FEFF 		bl	Error_Handler
 1458              	.LVL71:
 1459              	.L88:
 515:Core/Src/main.c ****   }
 1460              		.loc 1 515 5 view .LVU511
 1461 00d8 FFF7FEFF 		bl	Error_Handler
 1462              	.LVL72:
 1463              	.L89:
 521:Core/Src/main.c ****   }
 1464              		.loc 1 521 5 view .LVU512
 1465 00dc FFF7FEFF 		bl	Error_Handler
 1466              	.LVL73:
 1467              	.L90:
 532:Core/Src/main.c ****   }
 1468              		.loc 1 532 5 view .LVU513
 1469 00e0 FFF7FEFF 		bl	Error_Handler
 1470              	.LVL74:
 1471              	.L91:
 543:Core/Src/main.c ****   }
 1472              		.loc 1 543 5 view .LVU514
 1473 00e4 FFF7FEFF 		bl	Error_Handler
 1474              	.LVL75:
 1475              	.L93:
 1476              		.align	2
 1477              	.L92:
 1478 00e8 00000000 		.word	.LANCHOR7
 1479 00ec 00400140 		.word	1073823744
 1480              		.cfi_endproc
 1481              	.LFE297:
 1483              		.section	.text.MX_TIM7_Init,"ax",%progbits
 1484              		.align	1
 1485              		.syntax unified
ARM GAS  /tmp/cc0faEhb.s 			page 51


 1486              		.thumb
 1487              		.thumb_func
 1489              	MX_TIM7_Init:
 1490              	.LFB296:
 441:Core/Src/main.c **** 
 1491              		.loc 1 441 1 view -0
 1492              		.cfi_startproc
 1493              		@ args = 0, pretend = 0, frame = 16
 1494              		@ frame_needed = 0, uses_anonymous_args = 0
 1495 0000 00B5     		push	{lr}
 1496              		.cfi_def_cfa_offset 4
 1497              		.cfi_offset 14, -4
 1498 0002 85B0     		sub	sp, sp, #20
 1499              		.cfi_def_cfa_offset 24
 447:Core/Src/main.c **** 
 1500              		.loc 1 447 3 view .LVU516
 447:Core/Src/main.c **** 
 1501              		.loc 1 447 27 is_stmt 0 view .LVU517
 1502 0004 0023     		movs	r3, #0
 1503 0006 0193     		str	r3, [sp, #4]
 1504 0008 0293     		str	r3, [sp, #8]
 1505 000a 0393     		str	r3, [sp, #12]
 452:Core/Src/main.c ****   htim7.Init.Prescaler = 666;
 1506              		.loc 1 452 3 is_stmt 1 view .LVU518
 452:Core/Src/main.c ****   htim7.Init.Prescaler = 666;
 1507              		.loc 1 452 18 is_stmt 0 view .LVU519
 1508 000c 0F48     		ldr	r0, .L100
 1509 000e 104A     		ldr	r2, .L100+4
 1510 0010 0260     		str	r2, [r0]
 453:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1511              		.loc 1 453 3 is_stmt 1 view .LVU520
 453:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 1512              		.loc 1 453 24 is_stmt 0 view .LVU521
 1513 0012 40F29A22 		movw	r2, #666
 1514 0016 4260     		str	r2, [r0, #4]
 454:Core/Src/main.c ****   htim7.Init.Period = 600;
 1515              		.loc 1 454 3 is_stmt 1 view .LVU522
 454:Core/Src/main.c ****   htim7.Init.Period = 600;
 1516              		.loc 1 454 26 is_stmt 0 view .LVU523
 1517 0018 8360     		str	r3, [r0, #8]
 455:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1518              		.loc 1 455 3 is_stmt 1 view .LVU524
 455:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1519              		.loc 1 455 21 is_stmt 0 view .LVU525
 1520 001a 4FF41673 		mov	r3, #600
 1521 001e C360     		str	r3, [r0, #12]
 456:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1522              		.loc 1 456 3 is_stmt 1 view .LVU526
 456:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 1523              		.loc 1 456 32 is_stmt 0 view .LVU527
 1524 0020 8023     		movs	r3, #128
 1525 0022 8361     		str	r3, [r0, #24]
 457:Core/Src/main.c ****   {
 1526              		.loc 1 457 3 is_stmt 1 view .LVU528
 457:Core/Src/main.c ****   {
 1527              		.loc 1 457 7 is_stmt 0 view .LVU529
 1528 0024 FFF7FEFF 		bl	HAL_TIM_Base_Init
ARM GAS  /tmp/cc0faEhb.s 			page 52


 1529              	.LVL76:
 457:Core/Src/main.c ****   {
 1530              		.loc 1 457 6 view .LVU530
 1531 0028 58B9     		cbnz	r0, .L98
 461:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1532              		.loc 1 461 3 is_stmt 1 view .LVU531
 461:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1533              		.loc 1 461 37 is_stmt 0 view .LVU532
 1534 002a 2023     		movs	r3, #32
 1535 002c 0193     		str	r3, [sp, #4]
 462:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 1536              		.loc 1 462 3 is_stmt 1 view .LVU533
 462:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 1537              		.loc 1 462 33 is_stmt 0 view .LVU534
 1538 002e 0023     		movs	r3, #0
 1539 0030 0393     		str	r3, [sp, #12]
 463:Core/Src/main.c ****   {
 1540              		.loc 1 463 3 is_stmt 1 view .LVU535
 463:Core/Src/main.c ****   {
 1541              		.loc 1 463 7 is_stmt 0 view .LVU536
 1542 0032 01A9     		add	r1, sp, #4
 1543 0034 0548     		ldr	r0, .L100
 1544 0036 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1545              	.LVL77:
 463:Core/Src/main.c ****   {
 1546              		.loc 1 463 6 view .LVU537
 1547 003a 20B9     		cbnz	r0, .L99
 471:Core/Src/main.c **** 
 1548              		.loc 1 471 1 view .LVU538
 1549 003c 05B0     		add	sp, sp, #20
 1550              		.cfi_remember_state
 1551              		.cfi_def_cfa_offset 4
 1552              		@ sp needed
 1553 003e 5DF804FB 		ldr	pc, [sp], #4
 1554              	.L98:
 1555              		.cfi_restore_state
 459:Core/Src/main.c ****   }
 1556              		.loc 1 459 5 is_stmt 1 view .LVU539
 1557 0042 FFF7FEFF 		bl	Error_Handler
 1558              	.LVL78:
 1559              	.L99:
 465:Core/Src/main.c ****   }
 1560              		.loc 1 465 5 view .LVU540
 1561 0046 FFF7FEFF 		bl	Error_Handler
 1562              	.LVL79:
 1563              	.L101:
 1564 004a 00BF     		.align	2
 1565              	.L100:
 1566 004c 00000000 		.word	.LANCHOR8
 1567 0050 00140040 		.word	1073746944
 1568              		.cfi_endproc
 1569              	.LFE296:
 1571              		.section	.text.SystemClock_Config,"ax",%progbits
 1572              		.align	1
 1573              		.global	SystemClock_Config
 1574              		.syntax unified
 1575              		.thumb
ARM GAS  /tmp/cc0faEhb.s 			page 53


 1576              		.thumb_func
 1578              	SystemClock_Config:
 1579              	.LFB292:
 165:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1580              		.loc 1 165 1 view -0
 1581              		.cfi_startproc
 1582              		@ args = 0, pretend = 0, frame = 88
 1583              		@ frame_needed = 0, uses_anonymous_args = 0
 1584 0000 00B5     		push	{lr}
 1585              		.cfi_def_cfa_offset 4
 1586              		.cfi_offset 14, -4
 1587 0002 97B0     		sub	sp, sp, #92
 1588              		.cfi_def_cfa_offset 96
 166:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1589              		.loc 1 166 3 view .LVU542
 166:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1590              		.loc 1 166 22 is_stmt 0 view .LVU543
 1591 0004 4422     		movs	r2, #68
 1592 0006 0021     		movs	r1, #0
 1593 0008 05A8     		add	r0, sp, #20
 1594 000a FFF7FEFF 		bl	memset
 1595              	.LVL80:
 167:Core/Src/main.c **** 
 1596              		.loc 1 167 3 is_stmt 1 view .LVU544
 167:Core/Src/main.c **** 
 1597              		.loc 1 167 22 is_stmt 0 view .LVU545
 1598 000e 0023     		movs	r3, #0
 1599 0010 0093     		str	r3, [sp]
 1600 0012 0193     		str	r3, [sp, #4]
 1601 0014 0293     		str	r3, [sp, #8]
 1602 0016 0393     		str	r3, [sp, #12]
 1603 0018 0493     		str	r3, [sp, #16]
 171:Core/Src/main.c ****   {
 1604              		.loc 1 171 3 is_stmt 1 view .LVU546
 171:Core/Src/main.c ****   {
 1605              		.loc 1 171 7 is_stmt 0 view .LVU547
 1606 001a 4FF40070 		mov	r0, #512
 1607 001e FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 1608              	.LVL81:
 171:Core/Src/main.c ****   {
 1609              		.loc 1 171 6 view .LVU548
 1610 0022 D0B9     		cbnz	r0, .L107
 179:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 1611              		.loc 1 179 3 is_stmt 1 view .LVU549
 179:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 1612              		.loc 1 179 36 is_stmt 0 view .LVU550
 1613 0024 1023     		movs	r3, #16
 1614 0026 0593     		str	r3, [sp, #20]
 180:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 1615              		.loc 1 180 3 is_stmt 1 view .LVU551
 180:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 1616              		.loc 1 180 30 is_stmt 0 view .LVU552
 1617 0028 0123     		movs	r3, #1
 1618 002a 0B93     		str	r3, [sp, #44]
 181:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 1619              		.loc 1 181 3 is_stmt 1 view .LVU553
 181:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
ARM GAS  /tmp/cc0faEhb.s 			page 54


 1620              		.loc 1 181 41 is_stmt 0 view .LVU554
 1621 002c 0023     		movs	r3, #0
 1622 002e 0C93     		str	r3, [sp, #48]
 182:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1623              		.loc 1 182 3 is_stmt 1 view .LVU555
 182:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1624              		.loc 1 182 35 is_stmt 0 view .LVU556
 1625 0030 6022     		movs	r2, #96
 1626 0032 0D92     		str	r2, [sp, #52]
 183:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1627              		.loc 1 183 3 is_stmt 1 view .LVU557
 183:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1628              		.loc 1 183 34 is_stmt 0 view .LVU558
 1629 0034 0F93     		str	r3, [sp, #60]
 184:Core/Src/main.c ****   {
 1630              		.loc 1 184 3 is_stmt 1 view .LVU559
 184:Core/Src/main.c ****   {
 1631              		.loc 1 184 7 is_stmt 0 view .LVU560
 1632 0036 05A8     		add	r0, sp, #20
 1633 0038 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1634              	.LVL82:
 184:Core/Src/main.c ****   {
 1635              		.loc 1 184 6 view .LVU561
 1636 003c 78B9     		cbnz	r0, .L108
 191:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1637              		.loc 1 191 3 is_stmt 1 view .LVU562
 191:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1638              		.loc 1 191 31 is_stmt 0 view .LVU563
 1639 003e 0F23     		movs	r3, #15
 1640 0040 0093     		str	r3, [sp]
 193:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1641              		.loc 1 193 3 is_stmt 1 view .LVU564
 193:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1642              		.loc 1 193 34 is_stmt 0 view .LVU565
 1643 0042 0021     		movs	r1, #0
 1644 0044 0191     		str	r1, [sp, #4]
 194:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1645              		.loc 1 194 3 is_stmt 1 view .LVU566
 194:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1646              		.loc 1 194 35 is_stmt 0 view .LVU567
 1647 0046 0291     		str	r1, [sp, #8]
 195:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1648              		.loc 1 195 3 is_stmt 1 view .LVU568
 195:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1649              		.loc 1 195 36 is_stmt 0 view .LVU569
 1650 0048 0391     		str	r1, [sp, #12]
 196:Core/Src/main.c **** 
 1651              		.loc 1 196 3 is_stmt 1 view .LVU570
 196:Core/Src/main.c **** 
 1652              		.loc 1 196 36 is_stmt 0 view .LVU571
 1653 004a 0491     		str	r1, [sp, #16]
 198:Core/Src/main.c ****   {
 1654              		.loc 1 198 3 is_stmt 1 view .LVU572
 198:Core/Src/main.c ****   {
 1655              		.loc 1 198 7 is_stmt 0 view .LVU573
 1656 004c 6846     		mov	r0, sp
 1657 004e FFF7FEFF 		bl	HAL_RCC_ClockConfig
ARM GAS  /tmp/cc0faEhb.s 			page 55


 1658              	.LVL83:
 198:Core/Src/main.c ****   {
 1659              		.loc 1 198 6 view .LVU574
 1660 0052 30B9     		cbnz	r0, .L109
 202:Core/Src/main.c **** 
 1661              		.loc 1 202 1 view .LVU575
 1662 0054 17B0     		add	sp, sp, #92
 1663              		.cfi_remember_state
 1664              		.cfi_def_cfa_offset 4
 1665              		@ sp needed
 1666 0056 5DF804FB 		ldr	pc, [sp], #4
 1667              	.L107:
 1668              		.cfi_restore_state
 173:Core/Src/main.c ****   }
 1669              		.loc 1 173 5 is_stmt 1 view .LVU576
 1670 005a FFF7FEFF 		bl	Error_Handler
 1671              	.LVL84:
 1672              	.L108:
 186:Core/Src/main.c ****   }
 1673              		.loc 1 186 5 view .LVU577
 1674 005e FFF7FEFF 		bl	Error_Handler
 1675              	.LVL85:
 1676              	.L109:
 200:Core/Src/main.c ****   }
 1677              		.loc 1 200 5 view .LVU578
 1678 0062 FFF7FEFF 		bl	Error_Handler
 1679              	.LVL86:
 1680              		.cfi_endproc
 1681              	.LFE292:
 1683              		.section	.text.PeriphCommonClock_Config,"ax",%progbits
 1684              		.align	1
 1685              		.global	PeriphCommonClock_Config
 1686              		.syntax unified
 1687              		.thumb
 1688              		.thumb_func
 1690              	PeriphCommonClock_Config:
 1691              	.LFB293:
 209:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1692              		.loc 1 209 1 view -0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 96
 1695              		@ frame_needed = 0, uses_anonymous_args = 0
 1696 0000 00B5     		push	{lr}
 1697              		.cfi_def_cfa_offset 4
 1698              		.cfi_offset 14, -4
 1699 0002 99B0     		sub	sp, sp, #100
 1700              		.cfi_def_cfa_offset 104
 210:Core/Src/main.c **** 
 1701              		.loc 1 210 3 view .LVU580
 210:Core/Src/main.c **** 
 1702              		.loc 1 210 28 is_stmt 0 view .LVU581
 1703 0004 5C22     		movs	r2, #92
 1704 0006 0021     		movs	r1, #0
 1705 0008 01A8     		add	r0, sp, #4
 1706 000a FFF7FEFF 		bl	memset
 1707              	.LVL87:
 214:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
ARM GAS  /tmp/cc0faEhb.s 			page 56


 1708              		.loc 1 214 3 is_stmt 1 view .LVU582
 214:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 1709              		.loc 1 214 38 is_stmt 0 view .LVU583
 1710 000e 4FF40423 		mov	r3, #540672
 1711 0012 0193     		str	r3, [sp, #4]
 215:Core/Src/main.c ****   PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 1712              		.loc 1 215 3 is_stmt 1 view .LVU584
 215:Core/Src/main.c ****   PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 1713              		.loc 1 215 35 is_stmt 0 view .LVU585
 1714 0014 4FF08053 		mov	r3, #268435456
 1715 0018 1593     		str	r3, [sp, #84]
 216:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 1716              		.loc 1 216 3 is_stmt 1 view .LVU586
 216:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 1717              		.loc 1 216 38 is_stmt 0 view .LVU587
 1718 001a 4FF08063 		mov	r3, #67108864
 1719 001e 1393     		str	r3, [sp, #76]
 217:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 1720              		.loc 1 217 3 is_stmt 1 view .LVU588
 217:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 1721              		.loc 1 217 39 is_stmt 0 view .LVU589
 1722 0020 0123     		movs	r3, #1
 1723 0022 0293     		str	r3, [sp, #8]
 218:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 1724              		.loc 1 218 3 is_stmt 1 view .LVU590
 218:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 1725              		.loc 1 218 34 is_stmt 0 view .LVU591
 1726 0024 0393     		str	r3, [sp, #12]
 219:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 1727              		.loc 1 219 3 is_stmt 1 view .LVU592
 219:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 1728              		.loc 1 219 34 is_stmt 0 view .LVU593
 1729 0026 1023     		movs	r3, #16
 1730 0028 0493     		str	r3, [sp, #16]
 220:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 1731              		.loc 1 220 3 is_stmt 1 view .LVU594
 220:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 1732              		.loc 1 220 34 is_stmt 0 view .LVU595
 1733 002a 0723     		movs	r3, #7
 1734 002c 0593     		str	r3, [sp, #20]
 221:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 1735              		.loc 1 221 3 is_stmt 1 view .LVU596
 221:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 1736              		.loc 1 221 34 is_stmt 0 view .LVU597
 1737 002e 0223     		movs	r3, #2
 1738 0030 0693     		str	r3, [sp, #24]
 222:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 1739              		.loc 1 222 3 is_stmt 1 view .LVU598
 222:Core/Src/main.c ****   PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 1740              		.loc 1 222 34 is_stmt 0 view .LVU599
 1741 0032 0793     		str	r3, [sp, #28]
 223:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1742              		.loc 1 223 3 is_stmt 1 view .LVU600
 223:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1743              		.loc 1 223 41 is_stmt 0 view .LVU601
 1744 0034 4FF08873 		mov	r3, #17825792
 1745 0038 0893     		str	r3, [sp, #32]
ARM GAS  /tmp/cc0faEhb.s 			page 57


 224:Core/Src/main.c ****   {
 1746              		.loc 1 224 3 is_stmt 1 view .LVU602
 224:Core/Src/main.c ****   {
 1747              		.loc 1 224 7 is_stmt 0 view .LVU603
 1748 003a 01A8     		add	r0, sp, #4
 1749 003c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1750              	.LVL88:
 224:Core/Src/main.c ****   {
 1751              		.loc 1 224 6 view .LVU604
 1752 0040 10B9     		cbnz	r0, .L113
 228:Core/Src/main.c **** 
 1753              		.loc 1 228 1 view .LVU605
 1754 0042 19B0     		add	sp, sp, #100
 1755              		.cfi_remember_state
 1756              		.cfi_def_cfa_offset 4
 1757              		@ sp needed
 1758 0044 5DF804FB 		ldr	pc, [sp], #4
 1759              	.L113:
 1760              		.cfi_restore_state
 226:Core/Src/main.c ****   }
 1761              		.loc 1 226 5 is_stmt 1 view .LVU606
 1762 0048 FFF7FEFF 		bl	Error_Handler
 1763              	.LVL89:
 1764              		.cfi_endproc
 1765              	.LFE293:
 1767              		.section	.text.main,"ax",%progbits
 1768              		.align	1
 1769              		.global	main
 1770              		.syntax unified
 1771              		.thumb
 1772              		.thumb_func
 1774              	main:
 1775              	.LFB291:
 104:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1776              		.loc 1 104 1 view -0
 1777              		.cfi_startproc
 1778              		@ Volatile: function does not return.
 1779              		@ args = 0, pretend = 0, frame = 0
 1780              		@ frame_needed = 0, uses_anonymous_args = 0
 1781 0000 08B5     		push	{r3, lr}
 1782              		.cfi_def_cfa_offset 8
 1783              		.cfi_offset 3, -8
 1784              		.cfi_offset 14, -4
 112:Core/Src/main.c **** 
 1785              		.loc 1 112 3 view .LVU608
 1786 0002 FFF7FEFF 		bl	HAL_Init
 1787              	.LVL90:
 119:Core/Src/main.c **** 
 1788              		.loc 1 119 3 view .LVU609
 1789 0006 FFF7FEFF 		bl	SystemClock_Config
 1790              	.LVL91:
 122:Core/Src/main.c **** 
 1791              		.loc 1 122 3 view .LVU610
 1792 000a FFF7FEFF 		bl	PeriphCommonClock_Config
 1793              	.LVL92:
 129:Core/Src/main.c ****   MX_DMA_Init();
 1794              		.loc 1 129 3 view .LVU611
ARM GAS  /tmp/cc0faEhb.s 			page 58


 1795 000e FFF7FEFF 		bl	MX_GPIO_Init
 1796              	.LVL93:
 130:Core/Src/main.c ****   MX_ADC1_Init();
 1797              		.loc 1 130 3 view .LVU612
 1798 0012 FFF7FEFF 		bl	MX_DMA_Init
 1799              	.LVL94:
 131:Core/Src/main.c ****   MX_USART1_UART_Init();
 1800              		.loc 1 131 3 view .LVU613
 1801 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1802              	.LVL95:
 132:Core/Src/main.c ****   MX_TIM1_Init();
 1803              		.loc 1 132 3 view .LVU614
 1804 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 1805              	.LVL96:
 133:Core/Src/main.c ****   MX_USART2_UART_Init();
 1806              		.loc 1 133 3 view .LVU615
 1807 001e FFF7FEFF 		bl	MX_TIM1_Init
 1808              	.LVL97:
 134:Core/Src/main.c ****   MX_USART3_UART_Init();
 1809              		.loc 1 134 3 view .LVU616
 1810 0022 FFF7FEFF 		bl	MX_USART2_UART_Init
 1811              	.LVL98:
 135:Core/Src/main.c ****   MX_TIM15_Init();
 1812              		.loc 1 135 3 view .LVU617
 1813 0026 FFF7FEFF 		bl	MX_USART3_UART_Init
 1814              	.LVL99:
 136:Core/Src/main.c ****   MX_TIM7_Init();
 1815              		.loc 1 136 3 view .LVU618
 1816 002a FFF7FEFF 		bl	MX_TIM15_Init
 1817              	.LVL100:
 137:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1818              		.loc 1 137 3 view .LVU619
 1819 002e FFF7FEFF 		bl	MX_TIM7_Init
 1820              	.LVL101:
 140:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim7);
 1821              		.loc 1 140 3 view .LVU620
 1822 0032 FFF7FEFF 		bl	initLCD
 1823              	.LVL102:
 141:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_data, 8);
 1824              		.loc 1 141 3 view .LVU621
 1825 0036 0748     		ldr	r0, .L117
 1826 0038 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1827              	.LVL103:
 142:Core/Src/main.c **** 
 1828              		.loc 1 142 3 view .LVU622
 1829 003c 0822     		movs	r2, #8
 1830 003e 0649     		ldr	r1, .L117+4
 1831 0040 0648     		ldr	r0, .L117+8
 1832 0042 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1833              	.LVL104:
 1834              	.L115:
 148:Core/Src/main.c ****   {
 1835              		.loc 1 148 3 discriminator 1 view .LVU623
 154:Core/Src/main.c ****     //HAL_Delay(1);
 1836              		.loc 1 154 5 discriminator 1 view .LVU624
 1837 0046 064B     		ldr	r3, .L117+12
 1838 0048 064A     		ldr	r2, .L117+16
ARM GAS  /tmp/cc0faEhb.s 			page 59


 1839 004a 0749     		ldr	r1, .L117+20
 1840 004c 0748     		ldr	r0, .L117+24
 1841 004e FFF7FEFF 		bl	CNC_HL_Control
 1842              	.LVL105:
 148:Core/Src/main.c ****   {
 1843              		.loc 1 148 9 discriminator 1 view .LVU625
 1844 0052 F8E7     		b	.L115
 1845              	.L118:
 1846              		.align	2
 1847              	.L117:
 1848 0054 00000000 		.word	.LANCHOR8
 1849 0058 00000000 		.word	.LANCHOR0
 1850 005c 00000000 		.word	.LANCHOR2
 1851 0060 00000000 		.word	.LANCHOR3
 1852 0064 00000000 		.word	.LANCHOR7
 1853 0068 00000000 		.word	.LANCHOR4
 1854 006c 00000000 		.word	.LANCHOR1
 1855              		.cfi_endproc
 1856              	.LFE291:
 1858              		.global	adc_data
 1859              		.global	hmi_info
 1860              		.global	huart3
 1861              		.global	huart2
 1862              		.global	huart1
 1863              		.global	htim15
 1864              		.global	htim7
 1865              		.global	htim1
 1866              		.global	hdma_adc1
 1867              		.global	hadc1
 1868              		.section	.bss.adc_data,"aw",%nobits
 1869              		.align	2
 1870              		.set	.LANCHOR0,. + 0
 1873              	adc_data:
 1874 0000 00000000 		.space	16
 1874      00000000 
 1874      00000000 
 1874      00000000 
 1875              		.section	.bss.hadc1,"aw",%nobits
 1876              		.align	2
 1877              		.set	.LANCHOR2,. + 0
 1880              	hadc1:
 1881 0000 00000000 		.space	100
 1881      00000000 
 1881      00000000 
 1881      00000000 
 1881      00000000 
 1882              		.section	.bss.hdma_adc1,"aw",%nobits
 1883              		.align	2
 1886              	hdma_adc1:
 1887 0000 00000000 		.space	72
 1887      00000000 
 1887      00000000 
 1887      00000000 
 1887      00000000 
 1888              		.section	.bss.htim1,"aw",%nobits
 1889              		.align	2
 1890              		.set	.LANCHOR4,. + 0
ARM GAS  /tmp/cc0faEhb.s 			page 60


 1893              	htim1:
 1894 0000 00000000 		.space	76
 1894      00000000 
 1894      00000000 
 1894      00000000 
 1894      00000000 
 1895              		.section	.bss.htim15,"aw",%nobits
 1896              		.align	2
 1897              		.set	.LANCHOR7,. + 0
 1900              	htim15:
 1901 0000 00000000 		.space	76
 1901      00000000 
 1901      00000000 
 1901      00000000 
 1901      00000000 
 1902              		.section	.bss.htim7,"aw",%nobits
 1903              		.align	2
 1904              		.set	.LANCHOR8,. + 0
 1907              	htim7:
 1908 0000 00000000 		.space	76
 1908      00000000 
 1908      00000000 
 1908      00000000 
 1908      00000000 
 1909              		.section	.bss.huart1,"aw",%nobits
 1910              		.align	2
 1911              		.set	.LANCHOR3,. + 0
 1914              	huart1:
 1915 0000 00000000 		.space	132
 1915      00000000 
 1915      00000000 
 1915      00000000 
 1915      00000000 
 1916              		.section	.bss.huart2,"aw",%nobits
 1917              		.align	2
 1918              		.set	.LANCHOR5,. + 0
 1921              	huart2:
 1922 0000 00000000 		.space	132
 1922      00000000 
 1922      00000000 
 1922      00000000 
 1922      00000000 
 1923              		.section	.bss.huart3,"aw",%nobits
 1924              		.align	2
 1925              		.set	.LANCHOR6,. + 0
 1928              	huart3:
 1929 0000 00000000 		.space	132
 1929      00000000 
 1929      00000000 
 1929      00000000 
 1929      00000000 
 1930              		.section	.data.hmi_info,"aw"
 1931              		.align	2
 1932              		.set	.LANCHOR1,. + 0
 1935              	hmi_info:
 1936 0000 00       		.byte	0
 1937 0001 00       		.byte	0
ARM GAS  /tmp/cc0faEhb.s 			page 61


 1938 0002 02       		.byte	2
 1939 0003 00       		.space	1
 1940 0004 B80B     		.short	3000
 1941 0006 B80B     		.short	3000
 1942 0008 0000     		.short	0
 1943 000a 0000     		.short	0
 1944 000c 0000     		.short	0
 1945 000e 0000     		.short	0
 1946 0010 6400     		.short	100
 1947 0012 00       		.byte	0
 1948 0013 00       		.byte	0
 1949 0014 01       		.byte	1
 1950 0015 00       		.byte	0
 1951 0016 FF       		.byte	-1
 1952 0017 00       		.space	1
 1953              		.text
 1954              	.Letext0:
 1955              		.file 3 "/home/retfie/.config/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 1956              		.file 4 "/home/retfie/.config/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 1957              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l431xx.h"
 1958              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 1959              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 1960              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 1961              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
 1962              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 1963              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 1964              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
 1965              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 1966              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 1967              		.file 15 "Core/Inc/cnc_info.h"
 1968              		.file 16 "Core/Inc/lcd.h"
 1969              		.file 17 "Core/Inc/hmi.h"
 1970              		.file 18 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
 1971              		.file 19 "Core/Inc/main.h"
 1972              		.file 20 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
 1973              		.file 21 "Core/Inc/cnc_core.h"
 1974              		.file 22 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 1975              		.file 23 "<built-in>"
ARM GAS  /tmp/cc0faEhb.s 			page 62


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc0faEhb.s:20     .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc0faEhb.s:25     .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc0faEhb.s:59     .text.MX_DMA_Init:000000000000001c $d
     /tmp/cc0faEhb.s:64     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc0faEhb.s:69     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc0faEhb.s:378    .text.MX_GPIO_Init:0000000000000174 $d
     /tmp/cc0faEhb.s:387    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc0faEhb.s:393    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc0faEhb.s:417    .text.HAL_TIM_PeriodElapsedCallback:000000000000000c $d
     /tmp/cc0faEhb.s:423    .rodata.Error_Handler.str1.4:0000000000000000 $d
     /tmp/cc0faEhb.s:427    .text.Error_Handler:0000000000000000 $t
     /tmp/cc0faEhb.s:433    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc0faEhb.s:489    .text.Error_Handler:0000000000000030 $d
     /tmp/cc0faEhb.s:494    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc0faEhb.s:499    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc0faEhb.s:770    .text.MX_ADC1_Init:0000000000000124 $d
     /tmp/cc0faEhb.s:784    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc0faEhb.s:789    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc0faEhb.s:849    .text.MX_USART1_UART_Init:0000000000000030 $d
     /tmp/cc0faEhb.s:855    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/cc0faEhb.s:860    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/cc0faEhb.s:1102   .text.MX_TIM1_Init:00000000000000fc $d
     /tmp/cc0faEhb.s:1108   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc0faEhb.s:1113   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc0faEhb.s:1173   .text.MX_USART2_UART_Init:0000000000000030 $d
     /tmp/cc0faEhb.s:1179   .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/cc0faEhb.s:1184   .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/cc0faEhb.s:1244   .text.MX_USART3_UART_Init:0000000000000030 $d
     /tmp/cc0faEhb.s:1250   .text.MX_TIM15_Init:0000000000000000 $t
     /tmp/cc0faEhb.s:1255   .text.MX_TIM15_Init:0000000000000000 MX_TIM15_Init
     /tmp/cc0faEhb.s:1478   .text.MX_TIM15_Init:00000000000000e8 $d
     /tmp/cc0faEhb.s:1484   .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/cc0faEhb.s:1489   .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/cc0faEhb.s:1566   .text.MX_TIM7_Init:000000000000004c $d
     /tmp/cc0faEhb.s:1572   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc0faEhb.s:1578   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc0faEhb.s:1684   .text.PeriphCommonClock_Config:0000000000000000 $t
     /tmp/cc0faEhb.s:1690   .text.PeriphCommonClock_Config:0000000000000000 PeriphCommonClock_Config
     /tmp/cc0faEhb.s:1768   .text.main:0000000000000000 $t
     /tmp/cc0faEhb.s:1774   .text.main:0000000000000000 main
     /tmp/cc0faEhb.s:1848   .text.main:0000000000000054 $d
     /tmp/cc0faEhb.s:1873   .bss.adc_data:0000000000000000 adc_data
     /tmp/cc0faEhb.s:1935   .data.hmi_info:0000000000000000 hmi_info
     /tmp/cc0faEhb.s:1928   .bss.huart3:0000000000000000 huart3
     /tmp/cc0faEhb.s:1921   .bss.huart2:0000000000000000 huart2
     /tmp/cc0faEhb.s:1914   .bss.huart1:0000000000000000 huart1
     /tmp/cc0faEhb.s:1900   .bss.htim15:0000000000000000 htim15
     /tmp/cc0faEhb.s:1907   .bss.htim7:0000000000000000 htim7
     /tmp/cc0faEhb.s:1893   .bss.htim1:0000000000000000 htim1
     /tmp/cc0faEhb.s:1886   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/cc0faEhb.s:1880   .bss.hadc1:0000000000000000 hadc1
     /tmp/cc0faEhb.s:1869   .bss.adc_data:0000000000000000 $d
     /tmp/cc0faEhb.s:1876   .bss.hadc1:0000000000000000 $d
     /tmp/cc0faEhb.s:1883   .bss.hdma_adc1:0000000000000000 $d
     /tmp/cc0faEhb.s:1889   .bss.htim1:0000000000000000 $d
ARM GAS  /tmp/cc0faEhb.s 			page 63


     /tmp/cc0faEhb.s:1896   .bss.htim15:0000000000000000 $d
     /tmp/cc0faEhb.s:1903   .bss.htim7:0000000000000000 $d
     /tmp/cc0faEhb.s:1910   .bss.huart1:0000000000000000 $d
     /tmp/cc0faEhb.s:1917   .bss.huart2:0000000000000000 $d
     /tmp/cc0faEhb.s:1924   .bss.huart3:0000000000000000 $d
     /tmp/cc0faEhb.s:1931   .data.hmi_info:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HMI_Update
clearLCD
setCursor
writeLCD
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_OnePulse_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
initLCD
HAL_TIM_Base_Start_IT
HAL_ADC_Start_DMA
CNC_HL_Control
