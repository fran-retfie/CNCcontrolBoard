ARM GAS  /tmp/ccHRUVuB.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32l4xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB288:
  28              		.file 1 "Core/Src/stm32l4xx_it.c"
   1:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32l4xx_it.c **** /**
   3:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32l4xx_it.c ****   * @file    stm32l4xx_it.c
   5:Core/Src/stm32l4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32l4xx_it.c ****   * @attention
   8:Core/Src/stm32l4xx_it.c ****   *
   9:Core/Src/stm32l4xx_it.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/stm32l4xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32l4xx_it.c ****   *
  12:Core/Src/stm32l4xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32l4xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32l4xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32l4xx_it.c ****   *
  16:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32l4xx_it.c ****   */
  18:Core/Src/stm32l4xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32l4xx_it.c **** 
  20:Core/Src/stm32l4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32l4xx_it.c **** #include "main.h"
  22:Core/Src/stm32l4xx_it.c **** #include "stm32l4xx_it.h"
  23:Core/Src/stm32l4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32l4xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32l4xx_it.c **** 
  27:Core/Src/stm32l4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32l4xx_it.c **** 
  30:Core/Src/stm32l4xx_it.c **** /* USER CODE END TD */
ARM GAS  /tmp/ccHRUVuB.s 			page 2


  31:Core/Src/stm32l4xx_it.c **** 
  32:Core/Src/stm32l4xx_it.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32l4xx_it.c **** 
  35:Core/Src/stm32l4xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32l4xx_it.c **** 
  37:Core/Src/stm32l4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32l4xx_it.c **** 
  40:Core/Src/stm32l4xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32l4xx_it.c **** 
  42:Core/Src/stm32l4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32l4xx_it.c **** 
  45:Core/Src/stm32l4xx_it.c **** /* USER CODE END PV */
  46:Core/Src/stm32l4xx_it.c **** 
  47:Core/Src/stm32l4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  48:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PFP */
  49:Core/Src/stm32l4xx_it.c **** 
  50:Core/Src/stm32l4xx_it.c **** /* USER CODE END PFP */
  51:Core/Src/stm32l4xx_it.c **** 
  52:Core/Src/stm32l4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  53:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/stm32l4xx_it.c **** 
  55:Core/Src/stm32l4xx_it.c **** /* USER CODE END 0 */
  56:Core/Src/stm32l4xx_it.c **** 
  57:Core/Src/stm32l4xx_it.c **** /* External variables --------------------------------------------------------*/
  58:Core/Src/stm32l4xx_it.c **** extern TIM_HandleTypeDef htim1;
  59:Core/Src/stm32l4xx_it.c **** extern TIM_HandleTypeDef htim7;
  60:Core/Src/stm32l4xx_it.c **** extern TIM_HandleTypeDef htim15;
  61:Core/Src/stm32l4xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  62:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN EV */
  63:Core/Src/stm32l4xx_it.c **** 
  64:Core/Src/stm32l4xx_it.c **** /* USER CODE END EV */
  65:Core/Src/stm32l4xx_it.c **** 
  66:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
  67:Core/Src/stm32l4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  68:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
  69:Core/Src/stm32l4xx_it.c **** /**
  70:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  71:Core/Src/stm32l4xx_it.c ****   */
  72:Core/Src/stm32l4xx_it.c **** void NMI_Handler(void)
  73:Core/Src/stm32l4xx_it.c **** {
  29              		.loc 1 73 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.L2:
  74:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  75:Core/Src/stm32l4xx_it.c **** 
  76:Core/Src/stm32l4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  77:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  78:Core/Src/stm32l4xx_it.c ****   while (1)
  36              		.loc 1 78 3 discriminator 1 view .LVU1
  79:Core/Src/stm32l4xx_it.c ****   {
ARM GAS  /tmp/ccHRUVuB.s 			page 3


  80:Core/Src/stm32l4xx_it.c ****   }
  37              		.loc 1 80 3 discriminator 1 view .LVU2
  78:Core/Src/stm32l4xx_it.c ****   {
  38              		.loc 1 78 9 discriminator 1 view .LVU3
  39 0000 FEE7     		b	.L2
  40              		.cfi_endproc
  41              	.LFE288:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  50              	HardFault_Handler:
  51              	.LFB289:
  81:Core/Src/stm32l4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  82:Core/Src/stm32l4xx_it.c **** }
  83:Core/Src/stm32l4xx_it.c **** 
  84:Core/Src/stm32l4xx_it.c **** /**
  85:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  86:Core/Src/stm32l4xx_it.c ****   */
  87:Core/Src/stm32l4xx_it.c **** void HardFault_Handler(void)
  88:Core/Src/stm32l4xx_it.c **** {
  52              		.loc 1 88 1 view -0
  53              		.cfi_startproc
  54              		@ Volatile: function does not return.
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.L4:
  89:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  90:Core/Src/stm32l4xx_it.c **** 
  91:Core/Src/stm32l4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  92:Core/Src/stm32l4xx_it.c ****   while (1)
  59              		.loc 1 92 3 discriminator 1 view .LVU5
  93:Core/Src/stm32l4xx_it.c ****   {
  94:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  95:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  96:Core/Src/stm32l4xx_it.c ****   }
  60              		.loc 1 96 3 discriminator 1 view .LVU6
  92:Core/Src/stm32l4xx_it.c ****   {
  61              		.loc 1 92 9 discriminator 1 view .LVU7
  62 0000 FEE7     		b	.L4
  63              		.cfi_endproc
  64              	.LFE289:
  66              		.section	.text.MemManage_Handler,"ax",%progbits
  67              		.align	1
  68              		.global	MemManage_Handler
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  73              	MemManage_Handler:
  74              	.LFB290:
  97:Core/Src/stm32l4xx_it.c **** }
  98:Core/Src/stm32l4xx_it.c **** 
  99:Core/Src/stm32l4xx_it.c **** /**
 100:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Memory management fault.
ARM GAS  /tmp/ccHRUVuB.s 			page 4


 101:Core/Src/stm32l4xx_it.c ****   */
 102:Core/Src/stm32l4xx_it.c **** void MemManage_Handler(void)
 103:Core/Src/stm32l4xx_it.c **** {
  75              		.loc 1 103 1 view -0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.L6:
 104:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 105:Core/Src/stm32l4xx_it.c **** 
 106:Core/Src/stm32l4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 107:Core/Src/stm32l4xx_it.c ****   while (1)
  82              		.loc 1 107 3 discriminator 1 view .LVU9
 108:Core/Src/stm32l4xx_it.c ****   {
 109:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 110:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 111:Core/Src/stm32l4xx_it.c ****   }
  83              		.loc 1 111 3 discriminator 1 view .LVU10
 107:Core/Src/stm32l4xx_it.c ****   {
  84              		.loc 1 107 9 discriminator 1 view .LVU11
  85 0000 FEE7     		b	.L6
  86              		.cfi_endproc
  87              	.LFE290:
  89              		.section	.text.BusFault_Handler,"ax",%progbits
  90              		.align	1
  91              		.global	BusFault_Handler
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  96              	BusFault_Handler:
  97              	.LFB291:
 112:Core/Src/stm32l4xx_it.c **** }
 113:Core/Src/stm32l4xx_it.c **** 
 114:Core/Src/stm32l4xx_it.c **** /**
 115:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 116:Core/Src/stm32l4xx_it.c ****   */
 117:Core/Src/stm32l4xx_it.c **** void BusFault_Handler(void)
 118:Core/Src/stm32l4xx_it.c **** {
  98              		.loc 1 118 1 view -0
  99              		.cfi_startproc
 100              		@ Volatile: function does not return.
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.L8:
 119:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 120:Core/Src/stm32l4xx_it.c **** 
 121:Core/Src/stm32l4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 122:Core/Src/stm32l4xx_it.c ****   while (1)
 105              		.loc 1 122 3 discriminator 1 view .LVU13
 123:Core/Src/stm32l4xx_it.c ****   {
 124:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 125:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 126:Core/Src/stm32l4xx_it.c ****   }
 106              		.loc 1 126 3 discriminator 1 view .LVU14
ARM GAS  /tmp/ccHRUVuB.s 			page 5


 122:Core/Src/stm32l4xx_it.c ****   {
 107              		.loc 1 122 9 discriminator 1 view .LVU15
 108 0000 FEE7     		b	.L8
 109              		.cfi_endproc
 110              	.LFE291:
 112              		.section	.text.UsageFault_Handler,"ax",%progbits
 113              		.align	1
 114              		.global	UsageFault_Handler
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 119              	UsageFault_Handler:
 120              	.LFB292:
 127:Core/Src/stm32l4xx_it.c **** }
 128:Core/Src/stm32l4xx_it.c **** 
 129:Core/Src/stm32l4xx_it.c **** /**
 130:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 131:Core/Src/stm32l4xx_it.c ****   */
 132:Core/Src/stm32l4xx_it.c **** void UsageFault_Handler(void)
 133:Core/Src/stm32l4xx_it.c **** {
 121              		.loc 1 133 1 view -0
 122              		.cfi_startproc
 123              		@ Volatile: function does not return.
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127              	.L10:
 134:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 135:Core/Src/stm32l4xx_it.c **** 
 136:Core/Src/stm32l4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 137:Core/Src/stm32l4xx_it.c ****   while (1)
 128              		.loc 1 137 3 discriminator 1 view .LVU17
 138:Core/Src/stm32l4xx_it.c ****   {
 139:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 140:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 141:Core/Src/stm32l4xx_it.c ****   }
 129              		.loc 1 141 3 discriminator 1 view .LVU18
 137:Core/Src/stm32l4xx_it.c ****   {
 130              		.loc 1 137 9 discriminator 1 view .LVU19
 131 0000 FEE7     		b	.L10
 132              		.cfi_endproc
 133              	.LFE292:
 135              		.section	.text.SVC_Handler,"ax",%progbits
 136              		.align	1
 137              		.global	SVC_Handler
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 142              	SVC_Handler:
 143              	.LFB293:
 142:Core/Src/stm32l4xx_it.c **** }
 143:Core/Src/stm32l4xx_it.c **** 
 144:Core/Src/stm32l4xx_it.c **** /**
 145:Core/Src/stm32l4xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 146:Core/Src/stm32l4xx_it.c ****   */
 147:Core/Src/stm32l4xx_it.c **** void SVC_Handler(void)
 148:Core/Src/stm32l4xx_it.c **** {
ARM GAS  /tmp/ccHRUVuB.s 			page 6


 144              		.loc 1 148 1 view -0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 149:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 150:Core/Src/stm32l4xx_it.c **** 
 151:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 152:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 153:Core/Src/stm32l4xx_it.c **** 
 154:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 155:Core/Src/stm32l4xx_it.c **** }
 149              		.loc 1 155 1 view .LVU21
 150 0000 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE293:
 154              		.section	.text.DebugMon_Handler,"ax",%progbits
 155              		.align	1
 156              		.global	DebugMon_Handler
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 161              	DebugMon_Handler:
 162              	.LFB294:
 156:Core/Src/stm32l4xx_it.c **** 
 157:Core/Src/stm32l4xx_it.c **** /**
 158:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Debug monitor.
 159:Core/Src/stm32l4xx_it.c ****   */
 160:Core/Src/stm32l4xx_it.c **** void DebugMon_Handler(void)
 161:Core/Src/stm32l4xx_it.c **** {
 163              		.loc 1 161 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 162:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 163:Core/Src/stm32l4xx_it.c **** 
 164:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 165:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 166:Core/Src/stm32l4xx_it.c **** 
 167:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 168:Core/Src/stm32l4xx_it.c **** }
 168              		.loc 1 168 1 view .LVU23
 169 0000 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE294:
 173              		.section	.text.PendSV_Handler,"ax",%progbits
 174              		.align	1
 175              		.global	PendSV_Handler
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	PendSV_Handler:
 181              	.LFB295:
 169:Core/Src/stm32l4xx_it.c **** 
 170:Core/Src/stm32l4xx_it.c **** /**
 171:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Pendable request for system service.
ARM GAS  /tmp/ccHRUVuB.s 			page 7


 172:Core/Src/stm32l4xx_it.c ****   */
 173:Core/Src/stm32l4xx_it.c **** void PendSV_Handler(void)
 174:Core/Src/stm32l4xx_it.c **** {
 182              		.loc 1 174 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
 175:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 176:Core/Src/stm32l4xx_it.c **** 
 177:Core/Src/stm32l4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 178:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 179:Core/Src/stm32l4xx_it.c **** 
 180:Core/Src/stm32l4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 181:Core/Src/stm32l4xx_it.c **** }
 187              		.loc 1 181 1 view .LVU25
 188 0000 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE295:
 192              		.section	.text.SysTick_Handler,"ax",%progbits
 193              		.align	1
 194              		.global	SysTick_Handler
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 199              	SysTick_Handler:
 200              	.LFB296:
 182:Core/Src/stm32l4xx_it.c **** 
 183:Core/Src/stm32l4xx_it.c **** /**
 184:Core/Src/stm32l4xx_it.c ****   * @brief This function handles System tick timer.
 185:Core/Src/stm32l4xx_it.c ****   */
 186:Core/Src/stm32l4xx_it.c **** void SysTick_Handler(void)
 187:Core/Src/stm32l4xx_it.c **** {
 201              		.loc 1 187 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 08B5     		push	{r3, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 3, -8
 208              		.cfi_offset 14, -4
 188:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 189:Core/Src/stm32l4xx_it.c **** 
 190:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 191:Core/Src/stm32l4xx_it.c ****   HAL_IncTick();
 209              		.loc 1 191 3 view .LVU27
 210 0002 FFF7FEFF 		bl	HAL_IncTick
 211              	.LVL0:
 192:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 193:Core/Src/stm32l4xx_it.c **** 
 194:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 195:Core/Src/stm32l4xx_it.c **** }
 212              		.loc 1 195 1 is_stmt 0 view .LVU28
 213 0006 08BD     		pop	{r3, pc}
 214              		.cfi_endproc
 215              	.LFE296:
 217              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccHRUVuB.s 			page 8


 218              		.align	1
 219              		.global	DMA1_Channel5_IRQHandler
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 224              	DMA1_Channel5_IRQHandler:
 225              	.LFB297:
 196:Core/Src/stm32l4xx_it.c **** 
 197:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
 198:Core/Src/stm32l4xx_it.c **** /* STM32L4xx Peripheral Interrupt Handlers                                    */
 199:Core/Src/stm32l4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 200:Core/Src/stm32l4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 201:Core/Src/stm32l4xx_it.c **** /* please refer to the startup file (startup_stm32l4xx.s).                    */
 202:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
 203:Core/Src/stm32l4xx_it.c **** 
 204:Core/Src/stm32l4xx_it.c **** /**
 205:Core/Src/stm32l4xx_it.c ****   * @brief This function handles DMA1 channel5 global interrupt.
 206:Core/Src/stm32l4xx_it.c ****   */
 207:Core/Src/stm32l4xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 208:Core/Src/stm32l4xx_it.c **** {
 226              		.loc 1 208 1 is_stmt 1 view -0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              		.cfi_def_cfa_offset 8
 232              		.cfi_offset 3, -8
 233              		.cfi_offset 14, -4
 209:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 210:Core/Src/stm32l4xx_it.c **** 
 211:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 212:Core/Src/stm32l4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
 234              		.loc 1 212 3 view .LVU30
 235 0002 0248     		ldr	r0, .L18
 236 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 237              	.LVL1:
 213:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 214:Core/Src/stm32l4xx_it.c **** 
 215:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 216:Core/Src/stm32l4xx_it.c **** }
 238              		.loc 1 216 1 is_stmt 0 view .LVU31
 239 0008 08BD     		pop	{r3, pc}
 240              	.L19:
 241 000a 00BF     		.align	2
 242              	.L18:
 243 000c 00000000 		.word	hdma_usart1_rx
 244              		.cfi_endproc
 245              	.LFE297:
 247              		.section	.text.EXTI9_5_IRQHandler,"ax",%progbits
 248              		.align	1
 249              		.global	EXTI9_5_IRQHandler
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 254              	EXTI9_5_IRQHandler:
 255              	.LFB298:
 217:Core/Src/stm32l4xx_it.c **** 
ARM GAS  /tmp/ccHRUVuB.s 			page 9


 218:Core/Src/stm32l4xx_it.c **** /**
 219:Core/Src/stm32l4xx_it.c ****   * @brief This function handles EXTI line[9:5] interrupts.
 220:Core/Src/stm32l4xx_it.c ****   */
 221:Core/Src/stm32l4xx_it.c **** void EXTI9_5_IRQHandler(void)
 222:Core/Src/stm32l4xx_it.c **** {
 256              		.loc 1 222 1 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260 0000 08B5     		push	{r3, lr}
 261              		.cfi_def_cfa_offset 8
 262              		.cfi_offset 3, -8
 263              		.cfi_offset 14, -4
 223:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI9_5_IRQn 0 */
 224:Core/Src/stm32l4xx_it.c **** 
 225:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI9_5_IRQn 0 */
 226:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 264              		.loc 1 226 3 view .LVU33
 265 0002 4020     		movs	r0, #64
 266 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 267              	.LVL2:
 227:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI9_5_IRQn 1 */
 228:Core/Src/stm32l4xx_it.c **** 
 229:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI9_5_IRQn 1 */
 230:Core/Src/stm32l4xx_it.c **** }
 268              		.loc 1 230 1 is_stmt 0 view .LVU34
 269 0008 08BD     		pop	{r3, pc}
 270              		.cfi_endproc
 271              	.LFE298:
 273              		.section	.text.TIM1_BRK_TIM15_IRQHandler,"ax",%progbits
 274              		.align	1
 275              		.weak	TIM1_BRK_TIM15_IRQHandler
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 280              	TIM1_BRK_TIM15_IRQHandler:
 281              	.LFB299:
 231:Core/Src/stm32l4xx_it.c **** 
 232:Core/Src/stm32l4xx_it.c **** /**
 233:Core/Src/stm32l4xx_it.c ****   * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
 234:Core/Src/stm32l4xx_it.c ****   */
 235:Core/Src/stm32l4xx_it.c **** __weak void TIM1_BRK_TIM15_IRQHandler(void)
 236:Core/Src/stm32l4xx_it.c **** {
 282              		.loc 1 236 1 is_stmt 1 view -0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286 0000 08B5     		push	{r3, lr}
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 3, -8
 289              		.cfi_offset 14, -4
 237:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
 238:Core/Src/stm32l4xx_it.c **** 
 239:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
 240:Core/Src/stm32l4xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 290              		.loc 1 240 3 view .LVU36
 291 0002 0348     		ldr	r0, .L24
ARM GAS  /tmp/ccHRUVuB.s 			page 10


 292 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 293              	.LVL3:
 241:Core/Src/stm32l4xx_it.c ****   HAL_TIM_IRQHandler(&htim15);
 294              		.loc 1 241 3 view .LVU37
 295 0008 0248     		ldr	r0, .L24+4
 296 000a FFF7FEFF 		bl	HAL_TIM_IRQHandler
 297              	.LVL4:
 242:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
 243:Core/Src/stm32l4xx_it.c **** 
 244:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
 245:Core/Src/stm32l4xx_it.c **** }
 298              		.loc 1 245 1 is_stmt 0 view .LVU38
 299 000e 08BD     		pop	{r3, pc}
 300              	.L25:
 301              		.align	2
 302              	.L24:
 303 0010 00000000 		.word	htim1
 304 0014 00000000 		.word	htim15
 305              		.cfi_endproc
 306              	.LFE299:
 308              		.section	.text.TIM1_CC_IRQHandler,"ax",%progbits
 309              		.align	1
 310              		.weak	TIM1_CC_IRQHandler
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 315              	TIM1_CC_IRQHandler:
 316              	.LFB300:
 246:Core/Src/stm32l4xx_it.c **** 
 247:Core/Src/stm32l4xx_it.c **** /**
 248:Core/Src/stm32l4xx_it.c ****   * @brief This function handles TIM1 capture compare interrupt.
 249:Core/Src/stm32l4xx_it.c ****   */
 250:Core/Src/stm32l4xx_it.c **** __weak void TIM1_CC_IRQHandler(void)
 251:Core/Src/stm32l4xx_it.c **** {
 317              		.loc 1 251 1 is_stmt 1 view -0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321 0000 08B5     		push	{r3, lr}
 322              		.cfi_def_cfa_offset 8
 323              		.cfi_offset 3, -8
 324              		.cfi_offset 14, -4
 252:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 0 */
 253:Core/Src/stm32l4xx_it.c **** 
 254:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 0 */
 255:Core/Src/stm32l4xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 325              		.loc 1 255 3 view .LVU40
 326 0002 0248     		ldr	r0, .L28
 327 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 328              	.LVL5:
 256:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 257:Core/Src/stm32l4xx_it.c **** 
 258:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM1_CC_IRQn 1 */
 259:Core/Src/stm32l4xx_it.c **** }
 329              		.loc 1 259 1 is_stmt 0 view .LVU41
 330 0008 08BD     		pop	{r3, pc}
 331              	.L29:
ARM GAS  /tmp/ccHRUVuB.s 			page 11


 332 000a 00BF     		.align	2
 333              	.L28:
 334 000c 00000000 		.word	htim1
 335              		.cfi_endproc
 336              	.LFE300:
 338              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 339              		.align	1
 340              		.global	EXTI15_10_IRQHandler
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 345              	EXTI15_10_IRQHandler:
 346              	.LFB301:
 260:Core/Src/stm32l4xx_it.c **** 
 261:Core/Src/stm32l4xx_it.c **** /**
 262:Core/Src/stm32l4xx_it.c ****   * @brief This function handles EXTI line[15:10] interrupts.
 263:Core/Src/stm32l4xx_it.c ****   */
 264:Core/Src/stm32l4xx_it.c **** void EXTI15_10_IRQHandler(void)
 265:Core/Src/stm32l4xx_it.c **** {
 347              		.loc 1 265 1 is_stmt 1 view -0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351 0000 08B5     		push	{r3, lr}
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 3, -8
 354              		.cfi_offset 14, -4
 266:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 0 */
 267:Core/Src/stm32l4xx_it.c **** 
 268:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 0 */
 269:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(SW0_Pin);
 355              		.loc 1 269 3 view .LVU43
 356 0002 4FF48040 		mov	r0, #16384
 357 0006 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 358              	.LVL6:
 270:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 359              		.loc 1 270 3 view .LVU44
 360 000a 4FF40040 		mov	r0, #32768
 361 000e FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 362              	.LVL7:
 271:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 1 */
 272:Core/Src/stm32l4xx_it.c **** 
 273:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 1 */
 274:Core/Src/stm32l4xx_it.c **** }
 363              		.loc 1 274 1 is_stmt 0 view .LVU45
 364 0012 08BD     		pop	{r3, pc}
 365              		.cfi_endproc
 366              	.LFE301:
 368              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 369              		.align	1
 370              		.weak	TIM7_IRQHandler
 371              		.syntax unified
 372              		.thumb
 373              		.thumb_func
 375              	TIM7_IRQHandler:
 376              	.LFB302:
 275:Core/Src/stm32l4xx_it.c **** 
ARM GAS  /tmp/ccHRUVuB.s 			page 12


 276:Core/Src/stm32l4xx_it.c **** /**
 277:Core/Src/stm32l4xx_it.c ****   * @brief This function handles TIM7 global interrupt.
 278:Core/Src/stm32l4xx_it.c ****   */
 279:Core/Src/stm32l4xx_it.c **** __weak void TIM7_IRQHandler(void)
 280:Core/Src/stm32l4xx_it.c **** {
 377              		.loc 1 280 1 is_stmt 1 view -0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381 0000 08B5     		push	{r3, lr}
 382              		.cfi_def_cfa_offset 8
 383              		.cfi_offset 3, -8
 384              		.cfi_offset 14, -4
 281:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 0 */
 282:Core/Src/stm32l4xx_it.c **** 
 283:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM7_IRQn 0 */
 284:Core/Src/stm32l4xx_it.c ****   HAL_TIM_IRQHandler(&htim7);
 385              		.loc 1 284 3 view .LVU47
 386 0002 0248     		ldr	r0, .L34
 387 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 388              	.LVL8:
 285:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 1 */
 286:Core/Src/stm32l4xx_it.c **** 
 287:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM7_IRQn 1 */
 288:Core/Src/stm32l4xx_it.c **** }
 389              		.loc 1 288 1 is_stmt 0 view .LVU48
 390 0008 08BD     		pop	{r3, pc}
 391              	.L35:
 392 000a 00BF     		.align	2
 393              	.L34:
 394 000c 00000000 		.word	htim7
 395              		.cfi_endproc
 396              	.LFE302:
 398              		.text
 399              	.Letext0:
 400              		.file 2 "/home/retfie/.config/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 401              		.file 3 "/home/retfie/.config/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/ar
 402              		.file 4 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l431xx.h"
 403              		.file 5 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 404              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 405              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 406              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 407              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
ARM GAS  /tmp/ccHRUVuB.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_it.c
     /tmp/ccHRUVuB.s:20     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccHRUVuB.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccHRUVuB.s:44     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccHRUVuB.s:50     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccHRUVuB.s:67     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccHRUVuB.s:73     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccHRUVuB.s:90     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccHRUVuB.s:96     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccHRUVuB.s:113    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccHRUVuB.s:119    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccHRUVuB.s:136    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccHRUVuB.s:142    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccHRUVuB.s:155    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccHRUVuB.s:161    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccHRUVuB.s:174    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccHRUVuB.s:180    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccHRUVuB.s:193    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccHRUVuB.s:199    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccHRUVuB.s:218    .text.DMA1_Channel5_IRQHandler:0000000000000000 $t
     /tmp/ccHRUVuB.s:224    .text.DMA1_Channel5_IRQHandler:0000000000000000 DMA1_Channel5_IRQHandler
     /tmp/ccHRUVuB.s:243    .text.DMA1_Channel5_IRQHandler:000000000000000c $d
     /tmp/ccHRUVuB.s:248    .text.EXTI9_5_IRQHandler:0000000000000000 $t
     /tmp/ccHRUVuB.s:254    .text.EXTI9_5_IRQHandler:0000000000000000 EXTI9_5_IRQHandler
     /tmp/ccHRUVuB.s:274    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000000 $t
     /tmp/ccHRUVuB.s:280    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000000 TIM1_BRK_TIM15_IRQHandler
     /tmp/ccHRUVuB.s:303    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000010 $d
     /tmp/ccHRUVuB.s:309    .text.TIM1_CC_IRQHandler:0000000000000000 $t
     /tmp/ccHRUVuB.s:315    .text.TIM1_CC_IRQHandler:0000000000000000 TIM1_CC_IRQHandler
     /tmp/ccHRUVuB.s:334    .text.TIM1_CC_IRQHandler:000000000000000c $d
     /tmp/ccHRUVuB.s:339    .text.EXTI15_10_IRQHandler:0000000000000000 $t
     /tmp/ccHRUVuB.s:345    .text.EXTI15_10_IRQHandler:0000000000000000 EXTI15_10_IRQHandler
     /tmp/ccHRUVuB.s:369    .text.TIM7_IRQHandler:0000000000000000 $t
     /tmp/ccHRUVuB.s:375    .text.TIM7_IRQHandler:0000000000000000 TIM7_IRQHandler
     /tmp/ccHRUVuB.s:394    .text.TIM7_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_DMA_IRQHandler
hdma_usart1_rx
HAL_GPIO_EXTI_IRQHandler
HAL_TIM_IRQHandler
htim1
htim15
htim7
